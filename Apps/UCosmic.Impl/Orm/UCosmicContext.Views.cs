//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17379
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets8704CE5108B9E623CA7750B842C81290F16D310BFE74C936EF8DD4D8104B6C99))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class ViewsForBaseEntitySets8704CE5108B9E623CA7750B842C81290F16D310BFE74C936EF8DD4D8104B6C99 : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
        /// </Summary>
        public ViewsForBaseEntitySets8704CE5108B9E623CA7750B842C81290F16D310BFE74C936EF8DD4D8104B6C99()
        {
            this.EdmEntityContainerName = "UCosmicContext";
            this.StoreEntityContainerName = "CodeFirstDatabase";
            this.HashOverMappingClosure = "822a64b62681b32e5d12c57a0ad2216669f7d7ddc74c167c02b0e5bf2b692b5f";
            this.HashOverAllExtentViews = "96e0d976fedf37bd2fc4d78d5a5844702474297b4d6f8f68b97e72573a47c2da";
            this.ViewCount = 121;
        }
        
        /// <Summary>
        /// The method returns the view for the index given.
        /// </Summary>
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                return GetView0();
            }
            if ((index == 1))
            {
                return GetView1();
            }
            if ((index == 2))
            {
                return GetView2();
            }
            if ((index == 3))
            {
                return GetView3();
            }
            if ((index == 4))
            {
                return GetView4();
            }
            if ((index == 5))
            {
                return GetView5();
            }
            if ((index == 6))
            {
                return GetView6();
            }
            if ((index == 7))
            {
                return GetView7();
            }
            if ((index == 8))
            {
                return GetView8();
            }
            if ((index == 9))
            {
                return GetView9();
            }
            if ((index == 10))
            {
                return GetView10();
            }
            if ((index == 11))
            {
                return GetView11();
            }
            if ((index == 12))
            {
                return GetView12();
            }
            if ((index == 13))
            {
                return GetView13();
            }
            if ((index == 14))
            {
                return GetView14();
            }
            if ((index == 15))
            {
                return GetView15();
            }
            if ((index == 16))
            {
                return GetView16();
            }
            if ((index == 17))
            {
                return GetView17();
            }
            if ((index == 18))
            {
                return GetView18();
            }
            if ((index == 19))
            {
                return GetView19();
            }
            if ((index == 20))
            {
                return GetView20();
            }
            if ((index == 21))
            {
                return GetView21();
            }
            if ((index == 22))
            {
                return GetView22();
            }
            if ((index == 23))
            {
                return GetView23();
            }
            if ((index == 24))
            {
                return GetView24();
            }
            if ((index == 25))
            {
                return GetView25();
            }
            if ((index == 26))
            {
                return GetView26();
            }
            if ((index == 27))
            {
                return GetView27();
            }
            if ((index == 28))
            {
                return GetView28();
            }
            if ((index == 29))
            {
                return GetView29();
            }
            if ((index == 30))
            {
                return GetView30();
            }
            if ((index == 31))
            {
                return GetView31();
            }
            if ((index == 32))
            {
                return GetView32();
            }
            if ((index == 33))
            {
                return GetView33();
            }
            if ((index == 34))
            {
                return GetView34();
            }
            if ((index == 35))
            {
                return GetView35();
            }
            if ((index == 36))
            {
                return GetView36();
            }
            if ((index == 37))
            {
                return GetView37();
            }
            if ((index == 38))
            {
                return GetView38();
            }
            if ((index == 39))
            {
                return GetView39();
            }
            if ((index == 40))
            {
                return GetView40();
            }
            if ((index == 41))
            {
                return GetView41();
            }
            if ((index == 42))
            {
                return GetView42();
            }
            if ((index == 43))
            {
                return GetView43();
            }
            if ((index == 44))
            {
                return GetView44();
            }
            if ((index == 45))
            {
                return GetView45();
            }
            if ((index == 46))
            {
                return GetView46();
            }
            if ((index == 47))
            {
                return GetView47();
            }
            if ((index == 48))
            {
                return GetView48();
            }
            if ((index == 49))
            {
                return GetView49();
            }
            if ((index == 50))
            {
                return GetView50();
            }
            if ((index == 51))
            {
                return GetView51();
            }
            if ((index == 52))
            {
                return GetView52();
            }
            if ((index == 53))
            {
                return GetView53();
            }
            if ((index == 54))
            {
                return GetView54();
            }
            if ((index == 55))
            {
                return GetView55();
            }
            if ((index == 56))
            {
                return GetView56();
            }
            if ((index == 57))
            {
                return GetView57();
            }
            if ((index == 58))
            {
                return GetView58();
            }
            if ((index == 59))
            {
                return GetView59();
            }
            if ((index == 60))
            {
                return GetView60();
            }
            if ((index == 61))
            {
                return GetView61();
            }
            if ((index == 62))
            {
                return GetView62();
            }
            if ((index == 63))
            {
                return GetView63();
            }
            if ((index == 64))
            {
                return GetView64();
            }
            if ((index == 65))
            {
                return GetView65();
            }
            if ((index == 66))
            {
                return GetView66();
            }
            if ((index == 67))
            {
                return GetView67();
            }
            if ((index == 68))
            {
                return GetView68();
            }
            if ((index == 69))
            {
                return GetView69();
            }
            if ((index == 70))
            {
                return GetView70();
            }
            if ((index == 71))
            {
                return GetView71();
            }
            if ((index == 72))
            {
                return GetView72();
            }
            if ((index == 73))
            {
                return GetView73();
            }
            if ((index == 74))
            {
                return GetView74();
            }
            if ((index == 75))
            {
                return GetView75();
            }
            if ((index == 76))
            {
                return GetView76();
            }
            if ((index == 77))
            {
                return GetView77();
            }
            if ((index == 78))
            {
                return GetView78();
            }
            if ((index == 79))
            {
                return GetView79();
            }
            if ((index == 80))
            {
                return GetView80();
            }
            if ((index == 81))
            {
                return GetView81();
            }
            if ((index == 82))
            {
                return GetView82();
            }
            if ((index == 83))
            {
                return GetView83();
            }
            if ((index == 84))
            {
                return GetView84();
            }
            if ((index == 85))
            {
                return GetView85();
            }
            if ((index == 86))
            {
                return GetView86();
            }
            if ((index == 87))
            {
                return GetView87();
            }
            if ((index == 88))
            {
                return GetView88();
            }
            if ((index == 89))
            {
                return GetView89();
            }
            if ((index == 90))
            {
                return GetView90();
            }
            if ((index == 91))
            {
                return GetView91();
            }
            if ((index == 92))
            {
                return GetView92();
            }
            if ((index == 93))
            {
                return GetView93();
            }
            if ((index == 94))
            {
                return GetView94();
            }
            if ((index == 95))
            {
                return GetView95();
            }
            if ((index == 96))
            {
                return GetView96();
            }
            if ((index == 97))
            {
                return GetView97();
            }
            if ((index == 98))
            {
                return GetView98();
            }
            if ((index == 99))
            {
                return GetView99();
            }
            if ((index == 100))
            {
                return GetView100();
            }
            if ((index == 101))
            {
                return GetView101();
            }
            if ((index == 102))
            {
                return GetView102();
            }
            if ((index == 103))
            {
                return GetView103();
            }
            if ((index == 104))
            {
                return GetView104();
            }
            if ((index == 105))
            {
                return GetView105();
            }
            if ((index == 106))
            {
                return GetView106();
            }
            if ((index == 107))
            {
                return GetView107();
            }
            if ((index == 108))
            {
                return GetView108();
            }
            if ((index == 109))
            {
                return GetView109();
            }
            if ((index == 110))
            {
                return GetView110();
            }
            if ((index == 111))
            {
                return GetView111();
            }
            if ((index == 112))
            {
                return GetView112();
            }
            if ((index == 113))
            {
                return GetView113();
            }
            if ((index == 114))
            {
                return GetView114();
            }
            if ((index == 115))
            {
                return GetView115();
            }
            if ((index == 116))
            {
                return GetView116();
            }
            if ((index == 117))
            {
                return GetView117();
            }
            if ((index == 118))
            {
                return GetView118();
            }
            if ((index == 119))
            {
                return GetView119();
            }
            if ((index == 120))
            {
                return GetView120();
            }
            throw new System.IndexOutOfRangeException();
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.LooseFile
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView0()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.LooseFile", @"
    SELECT VALUE -- Constructing LooseFile
        [CodeFirstDatabaseSchema.LooseFile](T1.LooseFile_RevisionId, T1.LooseFile_Content, T1.LooseFile_Length, T1.LooseFile_MimeType, T1.LooseFile_Name, T1.LooseFile_EntityId, T1.LooseFile_CreatedOnUtc, T1.LooseFile_CreatedByPrincipal, T1.LooseFile_UpdatedOnUtc, T1.LooseFile_UpdatedByPrincipal, T1.LooseFile_Version, T1.LooseFile_IsCurrent, T1.LooseFile_IsArchived, T1.LooseFile_IsDeleted)
    FROM (
        SELECT 
            T.RevisionId AS LooseFile_RevisionId, 
            T.Content AS LooseFile_Content, 
            T.Length AS LooseFile_Length, 
            T.MimeType AS LooseFile_MimeType, 
            T.Name AS LooseFile_Name, 
            T.EntityId AS LooseFile_EntityId, 
            T.CreatedOnUtc AS LooseFile_CreatedOnUtc, 
            T.CreatedByPrincipal AS LooseFile_CreatedByPrincipal, 
            T.UpdatedOnUtc AS LooseFile_UpdatedOnUtc, 
            T.UpdatedByPrincipal AS LooseFile_UpdatedByPrincipal, 
            T.Version AS LooseFile_Version, 
            T.IsCurrent AS LooseFile_IsCurrent, 
            T.IsArchived AS LooseFile_IsArchived, 
            T.IsDeleted AS LooseFile_IsDeleted, 
            True AS _from0
        FROM UCosmicContext.Files AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.Files
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView1()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.Files", @"
    SELECT VALUE -- Constructing Files
        [UCosmic.Orm.LooseFile](T1.LooseFile_RevisionId, T1.LooseFile_Content, T1.LooseFile_Length, T1.LooseFile_MimeType, T1.LooseFile_Name, T1.LooseFile_EntityId, T1.LooseFile_CreatedOnUtc, T1.LooseFile_CreatedByPrincipal, T1.LooseFile_UpdatedOnUtc, T1.LooseFile_UpdatedByPrincipal, T1.LooseFile_Version, T1.LooseFile_IsCurrent, T1.LooseFile_IsArchived, T1.LooseFile_IsDeleted)
    FROM (
        SELECT 
            T.RevisionId AS LooseFile_RevisionId, 
            T.Content AS LooseFile_Content, 
            T.Length AS LooseFile_Length, 
            T.MimeType AS LooseFile_MimeType, 
            T.Name AS LooseFile_Name, 
            T.EntityId AS LooseFile_EntityId, 
            T.CreatedOnUtc AS LooseFile_CreatedOnUtc, 
            T.CreatedByPrincipal AS LooseFile_CreatedByPrincipal, 
            T.UpdatedOnUtc AS LooseFile_UpdatedOnUtc, 
            T.UpdatedByPrincipal AS LooseFile_UpdatedByPrincipal, 
            T.Version AS LooseFile_Version, 
            T.IsCurrent AS LooseFile_IsCurrent, 
            T.IsArchived AS LooseFile_IsArchived, 
            T.IsDeleted AS LooseFile_IsDeleted, 
            True AS _from0
        FROM CodeFirstDatabase.LooseFile AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.Language
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView2()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.Language", @"
    SELECT VALUE -- Constructing Language
        [CodeFirstDatabaseSchema.Language](T1.Language_RevisionId, T1.Language_TwoLetterIsoCode, T1.Language_ThreeLetterIsoCode, T1.Language_ThreeLetterIsoBibliographicCode, T1.Language_EntityId, T1.Language_CreatedOnUtc, T1.Language_CreatedByPrincipal, T1.Language_UpdatedOnUtc, T1.Language_UpdatedByPrincipal, T1.Language_Version, T1.Language_IsCurrent, T1.Language_IsArchived, T1.Language_IsDeleted)
    FROM (
        SELECT 
            T.RevisionId AS Language_RevisionId, 
            T.TwoLetterIsoCode AS Language_TwoLetterIsoCode, 
            T.ThreeLetterIsoCode AS Language_ThreeLetterIsoCode, 
            T.ThreeLetterIsoBibliographicCode AS Language_ThreeLetterIsoBibliographicCode, 
            T.EntityId AS Language_EntityId, 
            T.CreatedOnUtc AS Language_CreatedOnUtc, 
            T.CreatedByPrincipal AS Language_CreatedByPrincipal, 
            T.UpdatedOnUtc AS Language_UpdatedOnUtc, 
            T.UpdatedByPrincipal AS Language_UpdatedByPrincipal, 
            T.Version AS Language_Version, 
            T.IsCurrent AS Language_IsCurrent, 
            T.IsArchived AS Language_IsArchived, 
            T.IsDeleted AS Language_IsDeleted, 
            True AS _from0
        FROM UCosmicContext.Languages AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.LanguageName
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView3()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2765);
            viewString.Append("\r\n    SELECT VALUE -- Constructing LanguageName\r\n        [CodeFirstDatabaseSchem");
            viewString.Append("a.LanguageName](T4.LanguageName_RevisionId, T4.LanguageName_Text, T4.LanguageNam");
            viewString.Append("e_AsciiEquivalent, T4.LanguageName_EntityId, T4.LanguageName_CreatedOnUtc, T4.La");
            viewString.Append("nguageName_CreatedByPrincipal, T4.LanguageName_UpdatedOnUtc, T4.LanguageName_Upd");
            viewString.Append("atedByPrincipal, T4.LanguageName_Version, T4.LanguageName_IsCurrent, T4.Language");
            viewString.Append("Name_IsArchived, T4.LanguageName_IsDeleted, T4.LanguageName_NameForLanguageId, T");
            viewString.Append("4.LanguageName_TranslationToLanguageId)\r\n    FROM (\r\n        SELECT T1.LanguageN");
            viewString.Append("ame_RevisionId, T3.LanguageName_Text, T3.LanguageName_AsciiEquivalent, T3.Langua");
            viewString.Append("geName_EntityId, T3.LanguageName_CreatedOnUtc, T3.LanguageName_CreatedByPrincipa");
            viewString.Append("l, T3.LanguageName_UpdatedOnUtc, T3.LanguageName_UpdatedByPrincipal, T3.Language");
            viewString.Append("Name_Version, T3.LanguageName_IsCurrent, T3.LanguageName_IsArchived, T3.Language");
            viewString.Append("Name_IsDeleted, T2.LanguageName_NameForLanguageId, T1.LanguageName_TranslationTo");
            viewString.Append("LanguageId, T3._from0, T2._from1, T1._from2\r\n        FROM  (\r\n            SELECT");
            viewString.Append(" \r\n                Key(T.LanguageName_TranslationToLanguage_Source).RevisionId A");
            viewString.Append("S LanguageName_RevisionId, \r\n                Key(T.LanguageName_TranslationToLan");
            viewString.Append("guage_Target).RevisionId AS LanguageName_TranslationToLanguageId, \r\n            ");
            viewString.Append("    True AS _from2\r\n            FROM UCosmicContext.LanguageName_TranslationToLa");
            viewString.Append("nguage AS T) AS T1\r\n            INNER JOIN (\r\n            SELECT \r\n             ");
            viewString.Append("   Key(T.LanguageName_NameForLanguage_Source).RevisionId AS LanguageName_Revisio");
            viewString.Append("nId, \r\n                Key(T.LanguageName_NameForLanguage_Target).RevisionId AS ");
            viewString.Append("LanguageName_NameForLanguageId, \r\n                True AS _from1\r\n            FR");
            viewString.Append("OM UCosmicContext.LanguageName_NameForLanguage AS T) AS T2\r\n            ON T1.La");
            viewString.Append("nguageName_RevisionId = T2.LanguageName_RevisionId\r\n            INNER JOIN (\r\n  ");
            viewString.Append("          SELECT \r\n                T.RevisionId AS LanguageName_RevisionId, \r\n  ");
            viewString.Append("              T.Text AS LanguageName_Text, \r\n                T.AsciiEquivalent A");
            viewString.Append("S LanguageName_AsciiEquivalent, \r\n                T.EntityId AS LanguageName_Ent");
            viewString.Append("ityId, \r\n                T.CreatedOnUtc AS LanguageName_CreatedOnUtc, \r\n        ");
            viewString.Append("        T.CreatedByPrincipal AS LanguageName_CreatedByPrincipal, \r\n             ");
            viewString.Append("   T.UpdatedOnUtc AS LanguageName_UpdatedOnUtc, \r\n                T.UpdatedByPri");
            viewString.Append("ncipal AS LanguageName_UpdatedByPrincipal, \r\n                T.Version AS Langua");
            viewString.Append("geName_Version, \r\n                T.IsCurrent AS LanguageName_IsCurrent, \r\n     ");
            viewString.Append("           T.IsArchived AS LanguageName_IsArchived, \r\n                T.IsDelete");
            viewString.Append("d AS LanguageName_IsDeleted, \r\n                True AS _from0\r\n            FROM ");
            viewString.Append("UCosmicContext.LanguageNames AS T) AS T3\r\n            ON T1.LanguageName_Revisio");
            viewString.Append("nId = T3.LanguageName_RevisionId\r\n    ) AS T4");
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.LanguageName", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.Place
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView4()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2999);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Place\r\n        [CodeFirstDatabaseSchema.Place");
            viewString.Append("](T3.Place_RevisionId, T3.Place_OfficialName, T3.Place_IsEarth, T3.Place_IsConti");
            viewString.Append("nent, T3.Place_IsCountry, T3.Place_IsAdmin1, T3.Place_IsAdmin2, T3.Place_IsAdmin");
            viewString.Append("3, T3.Place_Latitude, T3.Place_Longitude, T3.Place_NorthLatitude, T3.Place_EastL");
            viewString.Append("ongitude, T3.Place_SouthLatitude, T3.Place_WestLongitude, T3.Place_EntityId, T3.");
            viewString.Append("Place_CreatedOnUtc, T3.Place_CreatedByPrincipal, T3.Place_UpdatedOnUtc, T3.Place");
            viewString.Append("_UpdatedByPrincipal, T3.Place_Version, T3.Place_IsCurrent, T3.Place_IsArchived, ");
            viewString.Append("T3.Place_IsDeleted, T3.Place_ParentId)\r\n    FROM (\r\n        SELECT T1.Place_Revi");
            viewString.Append("sionId, T1.Place_OfficialName, T1.Place_IsEarth, T1.Place_IsContinent, T1.Place_");
            viewString.Append("IsCountry, T1.Place_IsAdmin1, T1.Place_IsAdmin2, T1.Place_IsAdmin3, T1.Place_Lat");
            viewString.Append("itude, T1.Place_Longitude, T1.Place_NorthLatitude, T1.Place_EastLongitude, T1.Pl");
            viewString.Append("ace_SouthLatitude, T1.Place_WestLongitude, T1.Place_EntityId, T1.Place_CreatedOn");
            viewString.Append("Utc, T1.Place_CreatedByPrincipal, T1.Place_UpdatedOnUtc, T1.Place_UpdatedByPrinc");
            viewString.Append("ipal, T1.Place_Version, T1.Place_IsCurrent, T1.Place_IsArchived, T1.Place_IsDele");
            viewString.Append("ted, T2.Place_ParentId, T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _fro");
            viewString.Append("m1\r\n        FROM  (\r\n            SELECT \r\n                T.RevisionId AS Place_");
            viewString.Append("RevisionId, \r\n                T.OfficialName AS Place_OfficialName, \r\n          ");
            viewString.Append("      T.IsEarth AS Place_IsEarth, \r\n                T.IsContinent AS Place_IsCon");
            viewString.Append("tinent, \r\n                T.IsCountry AS Place_IsCountry, \r\n                T.Is");
            viewString.Append("Admin1 AS Place_IsAdmin1, \r\n                T.IsAdmin2 AS Place_IsAdmin2, \r\n    ");
            viewString.Append("            T.IsAdmin3 AS Place_IsAdmin3, \r\n                T.Center.Latitude AS");
            viewString.Append(" Place_Latitude, \r\n                T.Center.Longitude AS Place_Longitude, \r\n    ");
            viewString.Append("            T.BoundingBox.Northeast.Latitude AS Place_NorthLatitude, \r\n         ");
            viewString.Append("       T.BoundingBox.Northeast.Longitude AS Place_EastLongitude, \r\n             ");
            viewString.Append("   T.BoundingBox.Southwest.Latitude AS Place_SouthLatitude, \r\n                T.");
            viewString.Append("BoundingBox.Southwest.Longitude AS Place_WestLongitude, \r\n                T.Enti");
            viewString.Append("tyId AS Place_EntityId, \r\n                T.CreatedOnUtc AS Place_CreatedOnUtc, ");
            viewString.Append("\r\n                T.CreatedByPrincipal AS Place_CreatedByPrincipal, \r\n          ");
            viewString.Append("      T.UpdatedOnUtc AS Place_UpdatedOnUtc, \r\n                T.UpdatedByPrincip");
            viewString.Append("al AS Place_UpdatedByPrincipal, \r\n                T.Version AS Place_Version, \r\n");
            viewString.Append("                T.IsCurrent AS Place_IsCurrent, \r\n                T.IsArchived A");
            viewString.Append("S Place_IsArchived, \r\n                T.IsDeleted AS Place_IsDeleted, \r\n        ");
            viewString.Append("        True AS _from0\r\n            FROM UCosmicContext.Places AS T) AS T1\r\n    ");
            viewString.Append("        LEFT OUTER JOIN (\r\n            SELECT \r\n                Key(T.Place_Pare");
            viewString.Append("nt_Source).RevisionId AS Place_RevisionId, \r\n                Key(T.Place_Parent_");
            viewString.Append("Target).RevisionId AS Place_ParentId, \r\n                True AS _from1\r\n        ");
            viewString.Append("    FROM UCosmicContext.Place_Parent AS T) AS T2\r\n            ON T1.Place_Revisi");
            viewString.Append("onId = T2.Place_RevisionId\r\n    ) AS T3");
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.Place", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.PlaceNode
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView5()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.PlaceNode", @"
    SELECT VALUE -- Constructing PlaceNode
        [CodeFirstDatabaseSchema.PlaceNode](T1.PlaceNode_AncestorId, T1.PlaceNode_OffspringId, T1.PlaceNode_Separation)
    FROM (
        SELECT 
            T.AncestorId AS PlaceNode_AncestorId, 
            T.OffspringId AS PlaceNode_OffspringId, 
            T.Separation AS PlaceNode_Separation, 
            True AS _from0
        FROM UCosmicContext.PlaceNodes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.GeoNamesToponym
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView6()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3826);
            viewString.Append("\r\n    SELECT VALUE -- Constructing GeoNamesToponym\r\n        [CodeFirstDatabaseSc");
            viewString.Append("hema.GeoNamesToponym](T4.GeoNamesToponym_GeoNameId, T4.GeoNamesToponym_FeatureCo");
            viewString.Append("de, T4.GeoNamesToponym_TimeZoneId, T4.GeoNamesToponym_Latitude, T4.GeoNamesTopon");
            viewString.Append("ym_Longitude, T4.GeoNamesToponym_Name, T4.GeoNamesToponym_ToponymName, T4.GeoNam");
            viewString.Append("esToponym_ContinentCode, T4.GeoNamesToponym_CountryCode, T4.GeoNamesToponym_Coun");
            viewString.Append("tryName, T4.GeoNamesToponym_Admin1Code, T4.GeoNamesToponym_Admin1Name, T4.GeoNam");
            viewString.Append("esToponym_Admin2Code, T4.GeoNamesToponym_Admin2Name, T4.GeoNamesToponym_Admin3Co");
            viewString.Append("de, T4.GeoNamesToponym_Admin3Name, T4.GeoNamesToponym_Admin4Code, T4.GeoNamesTop");
            viewString.Append("onym_Admin4Name, T4.GeoNamesToponym_Population, T4.GeoNamesToponym_Elevation, T4");
            viewString.Append(".GeoNamesToponym_PlaceId, T4.GeoNamesToponym_ParentGeoNameId)\r\n    FROM (\r\n     ");
            viewString.Append("   SELECT T1.GeoNamesToponym_GeoNameId, T1.GeoNamesToponym_FeatureCode, T1.GeoNa");
            viewString.Append("mesToponym_TimeZoneId, T1.GeoNamesToponym_Latitude, T1.GeoNamesToponym_Longitude");
            viewString.Append(", T1.GeoNamesToponym_Name, T1.GeoNamesToponym_ToponymName, T1.GeoNamesToponym_Co");
            viewString.Append("ntinentCode, T1.GeoNamesToponym_CountryCode, T1.GeoNamesToponym_CountryName, T1.");
            viewString.Append("GeoNamesToponym_Admin1Code, T1.GeoNamesToponym_Admin1Name, T1.GeoNamesToponym_Ad");
            viewString.Append("min2Code, T1.GeoNamesToponym_Admin2Name, T1.GeoNamesToponym_Admin3Code, T1.GeoNa");
            viewString.Append("mesToponym_Admin3Name, T1.GeoNamesToponym_Admin4Code, T1.GeoNamesToponym_Admin4N");
            viewString.Append("ame, T1.GeoNamesToponym_Population, T1.GeoNamesToponym_Elevation, T2.GeoNamesTop");
            viewString.Append("onym_PlaceId, T3.GeoNamesToponym_ParentGeoNameId, T1._from0, (T2._from1 AND T2._");
            viewString.Append("from1 IS NOT NULL) AS _from1, (T3._from2 AND T3._from2 IS NOT NULL) AS _from2\r\n ");
            viewString.Append("       FROM  (\r\n            SELECT \r\n                T.GeoNameId AS GeoNamesTopo");
            viewString.Append("nym_GeoNameId, \r\n                T.FeatureCode AS GeoNamesToponym_FeatureCode, \r");
            viewString.Append("\n                T.TimeZoneId AS GeoNamesToponym_TimeZoneId, \r\n                T");
            viewString.Append(".Center.Latitude AS GeoNamesToponym_Latitude, \r\n                T.Center.Longitu");
            viewString.Append("de AS GeoNamesToponym_Longitude, \r\n                T.Name AS GeoNamesToponym_Nam");
            viewString.Append("e, \r\n                T.ToponymName AS GeoNamesToponym_ToponymName, \r\n           ");
            viewString.Append("     T.ContinentCode AS GeoNamesToponym_ContinentCode, \r\n                T.Count");
            viewString.Append("ryCode AS GeoNamesToponym_CountryCode, \r\n                T.CountryName AS GeoNam");
            viewString.Append("esToponym_CountryName, \r\n                T.Admin1Code AS GeoNamesToponym_Admin1C");
            viewString.Append("ode, \r\n                T.Admin1Name AS GeoNamesToponym_Admin1Name, \r\n           ");
            viewString.Append("     T.Admin2Code AS GeoNamesToponym_Admin2Code, \r\n                T.Admin2Name ");
            viewString.Append("AS GeoNamesToponym_Admin2Name, \r\n                T.Admin3Code AS GeoNamesToponym");
            viewString.Append("_Admin3Code, \r\n                T.Admin3Name AS GeoNamesToponym_Admin3Name, \r\n   ");
            viewString.Append("             T.Admin4Code AS GeoNamesToponym_Admin4Code, \r\n                T.Adm");
            viewString.Append("in4Name AS GeoNamesToponym_Admin4Name, \r\n                T.Population AS GeoName");
            viewString.Append("sToponym_Population, \r\n                T.Elevation AS GeoNamesToponym_Elevation,");
            viewString.Append(" \r\n                True AS _from0\r\n            FROM UCosmicContext.GeoNamesTopon");
            viewString.Append("yms AS T) AS T1\r\n            LEFT OUTER JOIN (\r\n            SELECT \r\n           ");
            viewString.Append("     Key(T.GeoNamesToponym_Place_Source).GeoNameId AS GeoNamesToponym_GeoNameId,");
            viewString.Append(" \r\n                Key(T.GeoNamesToponym_Place_Target).RevisionId AS GeoNamesTop");
            viewString.Append("onym_PlaceId, \r\n                True AS _from1\r\n            FROM UCosmicContext.");
            viewString.Append("GeoNamesToponym_Place AS T) AS T2\r\n            ON T1.GeoNamesToponym_GeoNameId =");
            viewString.Append(" T2.GeoNamesToponym_GeoNameId\r\n            LEFT OUTER JOIN (\r\n            SELECT");
            viewString.Append(" \r\n                Key(T.GeoNamesToponym_Parent_Source).GeoNameId AS GeoNamesTop");
            viewString.Append("onym_GeoNameId, \r\n                Key(T.GeoNamesToponym_Parent_Target).GeoNameId");
            viewString.Append(" AS GeoNamesToponym_ParentGeoNameId, \r\n                True AS _from2\r\n         ");
            viewString.Append("   FROM UCosmicContext.GeoNamesToponym_Parent AS T) AS T3\r\n            ON T1.Geo");
            viewString.Append("NamesToponym_GeoNameId = T3.GeoNamesToponym_GeoNameId\r\n    ) AS T4");
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.GeoNamesToponym", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.GeoNamesFeature
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView7()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.GeoNamesFeature", @"
    SELECT VALUE -- Constructing GeoNamesFeature
        [CodeFirstDatabaseSchema.GeoNamesFeature](T1.GeoNamesFeature_Code, T1.GeoNamesFeature_ClassCode, T1.GeoNamesFeature_Name)
    FROM (
        SELECT 
            T.Code AS GeoNamesFeature_Code, 
            T.ClassCode AS GeoNamesFeature_ClassCode, 
            T.Name AS GeoNamesFeature_Name, 
            True AS _from0
        FROM UCosmicContext.GeoNamesFeatures AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.GeoNamesFeatureClass
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView8()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.GeoNamesFeatureClass", @"
    SELECT VALUE -- Constructing GeoNamesFeatureClass
        [CodeFirstDatabaseSchema.GeoNamesFeatureClass](T1.GeoNamesFeatureClass_Code, T1.GeoNamesFeatureClass_Name)
    FROM (
        SELECT 
            T.Code AS GeoNamesFeatureClass_Code, 
            T.Name AS GeoNamesFeatureClass_Name, 
            True AS _from0
        FROM UCosmicContext.GeoNamesFeatureClasses AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.GeoNamesTimeZone
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView9()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.GeoNamesTimeZone", @"
    SELECT VALUE -- Constructing GeoNamesTimeZone
        [CodeFirstDatabaseSchema.GeoNamesTimeZone](T1.GeoNamesTimeZone_Id, T1.GeoNamesTimeZone_DstOffset, T1.GeoNamesTimeZone_GmtOffset)
    FROM (
        SELECT 
            T.Id AS GeoNamesTimeZone_Id, 
            T.DstOffset AS GeoNamesTimeZone_DstOffset, 
            T.GmtOffset AS GeoNamesTimeZone_GmtOffset, 
            True AS _from0
        FROM UCosmicContext.GeoNamesTimeZones AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.GeoNamesCountry
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView10()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.GeoNamesCountry", "\r\n    SELECT VALUE -- Constructing GeoNamesCountry\r\n        [CodeFirstDatabaseSch" +
                    "ema.GeoNamesCountry](T1.GeoNamesCountry_GeoNameId, T1.GeoNamesCountry_NorthLatit" +
                    "ude, T1.GeoNamesCountry_EastLongitude, T1.GeoNamesCountry_SouthLatitude, T1.GeoN" +
                    "amesCountry_WestLongitude, T1.GeoNamesCountry_Code, T1.GeoNamesCountry_Name, T1." +
                    "GeoNamesCountry_ContinentCode, T1.GeoNamesCountry_ContinentName, T1.GeoNamesCoun" +
                    "try_IsoNumericCode, T1.GeoNamesCountry_IsoAlpha3Code, T1.GeoNamesCountry_FipsCod" +
                    "e, T1.GeoNamesCountry_CapitalCityName, T1.GeoNamesCountry_AreaInSqKm, T1.GeoName" +
                    "sCountry_CurrencyCode, T1.GeoNamesCountry_Languages, T1.GeoNamesCountry_Populati" +
                    "on)\r\n    FROM (\r\n        SELECT \r\n            T.GeoNameId AS GeoNamesCountry_Geo" +
                    "NameId, \r\n            T.BoundingBox.Northeast.Latitude AS GeoNamesCountry_NorthL" +
                    "atitude, \r\n            T.BoundingBox.Northeast.Longitude AS GeoNamesCountry_East" +
                    "Longitude, \r\n            T.BoundingBox.Southwest.Latitude AS GeoNamesCountry_Sou" +
                    "thLatitude, \r\n            T.BoundingBox.Southwest.Longitude AS GeoNamesCountry_W" +
                    "estLongitude, \r\n            T.Code AS GeoNamesCountry_Code, \r\n            T.Name" +
                    " AS GeoNamesCountry_Name, \r\n            T.ContinentCode AS GeoNamesCountry_Conti" +
                    "nentCode, \r\n            T.ContinentName AS GeoNamesCountry_ContinentName, \r\n    " +
                    "        T.IsoNumericCode AS GeoNamesCountry_IsoNumericCode, \r\n            T.IsoA" +
                    "lpha3Code AS GeoNamesCountry_IsoAlpha3Code, \r\n            T.FipsCode AS GeoNames" +
                    "Country_FipsCode, \r\n            T.CapitalCityName AS GeoNamesCountry_CapitalCity" +
                    "Name, \r\n            T.AreaInSqKm AS GeoNamesCountry_AreaInSqKm, \r\n            T." +
                    "CurrencyCode AS GeoNamesCountry_CurrencyCode, \r\n            T.Languages AS GeoNa" +
                    "mesCountry_Languages, \r\n            T.Population AS GeoNamesCountry_Population, " +
                    "\r\n            True AS _from0\r\n        FROM UCosmicContext.GeoNamesCountries AS T" +
                    "\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.GeoNamesToponymNode
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView11()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.GeoNamesToponymNode", @"
    SELECT VALUE -- Constructing GeoNamesToponymNode
        [CodeFirstDatabaseSchema.GeoNamesToponymNode](T1.GeoNamesToponymNode_AncestorId, T1.GeoNamesToponymNode_OffspringId, T1.GeoNamesToponymNode_Separation)
    FROM (
        SELECT 
            T.AncestorId AS GeoNamesToponymNode_AncestorId, 
            T.OffspringId AS GeoNamesToponymNode_OffspringId, 
            T.Separation AS GeoNamesToponymNode_Separation, 
            True AS _from0
        FROM UCosmicContext.GeoNamesToponymNodes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.GeoNamesAlternateName
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView12()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.GeoNamesAlternateName", @"
    SELECT VALUE -- Constructing GeoNamesAlternateName
        [CodeFirstDatabaseSchema.GeoNamesAlternateName](T1.GeoNamesAlternateName_AlternateNameId, T1.GeoNamesAlternateName_GeoNameId, T1.GeoNamesAlternateName_Language, T1.GeoNamesAlternateName_Name)
    FROM (
        SELECT 
            T.AlternateNameId AS GeoNamesAlternateName_AlternateNameId, 
            T.GeoNameId AS GeoNamesAlternateName_GeoNameId, 
            T.Language AS GeoNamesAlternateName_Language, 
            T.Name AS GeoNamesAlternateName_Name, 
            True AS _from0
        FROM UCosmicContext.GeoNamesAlternateNames AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.GeoPlanetPlace
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView13()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(6380);
            viewString.Append("\r\n    SELECT VALUE -- Constructing GeoPlanetPlace\r\n        [CodeFirstDatabaseSch");
            viewString.Append("ema.GeoPlanetPlace](T6.GeoPlanetPlace_WoeId, T6.GeoPlanetPlace_EnglishName, T6.G");
            viewString.Append("eoPlanetPlace_Uri, T6.GeoPlanetPlace_Latitude, T6.GeoPlanetPlace_Longitude, T6.G");
            viewString.Append("eoPlanetPlace_NorthLatitude, T6.GeoPlanetPlace_EastLongitude, T6.GeoPlanetPlace_");
            viewString.Append("SouthLatitude, T6.GeoPlanetPlace_WestLongitude, T6.GeoPlanetPlace_AreaRank, T6.G");
            viewString.Append("eoPlanetPlace_PopulationRank, T6.GeoPlanetPlace_Postal, T6.GeoPlanetPlace_Countr");
            viewString.Append("yCode, T6.GeoPlanetPlace_CountryType, T6.GeoPlanetPlace_CountryName, T6.GeoPlane");
            viewString.Append("tPlace_Admin1Code, T6.GeoPlanetPlace_Admin1Type, T6.GeoPlanetPlace_Admin1Name, T");
            viewString.Append("6.GeoPlanetPlace_Admin2Code, T6.GeoPlanetPlace_Admin2Type, T6.GeoPlanetPlace_Adm");
            viewString.Append("in2Name, T6.GeoPlanetPlace_Admin3Code, T6.GeoPlanetPlace_Admin3Type, T6.GeoPlane");
            viewString.Append("tPlace_Admin3Name, T6.GeoPlanetPlace_Locality1Type, T6.GeoPlanetPlace_Locality1N");
            viewString.Append("ame, T6.GeoPlanetPlace_Locality2Type, T6.GeoPlanetPlace_Locality2Name, T6.GeoPla");
            viewString.Append("netPlace_ParentWoeId, T6.GeoPlanetPlace_TypeCode, T6.GeoPlanetPlace_PlaceId)\r\n  ");
            viewString.Append("  FROM (\r\n        SELECT T3.GeoPlanetPlace_WoeId, T3.GeoPlanetPlace_EnglishName,");
            viewString.Append(" T3.GeoPlanetPlace_Uri, T3.GeoPlanetPlace_Latitude, T3.GeoPlanetPlace_Longitude,");
            viewString.Append(" T3.GeoPlanetPlace_NorthLatitude, T3.GeoPlanetPlace_EastLongitude, T3.GeoPlanetP");
            viewString.Append("lace_SouthLatitude, T3.GeoPlanetPlace_WestLongitude, T3.GeoPlanetPlace_AreaRank,");
            viewString.Append(" T3.GeoPlanetPlace_PopulationRank, T3.GeoPlanetPlace_Postal, T3.GeoPlanetPlace_C");
            viewString.Append("ountryCode, T3.GeoPlanetPlace_CountryType, T3.GeoPlanetPlace_CountryName, T3.Geo");
            viewString.Append("PlanetPlace_Admin1Code, T3.GeoPlanetPlace_Admin1Type, T3.GeoPlanetPlace_Admin1Na");
            viewString.Append("me, T3.GeoPlanetPlace_Admin2Code, T3.GeoPlanetPlace_Admin2Type, T3.GeoPlanetPlac");
            viewString.Append("e_Admin2Name, T3.GeoPlanetPlace_Admin3Code, T3.GeoPlanetPlace_Admin3Type, T3.Geo");
            viewString.Append("PlanetPlace_Admin3Name, T3.GeoPlanetPlace_Locality1Type, T3.GeoPlanetPlace_Local");
            viewString.Append("ity1Name, T3.GeoPlanetPlace_Locality2Type, T3.GeoPlanetPlace_Locality2Name, T4.G");
            viewString.Append("eoPlanetPlace_ParentWoeId, T3.GeoPlanetPlace_TypeCode, T5.GeoPlanetPlace_PlaceId");
            viewString.Append(", T3._from0, (T4._from1 AND T4._from1 IS NOT NULL) AS _from1, T3._from2, (T5._fr");
            viewString.Append("om3 AND T5._from3 IS NOT NULL) AS _from3\r\n        FROM  (\r\n            SELECT T1");
            viewString.Append(".GeoPlanetPlace_WoeId, T1.GeoPlanetPlace_EnglishName, T1.GeoPlanetPlace_Uri, T1.");
            viewString.Append("GeoPlanetPlace_Latitude, T1.GeoPlanetPlace_Longitude, T1.GeoPlanetPlace_NorthLat");
            viewString.Append("itude, T1.GeoPlanetPlace_EastLongitude, T1.GeoPlanetPlace_SouthLatitude, T1.GeoP");
            viewString.Append("lanetPlace_WestLongitude, T1.GeoPlanetPlace_AreaRank, T1.GeoPlanetPlace_Populati");
            viewString.Append("onRank, T1.GeoPlanetPlace_Postal, T1.GeoPlanetPlace_CountryCode, T1.GeoPlanetPla");
            viewString.Append("ce_CountryType, T1.GeoPlanetPlace_CountryName, T1.GeoPlanetPlace_Admin1Code, T1.");
            viewString.Append("GeoPlanetPlace_Admin1Type, T1.GeoPlanetPlace_Admin1Name, T1.GeoPlanetPlace_Admin");
            viewString.Append("2Code, T1.GeoPlanetPlace_Admin2Type, T1.GeoPlanetPlace_Admin2Name, T1.GeoPlanetP");
            viewString.Append("lace_Admin3Code, T1.GeoPlanetPlace_Admin3Type, T1.GeoPlanetPlace_Admin3Name, T1.");
            viewString.Append("GeoPlanetPlace_Locality1Type, T1.GeoPlanetPlace_Locality1Name, T1.GeoPlanetPlace");
            viewString.Append("_Locality2Type, T1.GeoPlanetPlace_Locality2Name, T2.GeoPlanetPlace_TypeCode, T1.");
            viewString.Append("_from0, T2._from2\r\n            FROM  (\r\n                SELECT \r\n               ");
            viewString.Append("     T.WoeId AS GeoPlanetPlace_WoeId, \r\n                    T.EnglishName AS Geo");
            viewString.Append("PlanetPlace_EnglishName, \r\n                    T.Uri AS GeoPlanetPlace_Uri, \r\n  ");
            viewString.Append("                  T.Center.Latitude AS GeoPlanetPlace_Latitude, \r\n              ");
            viewString.Append("      T.Center.Longitude AS GeoPlanetPlace_Longitude, \r\n                    T.Bo");
            viewString.Append("undingBox.Northeast.Latitude AS GeoPlanetPlace_NorthLatitude, \r\n                ");
            viewString.Append("    T.BoundingBox.Northeast.Longitude AS GeoPlanetPlace_EastLongitude, \r\n       ");
            viewString.Append("             T.BoundingBox.Southwest.Latitude AS GeoPlanetPlace_SouthLatitude, \r");
            viewString.Append("\n                    T.BoundingBox.Southwest.Longitude AS GeoPlanetPlace_WestLon");
            viewString.Append("gitude, \r\n                    T.AreaRank AS GeoPlanetPlace_AreaRank, \r\n         ");
            viewString.Append("           T.PopulationRank AS GeoPlanetPlace_PopulationRank, \r\n                ");
            viewString.Append("    T.Postal AS GeoPlanetPlace_Postal, \r\n                    T.Country.Code AS G");
            viewString.Append("eoPlanetPlace_CountryCode, \r\n                    T.Country.TypeName AS GeoPlanet");
            viewString.Append("Place_CountryType, \r\n                    T.Country.Name AS GeoPlanetPlace_Countr");
            viewString.Append("yName, \r\n                    T.Admin1.Code AS GeoPlanetPlace_Admin1Code, \r\n     ");
            viewString.Append("               T.Admin1.TypeName AS GeoPlanetPlace_Admin1Type, \r\n               ");
            viewString.Append("     T.Admin1.Name AS GeoPlanetPlace_Admin1Name, \r\n                    T.Admin2.");
            viewString.Append("Code AS GeoPlanetPlace_Admin2Code, \r\n                    T.Admin2.TypeName AS Ge");
            viewString.Append("oPlanetPlace_Admin2Type, \r\n                    T.Admin2.Name AS GeoPlanetPlace_A");
            viewString.Append("dmin2Name, \r\n                    T.Admin3.Code AS GeoPlanetPlace_Admin3Code, \r\n ");
            viewString.Append("                   T.Admin3.TypeName AS GeoPlanetPlace_Admin3Type, \r\n           ");
            viewString.Append("         T.Admin3.Name AS GeoPlanetPlace_Admin3Name, \r\n                    T.Loc");
            viewString.Append("ality1.TypeName AS GeoPlanetPlace_Locality1Type, \r\n                    T.Localit");
            viewString.Append("y1.Name AS GeoPlanetPlace_Locality1Name, \r\n                    T.Locality2.TypeN");
            viewString.Append("ame AS GeoPlanetPlace_Locality2Type, \r\n                    T.Locality2.Name AS G");
            viewString.Append("eoPlanetPlace_Locality2Name, \r\n                    True AS _from0\r\n             ");
            viewString.Append("   FROM UCosmicContext.GeoPlanetPlaces AS T) AS T1\r\n                INNER JOIN (");
            viewString.Append("\r\n                SELECT \r\n                    Key(T.GeoPlanetPlace_Type_Source)");
            viewString.Append(".WoeId AS GeoPlanetPlace_WoeId, \r\n                    Key(T.GeoPlanetPlace_Type_");
            viewString.Append("Target).Code AS GeoPlanetPlace_TypeCode, \r\n                    True AS _from2\r\n ");
            viewString.Append("               FROM UCosmicContext.GeoPlanetPlace_Type AS T) AS T2\r\n            ");
            viewString.Append("    ON T1.GeoPlanetPlace_WoeId = T2.GeoPlanetPlace_WoeId) AS T3\r\n            LEF");
            viewString.Append("T OUTER JOIN (\r\n            SELECT \r\n                Key(T.GeoPlanetPlace_Parent");
            viewString.Append("_Source).WoeId AS GeoPlanetPlace_WoeId, \r\n                Key(T.GeoPlanetPlace_P");
            viewString.Append("arent_Target).WoeId AS GeoPlanetPlace_ParentWoeId, \r\n                True AS _fr");
            viewString.Append("om1\r\n            FROM UCosmicContext.GeoPlanetPlace_Parent AS T) AS T4\r\n        ");
            viewString.Append("    ON T3.GeoPlanetPlace_WoeId = T4.GeoPlanetPlace_WoeId\r\n            LEFT OUTER");
            viewString.Append(" JOIN (\r\n            SELECT \r\n                Key(T.GeoPlanetPlace_Place_Source)");
            viewString.Append(".WoeId AS GeoPlanetPlace_WoeId, \r\n                Key(T.GeoPlanetPlace_Place_Tar");
            viewString.Append("get).RevisionId AS GeoPlanetPlace_PlaceId, \r\n                True AS _from3\r\n   ");
            viewString.Append("         FROM UCosmicContext.GeoPlanetPlace_Place AS T) AS T5\r\n            ON T3");
            viewString.Append(".GeoPlanetPlace_WoeId = T5.GeoPlanetPlace_WoeId\r\n    ) AS T6");
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.GeoPlanetPlace", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.GeoPlanetPlaceNode
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView14()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.GeoPlanetPlaceNode", @"
    SELECT VALUE -- Constructing GeoPlanetPlaceNode
        [CodeFirstDatabaseSchema.GeoPlanetPlaceNode](T1.GeoPlanetPlaceNode_AncestorId, T1.GeoPlanetPlaceNode_OffspringId, T1.GeoPlanetPlaceNode_Separation)
    FROM (
        SELECT 
            T.AncestorId AS GeoPlanetPlaceNode_AncestorId, 
            T.OffspringId AS GeoPlanetPlaceNode_OffspringId, 
            T.Separation AS GeoPlanetPlaceNode_Separation, 
            True AS _from0
        FROM UCosmicContext.GeoPlanetPlaceNodes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.GeoPlanetPlaceType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView15()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.GeoPlanetPlaceType", @"
    SELECT VALUE -- Constructing GeoPlanetPlaceType
        [CodeFirstDatabaseSchema.GeoPlanetPlaceType](T1.GeoPlanetPlaceType_Code, T1.GeoPlanetPlaceType_Uri, T1.GeoPlanetPlaceType_EnglishName, T1.GeoPlanetPlaceType_EnglishDescription)
    FROM (
        SELECT 
            T.Code AS GeoPlanetPlaceType_Code, 
            T.Uri AS GeoPlanetPlaceType_Uri, 
            T.EnglishName AS GeoPlanetPlaceType_EnglishName, 
            T.EnglishDescription AS GeoPlanetPlaceType_EnglishDescription, 
            True AS _from0
        FROM UCosmicContext.GeoPlanetPlaceTypes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.GeoPlanetPlaceBelongTo
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView16()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.GeoPlanetPlaceBelongTo", @"
    SELECT VALUE -- Constructing GeoPlanetPlaceBelongTo
        [CodeFirstDatabaseSchema.GeoPlanetPlaceBelongTo](T1.GeoPlanetPlaceBelongTo_PlaceWoeId, T1.GeoPlanetPlaceBelongTo_Rank, T1.GeoPlanetPlaceBelongTo_BelongToWoeId)
    FROM (
        SELECT 
            T.PlaceWoeId AS GeoPlanetPlaceBelongTo_PlaceWoeId, 
            T.Rank AS GeoPlanetPlaceBelongTo_Rank, 
            T.BelongToWoeId AS GeoPlanetPlaceBelongTo_BelongToWoeId, 
            True AS _from0
        FROM UCosmicContext.GeoPlanetPlaceBelongToes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.PlaceName
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView17()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3467);
            viewString.Append("\r\n    SELECT VALUE -- Constructing PlaceName\r\n        [CodeFirstDatabaseSchema.P");
            viewString.Append("laceName](T5.PlaceName_RevisionId, T5.PlaceName_TranslationToHint, T5.PlaceName_");
            viewString.Append("IsPreferredTranslation, T5.PlaceName_Text, T5.PlaceName_AsciiEquivalent, T5.Plac");
            viewString.Append("eName_EntityId, T5.PlaceName_CreatedOnUtc, T5.PlaceName_CreatedByPrincipal, T5.P");
            viewString.Append("laceName_UpdatedOnUtc, T5.PlaceName_UpdatedByPrincipal, T5.PlaceName_Version, T5");
            viewString.Append(".PlaceName_IsCurrent, T5.PlaceName_IsArchived, T5.PlaceName_IsDeleted, T5.PlaceN");
            viewString.Append("ame_NameForPlaceId, T5.PlaceName_TranslationToLanguageId)\r\n    FROM (\r\n        S");
            viewString.Append("ELECT T3.PlaceName_RevisionId, T3.PlaceName_TranslationToHint, T3.PlaceName_IsPr");
            viewString.Append("eferredTranslation, T3.PlaceName_Text, T3.PlaceName_AsciiEquivalent, T3.PlaceNam");
            viewString.Append("e_EntityId, T3.PlaceName_CreatedOnUtc, T3.PlaceName_CreatedByPrincipal, T3.Place");
            viewString.Append("Name_UpdatedOnUtc, T3.PlaceName_UpdatedByPrincipal, T3.PlaceName_Version, T3.Pla");
            viewString.Append("ceName_IsCurrent, T3.PlaceName_IsArchived, T3.PlaceName_IsDeleted, T3.PlaceName_");
            viewString.Append("NameForPlaceId, T4.PlaceName_TranslationToLanguageId, T3._from0, T3._from1, (T4.");
            viewString.Append("_from2 AND T4._from2 IS NOT NULL) AS _from2\r\n        FROM  (\r\n            SELECT");
            viewString.Append(" T1.PlaceName_RevisionId, T1.PlaceName_TranslationToHint, T1.PlaceName_IsPreferr");
            viewString.Append("edTranslation, T1.PlaceName_Text, T1.PlaceName_AsciiEquivalent, T1.PlaceName_Ent");
            viewString.Append("ityId, T1.PlaceName_CreatedOnUtc, T1.PlaceName_CreatedByPrincipal, T1.PlaceName_");
            viewString.Append("UpdatedOnUtc, T1.PlaceName_UpdatedByPrincipal, T1.PlaceName_Version, T1.PlaceNam");
            viewString.Append("e_IsCurrent, T1.PlaceName_IsArchived, T1.PlaceName_IsDeleted, T2.PlaceName_NameF");
            viewString.Append("orPlaceId, T1._from0, T2._from1\r\n            FROM  (\r\n                SELECT \r\n ");
            viewString.Append("                   T.RevisionId AS PlaceName_RevisionId, \r\n                    T");
            viewString.Append(".TranslationToHint AS PlaceName_TranslationToHint, \r\n                    T.IsPre");
            viewString.Append("ferredTranslation AS PlaceName_IsPreferredTranslation, \r\n                    T.T");
            viewString.Append("ext AS PlaceName_Text, \r\n                    T.AsciiEquivalent AS PlaceName_Asci");
            viewString.Append("iEquivalent, \r\n                    T.EntityId AS PlaceName_EntityId, \r\n         ");
            viewString.Append("           T.CreatedOnUtc AS PlaceName_CreatedOnUtc, \r\n                    T.Cre");
            viewString.Append("atedByPrincipal AS PlaceName_CreatedByPrincipal, \r\n                    T.Updated");
            viewString.Append("OnUtc AS PlaceName_UpdatedOnUtc, \r\n                    T.UpdatedByPrincipal AS P");
            viewString.Append("laceName_UpdatedByPrincipal, \r\n                    T.Version AS PlaceName_Versio");
            viewString.Append("n, \r\n                    T.IsCurrent AS PlaceName_IsCurrent, \r\n                 ");
            viewString.Append("   T.IsArchived AS PlaceName_IsArchived, \r\n                    T.IsDeleted AS Pl");
            viewString.Append("aceName_IsDeleted, \r\n                    True AS _from0\r\n                FROM UC");
            viewString.Append("osmicContext.PlaceNames AS T) AS T1\r\n                INNER JOIN (\r\n             ");
            viewString.Append("   SELECT \r\n                    Key(T.PlaceName_NameFor_Source).RevisionId AS Pl");
            viewString.Append("aceName_RevisionId, \r\n                    Key(T.PlaceName_NameFor_Target).Revisi");
            viewString.Append("onId AS PlaceName_NameForPlaceId, \r\n                    True AS _from1\r\n        ");
            viewString.Append("        FROM UCosmicContext.PlaceName_NameFor AS T) AS T2\r\n                ON T1");
            viewString.Append(".PlaceName_RevisionId = T2.PlaceName_RevisionId) AS T3\r\n            LEFT OUTER J");
            viewString.Append("OIN (\r\n            SELECT \r\n                Key(T.PlaceName_TranslationToLanguag");
            viewString.Append("e_Source).RevisionId AS PlaceName_RevisionId, \r\n                Key(T.PlaceName_");
            viewString.Append("TranslationToLanguage_Target).RevisionId AS PlaceName_TranslationToLanguageId, \r");
            viewString.Append("\n                True AS _from2\r\n            FROM UCosmicContext.PlaceName_Trans");
            viewString.Append("lationToLanguage AS T) AS T4\r\n            ON T3.PlaceName_RevisionId = T4.PlaceN");
            viewString.Append("ame_RevisionId\r\n    ) AS T5");
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.PlaceName", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.User
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView18()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.User", "\r\n    SELECT VALUE -- Constructing User\r\n        [CodeFirstDatabaseSchema.User](T" +
                    "3.User_RevisionId, T3.User_UserName, T3.User_SubjectNameId, T3.User_IsRegistered" +
                    ", T3.User_EntityId, T3.User_CreatedOnUtc, T3.User_CreatedByPrincipal, T3.User_Up" +
                    "datedOnUtc, T3.User_UpdatedByPrincipal, T3.User_Version, T3.User_IsCurrent, T3.U" +
                    "ser_IsArchived, T3.User_IsDeleted, T3.User_PersonId)\r\n    FROM (\r\n        SELECT" +
                    " T1.User_RevisionId, T2.User_UserName, T2.User_SubjectNameId, T2.User_IsRegister" +
                    "ed, T2.User_EntityId, T2.User_CreatedOnUtc, T2.User_CreatedByPrincipal, T2.User_" +
                    "UpdatedOnUtc, T2.User_UpdatedByPrincipal, T2.User_Version, T2.User_IsCurrent, T2" +
                    ".User_IsArchived, T2.User_IsDeleted, T1.User_PersonId, T2._from0, T1._from1\r\n   " +
                    "     FROM  (\r\n            SELECT \r\n                Key(T.Person_User_Target).Rev" +
                    "isionId AS User_RevisionId, \r\n                Key(T.Person_User_Source).Revision" +
                    "Id AS User_PersonId, \r\n                True AS _from1\r\n            FROM UCosmicC" +
                    "ontext.Person_User AS T) AS T1\r\n            INNER JOIN (\r\n            SELECT \r\n " +
                    "               T.RevisionId AS User_RevisionId, \r\n                T.UserName AS " +
                    "User_UserName, \r\n                T.SubjectNameId AS User_SubjectNameId, \r\n      " +
                    "          T.IsRegistered AS User_IsRegistered, \r\n                T.EntityId AS U" +
                    "ser_EntityId, \r\n                T.CreatedOnUtc AS User_CreatedOnUtc, \r\n         " +
                    "       T.CreatedByPrincipal AS User_CreatedByPrincipal, \r\n                T.Upda" +
                    "tedOnUtc AS User_UpdatedOnUtc, \r\n                T.UpdatedByPrincipal AS User_Up" +
                    "datedByPrincipal, \r\n                T.Version AS User_Version, \r\n               " +
                    " T.IsCurrent AS User_IsCurrent, \r\n                T.IsArchived AS User_IsArchive" +
                    "d, \r\n                T.IsDeleted AS User_IsDeleted, \r\n                True AS _f" +
                    "rom0\r\n            FROM UCosmicContext.Users AS T) AS T2\r\n            ON T1.User_" +
                    "RevisionId = T2.User_RevisionId\r\n    ) AS T3");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.RoleGrant
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView19()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3246);
            viewString.Append("\r\n    SELECT VALUE -- Constructing RoleGrant\r\n        [CodeFirstDatabaseSchema.R");
            viewString.Append("oleGrant](T6.RoleGrant_RevisionId, T6.RoleGrant_EntityId, T6.RoleGrant_CreatedOn");
            viewString.Append("Utc, T6.RoleGrant_CreatedByPrincipal, T6.RoleGrant_UpdatedOnUtc, T6.RoleGrant_Up");
            viewString.Append("datedByPrincipal, T6.RoleGrant_Version, T6.RoleGrant_IsCurrent, T6.RoleGrant_IsA");
            viewString.Append("rchived, T6.RoleGrant_IsDeleted, T6.RoleGrant_UserId, T6.RoleGrant_RoleId, T6.Ro");
            viewString.Append("leGrant_ForEstablishmentId)\r\n    FROM (\r\n        SELECT T4.RoleGrant_RevisionId,");
            viewString.Append(" T4.RoleGrant_EntityId, T4.RoleGrant_CreatedOnUtc, T4.RoleGrant_CreatedByPrincip");
            viewString.Append("al, T4.RoleGrant_UpdatedOnUtc, T4.RoleGrant_UpdatedByPrincipal, T4.RoleGrant_Ver");
            viewString.Append("sion, T4.RoleGrant_IsCurrent, T4.RoleGrant_IsArchived, T4.RoleGrant_IsDeleted, T");
            viewString.Append("4.RoleGrant_UserId, T4.RoleGrant_RoleId, T5.RoleGrant_ForEstablishmentId, T4._fr");
            viewString.Append("om0, T4._from1, T4._from2, (T5._from3 AND T5._from3 IS NOT NULL) AS _from3\r\n    ");
            viewString.Append("    FROM  (\r\n            SELECT T1.RoleGrant_RevisionId, T1.RoleGrant_EntityId, ");
            viewString.Append("T1.RoleGrant_CreatedOnUtc, T1.RoleGrant_CreatedByPrincipal, T1.RoleGrant_Updated");
            viewString.Append("OnUtc, T1.RoleGrant_UpdatedByPrincipal, T1.RoleGrant_Version, T1.RoleGrant_IsCur");
            viewString.Append("rent, T1.RoleGrant_IsArchived, T1.RoleGrant_IsDeleted, T2.RoleGrant_UserId, T3.R");
            viewString.Append("oleGrant_RoleId, T1._from0, T2._from1, T3._from2\r\n            FROM  (\r\n         ");
            viewString.Append("       SELECT \r\n                    T.RevisionId AS RoleGrant_RevisionId, \r\n    ");
            viewString.Append("                T.EntityId AS RoleGrant_EntityId, \r\n                    T.Create");
            viewString.Append("dOnUtc AS RoleGrant_CreatedOnUtc, \r\n                    T.CreatedByPrincipal AS ");
            viewString.Append("RoleGrant_CreatedByPrincipal, \r\n                    T.UpdatedOnUtc AS RoleGrant_");
            viewString.Append("UpdatedOnUtc, \r\n                    T.UpdatedByPrincipal AS RoleGrant_UpdatedByP");
            viewString.Append("rincipal, \r\n                    T.Version AS RoleGrant_Version, \r\n              ");
            viewString.Append("      T.IsCurrent AS RoleGrant_IsCurrent, \r\n                    T.IsArchived AS ");
            viewString.Append("RoleGrant_IsArchived, \r\n                    T.IsDeleted AS RoleGrant_IsDeleted, ");
            viewString.Append("\r\n                    True AS _from0\r\n                FROM UCosmicContext.RoleGr");
            viewString.Append("ants AS T) AS T1\r\n                INNER JOIN (\r\n                SELECT \r\n       ");
            viewString.Append("             Key(T.RoleGrant_User_Source).RevisionId AS RoleGrant_RevisionId, \r\n");
            viewString.Append("                    Key(T.RoleGrant_User_Target).RevisionId AS RoleGrant_UserId,");
            viewString.Append(" \r\n                    True AS _from1\r\n                FROM UCosmicContext.RoleG");
            viewString.Append("rant_User AS T) AS T2\r\n                ON T1.RoleGrant_RevisionId = T2.RoleGrant");
            viewString.Append("_RevisionId\r\n                INNER JOIN (\r\n                SELECT \r\n            ");
            viewString.Append("        Key(T.RoleGrant_Role_Source).RevisionId AS RoleGrant_RevisionId, \r\n     ");
            viewString.Append("               Key(T.RoleGrant_Role_Target).RevisionId AS RoleGrant_RoleId, \r\n  ");
            viewString.Append("                  True AS _from2\r\n                FROM UCosmicContext.RoleGrant_");
            viewString.Append("Role AS T) AS T3\r\n                ON T1.RoleGrant_RevisionId = T3.RoleGrant_Revi");
            viewString.Append("sionId) AS T4\r\n            LEFT OUTER JOIN (\r\n            SELECT \r\n             ");
            viewString.Append("   Key(T.RoleGrant_ForEstablishment_Source).RevisionId AS RoleGrant_RevisionId, ");
            viewString.Append("\r\n                Key(T.RoleGrant_ForEstablishment_Target).RevisionId AS RoleGra");
            viewString.Append("nt_ForEstablishmentId, \r\n                True AS _from3\r\n            FROM UCosmi");
            viewString.Append("cContext.RoleGrant_ForEstablishment AS T) AS T5\r\n            ON T4.RoleGrant_Rev");
            viewString.Append("isionId = T5.RoleGrant_RevisionId\r\n    ) AS T6");
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.RoleGrant", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.Role
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView20()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.Role", @"
    SELECT VALUE -- Constructing Role
        [CodeFirstDatabaseSchema.Role](T1.Role_RevisionId, T1.Role_Name, T1.Role_Description, T1.Role_EntityId, T1.Role_CreatedOnUtc, T1.Role_CreatedByPrincipal, T1.Role_UpdatedOnUtc, T1.Role_UpdatedByPrincipal, T1.Role_Version, T1.Role_IsCurrent, T1.Role_IsArchived, T1.Role_IsDeleted)
    FROM (
        SELECT 
            T.RevisionId AS Role_RevisionId, 
            T.Name AS Role_Name, 
            T.Description AS Role_Description, 
            T.EntityId AS Role_EntityId, 
            T.CreatedOnUtc AS Role_CreatedOnUtc, 
            T.CreatedByPrincipal AS Role_CreatedByPrincipal, 
            T.UpdatedOnUtc AS Role_UpdatedOnUtc, 
            T.UpdatedByPrincipal AS Role_UpdatedByPrincipal, 
            T.Version AS Role_Version, 
            T.IsCurrent AS Role_IsCurrent, 
            T.IsArchived AS Role_IsArchived, 
            T.IsDeleted AS Role_IsDeleted, 
            True AS _from0
        FROM UCosmicContext.Roles AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.Establishment
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView21()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(4854);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Establishment\r\n        [CodeFirstDatabaseSche");
            viewString.Append("ma.Establishment](T5.Establishment_RevisionId, T5.Establishment_OfficialName, T5");
            viewString.Append(".Establishment_WebsiteUrl, T5.Establishment_IsMember, T5.Establishment_CollegeBo");
            viewString.Append("ardDesignatedIndicator, T5.Establishment_UCosmicCode, T5.Establishment_PublicPho");
            viewString.Append("ne, T5.Establishment_PublicFax, T5.Establishment_PublicEmail, T5.Establishment_P");
            viewString.Append("artnerPhone, T5.Establishment_PartnerFax, T5.Establishment_PartnerEmail, T5.Esta");
            viewString.Append("blishment_EntityId, T5.Establishment_CreatedOnUtc, T5.Establishment_CreatedByPri");
            viewString.Append("ncipal, T5.Establishment_UpdatedOnUtc, T5.Establishment_UpdatedByPrincipal, T5.E");
            viewString.Append("stablishment_Version, T5.Establishment_IsCurrent, T5.Establishment_IsArchived, T");
            viewString.Append("5.Establishment_IsDeleted, T5.Establishment_ParentId, T5.Establishment_TypeId)\r\n");
            viewString.Append("    FROM (\r\n        SELECT T3.Establishment_RevisionId, T3.Establishment_Officia");
            viewString.Append("lName, T3.Establishment_WebsiteUrl, T3.Establishment_IsMember, T3.Establishment_");
            viewString.Append("CollegeBoardDesignatedIndicator, T3.Establishment_UCosmicCode, T3.Establishment_");
            viewString.Append("PublicPhone, T3.Establishment_PublicFax, T3.Establishment_PublicEmail, T3.Establ");
            viewString.Append("ishment_PartnerPhone, T3.Establishment_PartnerFax, T3.Establishment_PartnerEmail");
            viewString.Append(", T3.Establishment_EntityId, T3.Establishment_CreatedOnUtc, T3.Establishment_Cre");
            viewString.Append("atedByPrincipal, T3.Establishment_UpdatedOnUtc, T3.Establishment_UpdatedByPrinci");
            viewString.Append("pal, T3.Establishment_Version, T3.Establishment_IsCurrent, T3.Establishment_IsAr");
            viewString.Append("chived, T3.Establishment_IsDeleted, T4.Establishment_ParentId, T3.Establishment_");
            viewString.Append("TypeId, T3._from0, (T4._from1 AND T4._from1 IS NOT NULL) AS _from1, T3._from2\r\n ");
            viewString.Append("       FROM  (\r\n            SELECT T1.Establishment_RevisionId, T2.Establishment");
            viewString.Append("_OfficialName, T2.Establishment_WebsiteUrl, T2.Establishment_IsMember, T2.Establ");
            viewString.Append("ishment_CollegeBoardDesignatedIndicator, T2.Establishment_UCosmicCode, T2.Establ");
            viewString.Append("ishment_PublicPhone, T2.Establishment_PublicFax, T2.Establishment_PublicEmail, T");
            viewString.Append("2.Establishment_PartnerPhone, T2.Establishment_PartnerFax, T2.Establishment_Part");
            viewString.Append("nerEmail, T2.Establishment_EntityId, T2.Establishment_CreatedOnUtc, T2.Establish");
            viewString.Append("ment_CreatedByPrincipal, T2.Establishment_UpdatedOnUtc, T2.Establishment_Updated");
            viewString.Append("ByPrincipal, T2.Establishment_Version, T2.Establishment_IsCurrent, T2.Establishm");
            viewString.Append("ent_IsArchived, T2.Establishment_IsDeleted, T1.Establishment_TypeId, T2._from0, ");
            viewString.Append("T1._from2\r\n            FROM  (\r\n                SELECT \r\n                    Key");
            viewString.Append("(T.Establishment_Type_Source).RevisionId AS Establishment_RevisionId, \r\n        ");
            viewString.Append("            Key(T.Establishment_Type_Target).RevisionId AS Establishment_TypeId,");
            viewString.Append(" \r\n                    True AS _from2\r\n                FROM UCosmicContext.Estab");
            viewString.Append("lishment_Type AS T) AS T1\r\n                INNER JOIN (\r\n                SELECT ");
            viewString.Append("\r\n                    T.RevisionId AS Establishment_RevisionId, \r\n              ");
            viewString.Append("      T.OfficialName AS Establishment_OfficialName, \r\n                    T.Webs");
            viewString.Append("iteUrl AS Establishment_WebsiteUrl, \r\n                    T.IsMember AS Establis");
            viewString.Append("hment_IsMember, \r\n                    T.InstitutionInfo.CollegeBoardDesignatedIn");
            viewString.Append("dicator AS Establishment_CollegeBoardDesignatedIndicator, \r\n                    ");
            viewString.Append("T.InstitutionInfo.UCosmicCode AS Establishment_UCosmicCode, \r\n                  ");
            viewString.Append("  T.PublicContactInfo.Phone AS Establishment_PublicPhone, \r\n                    ");
            viewString.Append("T.PublicContactInfo.Fax AS Establishment_PublicFax, \r\n                    T.Publ");
            viewString.Append("icContactInfo.Email AS Establishment_PublicEmail, \r\n                    T.Partne");
            viewString.Append("rContactInfo.Phone AS Establishment_PartnerPhone, \r\n                    T.Partne");
            viewString.Append("rContactInfo.Fax AS Establishment_PartnerFax, \r\n                    T.PartnerCon");
            viewString.Append("tactInfo.Email AS Establishment_PartnerEmail, \r\n                    T.EntityId A");
            viewString.Append("S Establishment_EntityId, \r\n                    T.CreatedOnUtc AS Establishment_");
            viewString.Append("CreatedOnUtc, \r\n                    T.CreatedByPrincipal AS Establishment_Create");
            viewString.Append("dByPrincipal, \r\n                    T.UpdatedOnUtc AS Establishment_UpdatedOnUtc");
            viewString.Append(", \r\n                    T.UpdatedByPrincipal AS Establishment_UpdatedByPrincipal");
            viewString.Append(", \r\n                    T.Version AS Establishment_Version, \r\n                  ");
            viewString.Append("  T.IsCurrent AS Establishment_IsCurrent, \r\n                    T.IsArchived AS ");
            viewString.Append("Establishment_IsArchived, \r\n                    T.IsDeleted AS Establishment_IsD");
            viewString.Append("eleted, \r\n                    True AS _from0\r\n                FROM UCosmicContex");
            viewString.Append("t.Establishments AS T) AS T2\r\n                ON T1.Establishment_RevisionId = T");
            viewString.Append("2.Establishment_RevisionId) AS T3\r\n            LEFT OUTER JOIN (\r\n            SE");
            viewString.Append("LECT \r\n                Key(T.Establishment_Parent_Source).RevisionId AS Establis");
            viewString.Append("hment_RevisionId, \r\n                Key(T.Establishment_Parent_Target).RevisionI");
            viewString.Append("d AS Establishment_ParentId, \r\n                True AS _from1\r\n            FROM ");
            viewString.Append("UCosmicContext.Establishment_Parent AS T) AS T4\r\n            ON T3.Establishment");
            viewString.Append("_RevisionId = T4.Establishment_RevisionId\r\n    ) AS T5");
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.Establishment", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.EstablishmentName
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView22()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(4226);
            viewString.Append("\r\n    SELECT VALUE -- Constructing EstablishmentName\r\n        [CodeFirstDatabase");
            viewString.Append("Schema.EstablishmentName](T5.EstablishmentName_RevisionId, T5.EstablishmentName_");
            viewString.Append("TranslationToHint, T5.EstablishmentName_IsFormerName, T5.EstablishmentName_IsOff");
            viewString.Append("icialName, T5.EstablishmentName_Text, T5.EstablishmentName_AsciiEquivalent, T5.E");
            viewString.Append("stablishmentName_EntityId, T5.EstablishmentName_CreatedOnUtc, T5.EstablishmentNa");
            viewString.Append("me_CreatedByPrincipal, T5.EstablishmentName_UpdatedOnUtc, T5.EstablishmentName_U");
            viewString.Append("pdatedByPrincipal, T5.EstablishmentName_Version, T5.EstablishmentName_IsCurrent,");
            viewString.Append(" T5.EstablishmentName_IsArchived, T5.EstablishmentName_IsDeleted, T5.Establishme");
            viewString.Append("ntName_TranslationToLanguageId, T5.EstablishmentName_ForEstablishmentId)\r\n    FR");
            viewString.Append("OM (\r\n        SELECT T3.EstablishmentName_RevisionId, T3.EstablishmentName_Trans");
            viewString.Append("lationToHint, T3.EstablishmentName_IsFormerName, T3.EstablishmentName_IsOfficial");
            viewString.Append("Name, T3.EstablishmentName_Text, T3.EstablishmentName_AsciiEquivalent, T3.Establ");
            viewString.Append("ishmentName_EntityId, T3.EstablishmentName_CreatedOnUtc, T3.EstablishmentName_Cr");
            viewString.Append("eatedByPrincipal, T3.EstablishmentName_UpdatedOnUtc, T3.EstablishmentName_Update");
            viewString.Append("dByPrincipal, T3.EstablishmentName_Version, T3.EstablishmentName_IsCurrent, T3.E");
            viewString.Append("stablishmentName_IsArchived, T3.EstablishmentName_IsDeleted, T4.EstablishmentNam");
            viewString.Append("e_TranslationToLanguageId, T3.EstablishmentName_ForEstablishmentId, T3._from0, (");
            viewString.Append("T4._from1 AND T4._from1 IS NOT NULL) AS _from1, T3._from2\r\n        FROM  (\r\n    ");
            viewString.Append("        SELECT T1.EstablishmentName_RevisionId, T2.EstablishmentName_Translation");
            viewString.Append("ToHint, T2.EstablishmentName_IsFormerName, T2.EstablishmentName_IsOfficialName, ");
            viewString.Append("T2.EstablishmentName_Text, T2.EstablishmentName_AsciiEquivalent, T2.Establishmen");
            viewString.Append("tName_EntityId, T2.EstablishmentName_CreatedOnUtc, T2.EstablishmentName_CreatedB");
            viewString.Append("yPrincipal, T2.EstablishmentName_UpdatedOnUtc, T2.EstablishmentName_UpdatedByPri");
            viewString.Append("ncipal, T2.EstablishmentName_Version, T2.EstablishmentName_IsCurrent, T2.Establi");
            viewString.Append("shmentName_IsArchived, T2.EstablishmentName_IsDeleted, T1.EstablishmentName_ForE");
            viewString.Append("stablishmentId, T2._from0, T1._from2\r\n            FROM  (\r\n                SELEC");
            viewString.Append("T \r\n                    Key(T.Establishment_Names_Target).RevisionId AS Establis");
            viewString.Append("hmentName_RevisionId, \r\n                    Key(T.Establishment_Names_Source).Re");
            viewString.Append("visionId AS EstablishmentName_ForEstablishmentId, \r\n                    True AS ");
            viewString.Append("_from2\r\n                FROM UCosmicContext.Establishment_Names AS T) AS T1\r\n   ");
            viewString.Append("             INNER JOIN (\r\n                SELECT \r\n                    T.Revisi");
            viewString.Append("onId AS EstablishmentName_RevisionId, \r\n                    T.TranslationToHint ");
            viewString.Append("AS EstablishmentName_TranslationToHint, \r\n                    T.IsFormerName AS ");
            viewString.Append("EstablishmentName_IsFormerName, \r\n                    T.IsOfficialName AS Establ");
            viewString.Append("ishmentName_IsOfficialName, \r\n                    T.Text AS EstablishmentName_Te");
            viewString.Append("xt, \r\n                    T.AsciiEquivalent AS EstablishmentName_AsciiEquivalent");
            viewString.Append(", \r\n                    T.EntityId AS EstablishmentName_EntityId, \r\n            ");
            viewString.Append("        T.CreatedOnUtc AS EstablishmentName_CreatedOnUtc, \r\n                    ");
            viewString.Append("T.CreatedByPrincipal AS EstablishmentName_CreatedByPrincipal, \r\n                ");
            viewString.Append("    T.UpdatedOnUtc AS EstablishmentName_UpdatedOnUtc, \r\n                    T.Up");
            viewString.Append("datedByPrincipal AS EstablishmentName_UpdatedByPrincipal, \r\n                    ");
            viewString.Append("T.Version AS EstablishmentName_Version, \r\n                    T.IsCurrent AS Est");
            viewString.Append("ablishmentName_IsCurrent, \r\n                    T.IsArchived AS EstablishmentNam");
            viewString.Append("e_IsArchived, \r\n                    T.IsDeleted AS EstablishmentName_IsDeleted, ");
            viewString.Append("\r\n                    True AS _from0\r\n                FROM UCosmicContext.Establ");
            viewString.Append("ishmentNames AS T) AS T2\r\n                ON T1.EstablishmentName_RevisionId = T");
            viewString.Append("2.EstablishmentName_RevisionId) AS T3\r\n            LEFT OUTER JOIN (\r\n          ");
            viewString.Append("  SELECT \r\n                Key(T.EstablishmentName_TranslationToLanguage_Source)");
            viewString.Append(".RevisionId AS EstablishmentName_RevisionId, \r\n                Key(T.Establishme");
            viewString.Append("ntName_TranslationToLanguage_Target).RevisionId AS EstablishmentName_Translation");
            viewString.Append("ToLanguageId, \r\n                True AS _from1\r\n            FROM UCosmicContext.");
            viewString.Append("EstablishmentName_TranslationToLanguage AS T) AS T4\r\n            ON T3.Establish");
            viewString.Append("mentName_RevisionId = T4.EstablishmentName_RevisionId\r\n    ) AS T5");
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.EstablishmentName", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.EstablishmentUrl
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView23()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2498);
            viewString.Append("\r\n    SELECT VALUE -- Constructing EstablishmentUrl\r\n        [CodeFirstDatabaseS");
            viewString.Append("chema.EstablishmentUrl](T3.EstablishmentUrl_RevisionId, T3.EstablishmentUrl_Valu");
            viewString.Append("e, T3.EstablishmentUrl_IsOfficialUrl, T3.EstablishmentUrl_IsFormerUrl, T3.Establ");
            viewString.Append("ishmentUrl_EntityId, T3.EstablishmentUrl_CreatedOnUtc, T3.EstablishmentUrl_Creat");
            viewString.Append("edByPrincipal, T3.EstablishmentUrl_UpdatedOnUtc, T3.EstablishmentUrl_UpdatedByPr");
            viewString.Append("incipal, T3.EstablishmentUrl_Version, T3.EstablishmentUrl_IsCurrent, T3.Establis");
            viewString.Append("hmentUrl_IsArchived, T3.EstablishmentUrl_IsDeleted, T3.EstablishmentUrl_ForEstab");
            viewString.Append("lishmentId)\r\n    FROM (\r\n        SELECT T1.EstablishmentUrl_RevisionId, T2.Estab");
            viewString.Append("lishmentUrl_Value, T2.EstablishmentUrl_IsOfficialUrl, T2.EstablishmentUrl_IsForm");
            viewString.Append("erUrl, T2.EstablishmentUrl_EntityId, T2.EstablishmentUrl_CreatedOnUtc, T2.Establ");
            viewString.Append("ishmentUrl_CreatedByPrincipal, T2.EstablishmentUrl_UpdatedOnUtc, T2.Establishmen");
            viewString.Append("tUrl_UpdatedByPrincipal, T2.EstablishmentUrl_Version, T2.EstablishmentUrl_IsCurr");
            viewString.Append("ent, T2.EstablishmentUrl_IsArchived, T2.EstablishmentUrl_IsDeleted, T1.Establish");
            viewString.Append("mentUrl_ForEstablishmentId, T2._from0, T1._from1\r\n        FROM  (\r\n            S");
            viewString.Append("ELECT \r\n                Key(T.Establishment_Urls_Target).RevisionId AS Establish");
            viewString.Append("mentUrl_RevisionId, \r\n                Key(T.Establishment_Urls_Source).RevisionI");
            viewString.Append("d AS EstablishmentUrl_ForEstablishmentId, \r\n                True AS _from1\r\n    ");
            viewString.Append("        FROM UCosmicContext.Establishment_Urls AS T) AS T1\r\n            INNER JO");
            viewString.Append("IN (\r\n            SELECT \r\n                T.RevisionId AS EstablishmentUrl_Revi");
            viewString.Append("sionId, \r\n                T.[Value] AS EstablishmentUrl_Value, \r\n               ");
            viewString.Append(" T.IsOfficialUrl AS EstablishmentUrl_IsOfficialUrl, \r\n                T.IsFormer");
            viewString.Append("Url AS EstablishmentUrl_IsFormerUrl, \r\n                T.EntityId AS Establishme");
            viewString.Append("ntUrl_EntityId, \r\n                T.CreatedOnUtc AS EstablishmentUrl_CreatedOnUt");
            viewString.Append("c, \r\n                T.CreatedByPrincipal AS EstablishmentUrl_CreatedByPrincipal");
            viewString.Append(", \r\n                T.UpdatedOnUtc AS EstablishmentUrl_UpdatedOnUtc, \r\n         ");
            viewString.Append("       T.UpdatedByPrincipal AS EstablishmentUrl_UpdatedByPrincipal, \r\n          ");
            viewString.Append("      T.Version AS EstablishmentUrl_Version, \r\n                T.IsCurrent AS Es");
            viewString.Append("tablishmentUrl_IsCurrent, \r\n                T.IsArchived AS EstablishmentUrl_IsA");
            viewString.Append("rchived, \r\n                T.IsDeleted AS EstablishmentUrl_IsDeleted, \r\n        ");
            viewString.Append("        True AS _from0\r\n            FROM UCosmicContext.EstablishmentUrls AS T) ");
            viewString.Append("AS T2\r\n            ON T1.EstablishmentUrl_RevisionId = T2.EstablishmentUrl_Revis");
            viewString.Append("ionId\r\n    ) AS T3");
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.EstablishmentUrl", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.EstablishmentNode
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView24()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.EstablishmentNode", @"
    SELECT VALUE -- Constructing EstablishmentNode
        [CodeFirstDatabaseSchema.EstablishmentNode](T1.EstablishmentNode_AncestorId, T1.EstablishmentNode_OffspringId, T1.EstablishmentNode_Separation)
    FROM (
        SELECT 
            T.AncestorId AS EstablishmentNode_AncestorId, 
            T.OffspringId AS EstablishmentNode_OffspringId, 
            T.Separation AS EstablishmentNode_Separation, 
            True AS _from0
        FROM UCosmicContext.EstablishmentNodes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.EstablishmentLocation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView25()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2243);
            viewString.Append("\r\n    SELECT VALUE -- Constructing EstablishmentLocation\r\n        [CodeFirstData");
            viewString.Append("baseSchema.EstablishmentLocation](T1.EstablishmentLocation_RevisionId, T1.Establ");
            viewString.Append("ishmentLocation_CenterLatitude, T1.EstablishmentLocation_CenterLongitude, T1.Est");
            viewString.Append("ablishmentLocation_BoundingBoxNorthLatitude, T1.EstablishmentLocation_BoundingBo");
            viewString.Append("xEastLongitude, T1.EstablishmentLocation_BoundingBoxSouthLatitude, T1.Establishm");
            viewString.Append("entLocation_BoundingBoxWestLongitude, T1.EstablishmentLocation_GoogleMapZoomLeve");
            viewString.Append("l, T1.EstablishmentLocation_EntityId, T1.EstablishmentLocation_CreatedOnUtc, T1.");
            viewString.Append("EstablishmentLocation_CreatedByPrincipal, T1.EstablishmentLocation_UpdatedOnUtc,");
            viewString.Append(" T1.EstablishmentLocation_UpdatedByPrincipal, T1.EstablishmentLocation_Version, ");
            viewString.Append("T1.EstablishmentLocation_IsCurrent, T1.EstablishmentLocation_IsArchived, T1.Esta");
            viewString.Append("blishmentLocation_IsDeleted)\r\n    FROM (\r\n        SELECT \r\n            T.Revisio");
            viewString.Append("nId AS EstablishmentLocation_RevisionId, \r\n            T.Center.Latitude AS Esta");
            viewString.Append("blishmentLocation_CenterLatitude, \r\n            T.Center.Longitude AS Establishm");
            viewString.Append("entLocation_CenterLongitude, \r\n            T.BoundingBox.Northeast.Latitude AS E");
            viewString.Append("stablishmentLocation_BoundingBoxNorthLatitude, \r\n            T.BoundingBox.North");
            viewString.Append("east.Longitude AS EstablishmentLocation_BoundingBoxEastLongitude, \r\n            ");
            viewString.Append("T.BoundingBox.Southwest.Latitude AS EstablishmentLocation_BoundingBoxSouthLatitu");
            viewString.Append("de, \r\n            T.BoundingBox.Southwest.Longitude AS EstablishmentLocation_Bou");
            viewString.Append("ndingBoxWestLongitude, \r\n            T.GoogleMapZoomLevel AS EstablishmentLocati");
            viewString.Append("on_GoogleMapZoomLevel, \r\n            T.EntityId AS EstablishmentLocation_EntityI");
            viewString.Append("d, \r\n            T.CreatedOnUtc AS EstablishmentLocation_CreatedOnUtc, \r\n       ");
            viewString.Append("     T.CreatedByPrincipal AS EstablishmentLocation_CreatedByPrincipal, \r\n       ");
            viewString.Append("     T.UpdatedOnUtc AS EstablishmentLocation_UpdatedOnUtc, \r\n            T.Updat");
            viewString.Append("edByPrincipal AS EstablishmentLocation_UpdatedByPrincipal, \r\n            T.Versi");
            viewString.Append("on AS EstablishmentLocation_Version, \r\n            T.IsCurrent AS EstablishmentL");
            viewString.Append("ocation_IsCurrent, \r\n            T.IsArchived AS EstablishmentLocation_IsArchive");
            viewString.Append("d, \r\n            T.IsDeleted AS EstablishmentLocation_IsDeleted, \r\n            T");
            viewString.Append("rue AS _from0\r\n        FROM UCosmicContext.EstablishmentLocations AS T\r\n    ) AS");
            viewString.Append(" T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.EstablishmentLocation", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.EstablishmentAddress
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView26()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3066);
            viewString.Append("\r\n    SELECT VALUE -- Constructing EstablishmentAddress\r\n        [CodeFirstDatab");
            viewString.Append("aseSchema.EstablishmentAddress](T4.EstablishmentAddress_RevisionId, T4.Establish");
            viewString.Append("mentAddress_Text, T4.EstablishmentAddress_EntityId, T4.EstablishmentAddress_Crea");
            viewString.Append("tedOnUtc, T4.EstablishmentAddress_CreatedByPrincipal, T4.EstablishmentAddress_Up");
            viewString.Append("datedOnUtc, T4.EstablishmentAddress_UpdatedByPrincipal, T4.EstablishmentAddress_");
            viewString.Append("Version, T4.EstablishmentAddress_IsCurrent, T4.EstablishmentAddress_IsArchived, ");
            viewString.Append("T4.EstablishmentAddress_IsDeleted, T4.EstablishmentAddress_TranslationToLanguage");
            viewString.Append("Id, T4.EstablishmentAddress_EstablishmentLocationId)\r\n    FROM (\r\n        SELECT");
            viewString.Append(" T1.EstablishmentAddress_RevisionId, T3.EstablishmentAddress_Text, T3.Establishm");
            viewString.Append("entAddress_EntityId, T3.EstablishmentAddress_CreatedOnUtc, T3.EstablishmentAddre");
            viewString.Append("ss_CreatedByPrincipal, T3.EstablishmentAddress_UpdatedOnUtc, T3.EstablishmentAdd");
            viewString.Append("ress_UpdatedByPrincipal, T3.EstablishmentAddress_Version, T3.EstablishmentAddres");
            viewString.Append("s_IsCurrent, T3.EstablishmentAddress_IsArchived, T3.EstablishmentAddress_IsDelet");
            viewString.Append("ed, T2.EstablishmentAddress_TranslationToLanguageId, T1.EstablishmentAddress_Est");
            viewString.Append("ablishmentLocationId, T3._from0, T2._from1, T1._from2\r\n        FROM  (\r\n        ");
            viewString.Append("    SELECT \r\n                Key(T.EstablishmentLocation_Addresses_Target).Revis");
            viewString.Append("ionId AS EstablishmentAddress_RevisionId, \r\n                Key(T.EstablishmentL");
            viewString.Append("ocation_Addresses_Source).RevisionId AS EstablishmentAddress_EstablishmentLocati");
            viewString.Append("onId, \r\n                True AS _from2\r\n            FROM UCosmicContext.Establis");
            viewString.Append("hmentLocation_Addresses AS T) AS T1\r\n            INNER JOIN (\r\n            SELEC");
            viewString.Append("T \r\n                Key(T.EstablishmentAddress_TranslationToLanguage_Source).Rev");
            viewString.Append("isionId AS EstablishmentAddress_RevisionId, \r\n                Key(T.Establishmen");
            viewString.Append("tAddress_TranslationToLanguage_Target).RevisionId AS EstablishmentAddress_Transl");
            viewString.Append("ationToLanguageId, \r\n                True AS _from1\r\n            FROM UCosmicCon");
            viewString.Append("text.EstablishmentAddress_TranslationToLanguage AS T) AS T2\r\n            ON T1.E");
            viewString.Append("stablishmentAddress_RevisionId = T2.EstablishmentAddress_RevisionId\r\n           ");
            viewString.Append(" INNER JOIN (\r\n            SELECT \r\n                T.RevisionId AS Establishmen");
            viewString.Append("tAddress_RevisionId, \r\n                T.Text AS EstablishmentAddress_Text, \r\n  ");
            viewString.Append("              T.EntityId AS EstablishmentAddress_EntityId, \r\n                T.C");
            viewString.Append("reatedOnUtc AS EstablishmentAddress_CreatedOnUtc, \r\n                T.CreatedByP");
            viewString.Append("rincipal AS EstablishmentAddress_CreatedByPrincipal, \r\n                T.Updated");
            viewString.Append("OnUtc AS EstablishmentAddress_UpdatedOnUtc, \r\n                T.UpdatedByPrincip");
            viewString.Append("al AS EstablishmentAddress_UpdatedByPrincipal, \r\n                T.Version AS Es");
            viewString.Append("tablishmentAddress_Version, \r\n                T.IsCurrent AS EstablishmentAddres");
            viewString.Append("s_IsCurrent, \r\n                T.IsArchived AS EstablishmentAddress_IsArchived, ");
            viewString.Append("\r\n                T.IsDeleted AS EstablishmentAddress_IsDeleted, \r\n             ");
            viewString.Append("   True AS _from0\r\n            FROM UCosmicContext.EstablishmentAddresses AS T) ");
            viewString.Append("AS T3\r\n            ON T1.EstablishmentAddress_RevisionId = T3.EstablishmentAddre");
            viewString.Append("ss_RevisionId\r\n    ) AS T4");
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.EstablishmentAddress", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.EstablishmentSamlSignOn
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView27()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.EstablishmentSamlSignOn", @"
    SELECT VALUE -- Constructing EstablishmentSamlSignOn
        [CodeFirstDatabaseSchema.EstablishmentSamlSignOn](T1.EstablishmentSamlSignOn_Id, T1.EstablishmentSamlSignOn_EntityId, T1.EstablishmentSamlSignOn_MetadataUrl, T1.EstablishmentSamlSignOn_MetadataXml, T1.EstablishmentSamlSignOn_SsoLocation, T1.EstablishmentSamlSignOn_SsoBinding, T1.EstablishmentSamlSignOn_CreatedOnUtc, T1.EstablishmentSamlSignOn_UpdatedOnUtc)
    FROM (
        SELECT 
            T.Id AS EstablishmentSamlSignOn_Id, 
            T.EntityId AS EstablishmentSamlSignOn_EntityId, 
            T.MetadataUrl AS EstablishmentSamlSignOn_MetadataUrl, 
            T.MetadataXml AS EstablishmentSamlSignOn_MetadataXml, 
            T.SsoLocation AS EstablishmentSamlSignOn_SsoLocation, 
            T.SsoBinding AS EstablishmentSamlSignOn_SsoBinding, 
            T.CreatedOnUtc AS EstablishmentSamlSignOn_CreatedOnUtc, 
            T.UpdatedOnUtc AS EstablishmentSamlSignOn_UpdatedOnUtc, 
            True AS _from0
        FROM UCosmicContext.EstablishmentSamlSignOns AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.EstablishmentType
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView28()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.EstablishmentType", @"
    SELECT VALUE -- Constructing EstablishmentType
        [CodeFirstDatabaseSchema.EstablishmentType](T1.EstablishmentType_RevisionId, T1.EstablishmentType_CategoryId, T1.EstablishmentType_EnglishName, T1.EstablishmentType_EnglishPluralName, T1.EstablishmentType_EntityId, T1.EstablishmentType_CreatedOnUtc, T1.EstablishmentType_CreatedByPrincipal, T1.EstablishmentType_UpdatedOnUtc, T1.EstablishmentType_UpdatedByPrincipal, T1.EstablishmentType_Version, T1.EstablishmentType_IsCurrent, T1.EstablishmentType_IsArchived, T1.EstablishmentType_IsDeleted)
    FROM (
        SELECT 
            T.RevisionId AS EstablishmentType_RevisionId, 
            T.CategoryId AS EstablishmentType_CategoryId, 
            T.EnglishName AS EstablishmentType_EnglishName, 
            T.EnglishPluralName AS EstablishmentType_EnglishPluralName, 
            T.EntityId AS EstablishmentType_EntityId, 
            T.CreatedOnUtc AS EstablishmentType_CreatedOnUtc, 
            T.CreatedByPrincipal AS EstablishmentType_CreatedByPrincipal, 
            T.UpdatedOnUtc AS EstablishmentType_UpdatedOnUtc, 
            T.UpdatedByPrincipal AS EstablishmentType_UpdatedByPrincipal, 
            T.Version AS EstablishmentType_Version, 
            T.IsCurrent AS EstablishmentType_IsCurrent, 
            T.IsArchived AS EstablishmentType_IsArchived, 
            T.IsDeleted AS EstablishmentType_IsDeleted, 
            True AS _from0
        FROM UCosmicContext.EstablishmentTypes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.EstablishmentCategory
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView29()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.EstablishmentCategory", "\r\n    SELECT VALUE -- Constructing EstablishmentCategory\r\n        [CodeFirstDatab" +
                    "aseSchema.EstablishmentCategory](T1.EstablishmentCategory_RevisionId, T1.Establi" +
                    "shmentCategory_EnglishName, T1.EstablishmentCategory_EnglishPluralName, T1.Estab" +
                    "lishmentCategory_Code, T1.EstablishmentCategory_EntityId, T1.EstablishmentCatego" +
                    "ry_CreatedOnUtc, T1.EstablishmentCategory_CreatedByPrincipal, T1.EstablishmentCa" +
                    "tegory_UpdatedOnUtc, T1.EstablishmentCategory_UpdatedByPrincipal, T1.Establishme" +
                    "ntCategory_Version, T1.EstablishmentCategory_IsCurrent, T1.EstablishmentCategory" +
                    "_IsArchived, T1.EstablishmentCategory_IsDeleted)\r\n    FROM (\r\n        SELECT \r\n " +
                    "           T.RevisionId AS EstablishmentCategory_RevisionId, \r\n            T.Eng" +
                    "lishName AS EstablishmentCategory_EnglishName, \r\n            T.EnglishPluralName" +
                    " AS EstablishmentCategory_EnglishPluralName, \r\n            T.Code AS Establishme" +
                    "ntCategory_Code, \r\n            T.EntityId AS EstablishmentCategory_EntityId, \r\n " +
                    "           T.CreatedOnUtc AS EstablishmentCategory_CreatedOnUtc, \r\n            T" +
                    ".CreatedByPrincipal AS EstablishmentCategory_CreatedByPrincipal, \r\n            T" +
                    ".UpdatedOnUtc AS EstablishmentCategory_UpdatedOnUtc, \r\n            T.UpdatedByPr" +
                    "incipal AS EstablishmentCategory_UpdatedByPrincipal, \r\n            T.Version AS " +
                    "EstablishmentCategory_Version, \r\n            T.IsCurrent AS EstablishmentCategor" +
                    "y_IsCurrent, \r\n            T.IsArchived AS EstablishmentCategory_IsArchived, \r\n " +
                    "           T.IsDeleted AS EstablishmentCategory_IsDeleted, \r\n            True AS" +
                    " _from0\r\n        FROM UCosmicContext.EstablishmentCategories AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.EstablishmentEmailDomain
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView30()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.EstablishmentEmailDomain", "\r\n    SELECT VALUE -- Constructing EstablishmentEmailDomain\r\n        [CodeFirstDa" +
                    "tabaseSchema.EstablishmentEmailDomain](T1.EstablishmentEmailDomain_RevisionId, T" +
                    "1.EstablishmentEmailDomain_Value, T1.EstablishmentEmailDomain_EstablishmentId, T" +
                    "1.EstablishmentEmailDomain_EntityId, T1.EstablishmentEmailDomain_CreatedOnUtc, T" +
                    "1.EstablishmentEmailDomain_CreatedByPrincipal, T1.EstablishmentEmailDomain_Updat" +
                    "edOnUtc, T1.EstablishmentEmailDomain_UpdatedByPrincipal, T1.EstablishmentEmailDo" +
                    "main_Version, T1.EstablishmentEmailDomain_IsCurrent, T1.EstablishmentEmailDomain" +
                    "_IsArchived, T1.EstablishmentEmailDomain_IsDeleted)\r\n    FROM (\r\n        SELECT " +
                    "\r\n            T.RevisionId AS EstablishmentEmailDomain_RevisionId, \r\n           " +
                    " T.[Value] AS EstablishmentEmailDomain_Value, \r\n            T.EstablishmentId AS" +
                    " EstablishmentEmailDomain_EstablishmentId, \r\n            T.EntityId AS Establish" +
                    "mentEmailDomain_EntityId, \r\n            T.CreatedOnUtc AS EstablishmentEmailDoma" +
                    "in_CreatedOnUtc, \r\n            T.CreatedByPrincipal AS EstablishmentEmailDomain_" +
                    "CreatedByPrincipal, \r\n            T.UpdatedOnUtc AS EstablishmentEmailDomain_Upd" +
                    "atedOnUtc, \r\n            T.UpdatedByPrincipal AS EstablishmentEmailDomain_Update" +
                    "dByPrincipal, \r\n            T.Version AS EstablishmentEmailDomain_Version, \r\n   " +
                    "         T.IsCurrent AS EstablishmentEmailDomain_IsCurrent, \r\n            T.IsAr" +
                    "chived AS EstablishmentEmailDomain_IsArchived, \r\n            T.IsDeleted AS Esta" +
                    "blishmentEmailDomain_IsDeleted, \r\n            True AS _from0\r\n        FROM UCosm" +
                    "icContext.EstablishmentEmailDomains AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.Affiliation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView31()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2142);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Affiliation\r\n        [CodeFirstDatabaseSchema");
            viewString.Append(".Affiliation](T1.Affiliation_RevisionId, T1.Affiliation_PersonId, T1.Affiliation");
            viewString.Append("_EstablishmentId, T1.Affiliation_JobTitles, T1.Affiliation_IsDefault, T1.Affilia");
            viewString.Append("tion_IsAcknowledged, T1.Affiliation_IsClaimingStudent, T1.Affiliation_IsClaiming");
            viewString.Append("Employee, T1.Affiliation_IsClaimingInternationalOffice, T1.Affiliation_IsClaimin");
            viewString.Append("gAdministrator, T1.Affiliation_IsClaimingFaculty, T1.Affiliation_IsClaimingStaff");
            viewString.Append(", T1.Affiliation_EntityId, T1.Affiliation_CreatedOnUtc, T1.Affiliation_CreatedBy");
            viewString.Append("Principal, T1.Affiliation_UpdatedOnUtc, T1.Affiliation_UpdatedByPrincipal, T1.Af");
            viewString.Append("filiation_Version, T1.Affiliation_IsCurrent, T1.Affiliation_IsArchived, T1.Affil");
            viewString.Append("iation_IsDeleted)\r\n    FROM (\r\n        SELECT \r\n            T.RevisionId AS Affi");
            viewString.Append("liation_RevisionId, \r\n            T.PersonId AS Affiliation_PersonId, \r\n        ");
            viewString.Append("    T.EstablishmentId AS Affiliation_EstablishmentId, \r\n            T.JobTitles ");
            viewString.Append("AS Affiliation_JobTitles, \r\n            T.IsDefault AS Affiliation_IsDefault, \r\n");
            viewString.Append("            T.IsAcknowledged AS Affiliation_IsAcknowledged, \r\n            T.IsCl");
            viewString.Append("aimingStudent AS Affiliation_IsClaimingStudent, \r\n            T.IsClaimingEmploy");
            viewString.Append("ee AS Affiliation_IsClaimingEmployee, \r\n            T.IsClaimingInternationalOff");
            viewString.Append("ice AS Affiliation_IsClaimingInternationalOffice, \r\n            T.IsClaimingAdmi");
            viewString.Append("nistrator AS Affiliation_IsClaimingAdministrator, \r\n            T.IsClaimingFacu");
            viewString.Append("lty AS Affiliation_IsClaimingFaculty, \r\n            T.IsClaimingStaff AS Affilia");
            viewString.Append("tion_IsClaimingStaff, \r\n            T.EntityId AS Affiliation_EntityId, \r\n      ");
            viewString.Append("      T.CreatedOnUtc AS Affiliation_CreatedOnUtc, \r\n            T.CreatedByPrinc");
            viewString.Append("ipal AS Affiliation_CreatedByPrincipal, \r\n            T.UpdatedOnUtc AS Affiliat");
            viewString.Append("ion_UpdatedOnUtc, \r\n            T.UpdatedByPrincipal AS Affiliation_UpdatedByPri");
            viewString.Append("ncipal, \r\n            T.Version AS Affiliation_Version, \r\n            T.IsCurren");
            viewString.Append("t AS Affiliation_IsCurrent, \r\n            T.IsArchived AS Affiliation_IsArchived");
            viewString.Append(", \r\n            T.IsDeleted AS Affiliation_IsDeleted, \r\n            True AS _fro");
            viewString.Append("m0\r\n        FROM UCosmicContext.Affiliations AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.Affiliation", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.Person
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView32()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.Person", @"
    SELECT VALUE -- Constructing Person
        [CodeFirstDatabaseSchema.Person](T1.Person_RevisionId, T1.Person_IsDisplayNameDerived, T1.Person_DisplayName, T1.Person_Salutation, T1.Person_FirstName, T1.Person_MiddleName, T1.Person_LastName, T1.Person_Suffix, T1.Person_EntityId, T1.Person_CreatedOnUtc, T1.Person_CreatedByPrincipal, T1.Person_UpdatedOnUtc, T1.Person_UpdatedByPrincipal, T1.Person_Version, T1.Person_IsCurrent, T1.Person_IsArchived, T1.Person_IsDeleted)
    FROM (
        SELECT 
            T.RevisionId AS Person_RevisionId, 
            T.IsDisplayNameDerived AS Person_IsDisplayNameDerived, 
            T.DisplayName AS Person_DisplayName, 
            T.Salutation AS Person_Salutation, 
            T.FirstName AS Person_FirstName, 
            T.MiddleName AS Person_MiddleName, 
            T.LastName AS Person_LastName, 
            T.Suffix AS Person_Suffix, 
            T.EntityId AS Person_EntityId, 
            T.CreatedOnUtc AS Person_CreatedOnUtc, 
            T.CreatedByPrincipal AS Person_CreatedByPrincipal, 
            T.UpdatedOnUtc AS Person_UpdatedOnUtc, 
            T.UpdatedByPrincipal AS Person_UpdatedByPrincipal, 
            T.Version AS Person_Version, 
            T.IsCurrent AS Person_IsCurrent, 
            T.IsArchived AS Person_IsArchived, 
            T.IsDeleted AS Person_IsDeleted, 
            True AS _from0
        FROM UCosmicContext.People AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.EmailAddress
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView33()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.EmailAddress", @"
    SELECT VALUE -- Constructing EmailAddress
        [CodeFirstDatabaseSchema.EmailAddress](T1.EmailAddress_RevisionId, T1.EmailAddress_PersonId, T1.EmailAddress_Value, T1.EmailAddress_IsDefault, T1.EmailAddress_IsConfirmed, T1.EmailAddress_EntityId, T1.EmailAddress_CreatedOnUtc, T1.EmailAddress_CreatedByPrincipal, T1.EmailAddress_UpdatedOnUtc, T1.EmailAddress_UpdatedByPrincipal, T1.EmailAddress_Version, T1.EmailAddress_IsCurrent, T1.EmailAddress_IsArchived, T1.EmailAddress_IsDeleted)
    FROM (
        SELECT 
            T.RevisionId AS EmailAddress_RevisionId, 
            T.PersonId AS EmailAddress_PersonId, 
            T.[Value] AS EmailAddress_Value, 
            T.IsDefault AS EmailAddress_IsDefault, 
            T.IsConfirmed AS EmailAddress_IsConfirmed, 
            T.EntityId AS EmailAddress_EntityId, 
            T.CreatedOnUtc AS EmailAddress_CreatedOnUtc, 
            T.CreatedByPrincipal AS EmailAddress_CreatedByPrincipal, 
            T.UpdatedOnUtc AS EmailAddress_UpdatedOnUtc, 
            T.UpdatedByPrincipal AS EmailAddress_UpdatedByPrincipal, 
            T.Version AS EmailAddress_Version, 
            T.IsCurrent AS EmailAddress_IsCurrent, 
            T.IsArchived AS EmailAddress_IsArchived, 
            T.IsDeleted AS EmailAddress_IsDeleted, 
            True AS _from0
        FROM UCosmicContext.EmailAddresses AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.EmailMessage
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView34()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.EmailMessage", "\r\n    SELECT VALUE -- Constructing EmailMessage\r\n        [CodeFirstDatabaseSchema" +
                    ".EmailMessage](T1.EmailMessage_Id, T1.EmailMessage_EntityId, T1.EmailMessage_ToE" +
                    "mailAddressId, T1.EmailMessage_FromEmailTemplateId, T1.EmailMessage_Subject, T1." +
                    "EmailMessage_FromAddress, T1.EmailMessage_FromDisplayName, T1.EmailMessage_Reply" +
                    "ToAddress, T1.EmailMessage_ReplyToDisplayName, T1.EmailMessage_Body, T1.EmailMes" +
                    "sage_ComposedByPrincipal, T1.EmailMessage_ComposedOnUtc, T1.EmailMessage_SentOnU" +
                    "tc, T1.EmailMessage_IsArchived, T1.EmailMessage_IsDeleted)\r\n    FROM (\r\n        " +
                    "SELECT \r\n            T.Id AS EmailMessage_Id, \r\n            T.EntityId AS EmailM" +
                    "essage_EntityId, \r\n            T.ToEmailAddressId AS EmailMessage_ToEmailAddress" +
                    "Id, \r\n            T.FromEmailTemplateId AS EmailMessage_FromEmailTemplateId, \r\n " +
                    "           T.Subject AS EmailMessage_Subject, \r\n            T.FromAddress AS Ema" +
                    "ilMessage_FromAddress, \r\n            T.FromDisplayName AS EmailMessage_FromDispl" +
                    "ayName, \r\n            T.ReplyToAddress AS EmailMessage_ReplyToAddress, \r\n       " +
                    "     T.ReplyToDisplayName AS EmailMessage_ReplyToDisplayName, \r\n            T.Bo" +
                    "dy AS EmailMessage_Body, \r\n            T.ComposedByPrincipal AS EmailMessage_Com" +
                    "posedByPrincipal, \r\n            T.ComposedOnUtc AS EmailMessage_ComposedOnUtc, \r" +
                    "\n            T.SentOnUtc AS EmailMessage_SentOnUtc, \r\n            T.IsArchived A" +
                    "S EmailMessage_IsArchived, \r\n            T.IsDeleted AS EmailMessage_IsDeleted, " +
                    "\r\n            True AS _from0\r\n        FROM UCosmicContext.EmailMessages AS T\r\n  " +
                    "  ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.EmailTemplate
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView35()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.EmailTemplate", "\r\n    SELECT VALUE -- Constructing EmailTemplate\r\n        [CodeFirstDatabaseSchem" +
                    "a.EmailTemplate](T1.EmailTemplate_RevisionId, T1.EmailTemplate_EstablishmentId, " +
                    "T1.EmailTemplate_Name, T1.EmailTemplate_Instructions, T1.EmailTemplate_SubjectFo" +
                    "rmat, T1.EmailTemplate_FromAddress, T1.EmailTemplate_FromDisplayName, T1.EmailTe" +
                    "mplate_ReplyToAddress, T1.EmailTemplate_ReplyToDisplayName, T1.EmailTemplate_Bod" +
                    "yFormat, T1.EmailTemplate_EntityId, T1.EmailTemplate_CreatedOnUtc, T1.EmailTempl" +
                    "ate_CreatedByPrincipal, T1.EmailTemplate_UpdatedOnUtc, T1.EmailTemplate_UpdatedB" +
                    "yPrincipal, T1.EmailTemplate_Version, T1.EmailTemplate_IsCurrent, T1.EmailTempla" +
                    "te_IsArchived, T1.EmailTemplate_IsDeleted)\r\n    FROM (\r\n        SELECT \r\n       " +
                    "     T.RevisionId AS EmailTemplate_RevisionId, \r\n            T.EstablishmentId A" +
                    "S EmailTemplate_EstablishmentId, \r\n            T.Name AS EmailTemplate_Name, \r\n " +
                    "           T.Instructions AS EmailTemplate_Instructions, \r\n            T.Subject" +
                    "Format AS EmailTemplate_SubjectFormat, \r\n            T.FromAddress AS EmailTempl" +
                    "ate_FromAddress, \r\n            T.FromDisplayName AS EmailTemplate_FromDisplayNam" +
                    "e, \r\n            T.ReplyToAddress AS EmailTemplate_ReplyToAddress, \r\n           " +
                    " T.ReplyToDisplayName AS EmailTemplate_ReplyToDisplayName, \r\n            T.BodyF" +
                    "ormat AS EmailTemplate_BodyFormat, \r\n            T.EntityId AS EmailTemplate_Ent" +
                    "ityId, \r\n            T.CreatedOnUtc AS EmailTemplate_CreatedOnUtc, \r\n           " +
                    " T.CreatedByPrincipal AS EmailTemplate_CreatedByPrincipal, \r\n            T.Updat" +
                    "edOnUtc AS EmailTemplate_UpdatedOnUtc, \r\n            T.UpdatedByPrincipal AS Ema" +
                    "ilTemplate_UpdatedByPrincipal, \r\n            T.Version AS EmailTemplate_Version," +
                    " \r\n            T.IsCurrent AS EmailTemplate_IsCurrent, \r\n            T.IsArchive" +
                    "d AS EmailTemplate_IsArchived, \r\n            T.IsDeleted AS EmailTemplate_IsDele" +
                    "ted, \r\n            True AS _from0\r\n        FROM UCosmicContext.EmailTemplates AS" +
                    " T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.EmailConfirmation
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView36()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.EmailConfirmation", @"
    SELECT VALUE -- Constructing EmailConfirmation
        [CodeFirstDatabaseSchema.EmailConfirmation](T1.EmailConfirmation_Id, T1.EmailConfirmation_EmailAddressId, T1.EmailConfirmation_Token, T1.EmailConfirmation_SecretCode, T1.EmailConfirmation_Intent, T1.EmailConfirmation_IssuedOnUtc, T1.EmailConfirmation_ConfirmedOnUtc, T1.EmailConfirmation_ExpiresOnUtc)
    FROM (
        SELECT 
            T.Id AS EmailConfirmation_Id, 
            T.EmailAddressId AS EmailConfirmation_EmailAddressId, 
            T.Token AS EmailConfirmation_Token, 
            T.SecretCode AS EmailConfirmation_SecretCode, 
            T.Intent AS EmailConfirmation_Intent, 
            T.IssuedOnUtc AS EmailConfirmation_IssuedOnUtc, 
            T.ConfirmedOnUtc AS EmailConfirmation_ConfirmedOnUtc, 
            T.ExpiresOnUtc AS EmailConfirmation_ExpiresOnUtc, 
            True AS _from0
        FROM UCosmicContext.EmailConfirmations AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.InstitutionalAgreement
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView37()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3712);
            viewString.Append("\r\n    SELECT VALUE -- Constructing InstitutionalAgreement\r\n        [CodeFirstDat");
            viewString.Append("abaseSchema.InstitutionalAgreement](T3.InstitutionalAgreement_RevisionId, T3.Ins");
            viewString.Append("titutionalAgreement_IsTitleDerived, T3.InstitutionalAgreement_Title, T3.Institut");
            viewString.Append("ionalAgreement_Type, T3.InstitutionalAgreement_StartsOn, T3.InstitutionalAgreeme");
            viewString.Append("nt_ExpiresOn, T3.InstitutionalAgreement_IsExpirationEstimated, T3.InstitutionalA");
            viewString.Append("greement_Description, T3.InstitutionalAgreement_IsAutoRenew, T3.InstitutionalAgr");
            viewString.Append("eement_Status, T3.InstitutionalAgreement_EntityId, T3.InstitutionalAgreement_Cre");
            viewString.Append("atedOnUtc, T3.InstitutionalAgreement_CreatedByPrincipal, T3.InstitutionalAgreeme");
            viewString.Append("nt_UpdatedOnUtc, T3.InstitutionalAgreement_UpdatedByPrincipal, T3.InstitutionalA");
            viewString.Append("greement_Version, T3.InstitutionalAgreement_IsCurrent, T3.InstitutionalAgreement");
            viewString.Append("_IsArchived, T3.InstitutionalAgreement_IsDeleted, T3.InstitutionalAgreement_Umbr");
            viewString.Append("ellaId)\r\n    FROM (\r\n        SELECT T1.InstitutionalAgreement_RevisionId, T1.Ins");
            viewString.Append("titutionalAgreement_IsTitleDerived, T1.InstitutionalAgreement_Title, T1.Institut");
            viewString.Append("ionalAgreement_Type, T1.InstitutionalAgreement_StartsOn, T1.InstitutionalAgreeme");
            viewString.Append("nt_ExpiresOn, T1.InstitutionalAgreement_IsExpirationEstimated, T1.InstitutionalA");
            viewString.Append("greement_Description, T1.InstitutionalAgreement_IsAutoRenew, T1.InstitutionalAgr");
            viewString.Append("eement_Status, T1.InstitutionalAgreement_EntityId, T1.InstitutionalAgreement_Cre");
            viewString.Append("atedOnUtc, T1.InstitutionalAgreement_CreatedByPrincipal, T1.InstitutionalAgreeme");
            viewString.Append("nt_UpdatedOnUtc, T1.InstitutionalAgreement_UpdatedByPrincipal, T1.InstitutionalA");
            viewString.Append("greement_Version, T1.InstitutionalAgreement_IsCurrent, T1.InstitutionalAgreement");
            viewString.Append("_IsArchived, T1.InstitutionalAgreement_IsDeleted, T2.InstitutionalAgreement_Umbr");
            viewString.Append("ellaId, T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1\r\n        FROM");
            viewString.Append("  (\r\n            SELECT \r\n                T.RevisionId AS InstitutionalAgreement");
            viewString.Append("_RevisionId, \r\n                T.IsTitleDerived AS InstitutionalAgreement_IsTitl");
            viewString.Append("eDerived, \r\n                T.Title AS InstitutionalAgreement_Title, \r\n         ");
            viewString.Append("       T.Type AS InstitutionalAgreement_Type, \r\n                T.StartsOn AS In");
            viewString.Append("stitutionalAgreement_StartsOn, \r\n                T.ExpiresOn AS InstitutionalAgr");
            viewString.Append("eement_ExpiresOn, \r\n                T.IsExpirationEstimated AS InstitutionalAgre");
            viewString.Append("ement_IsExpirationEstimated, \r\n                T.Description AS InstitutionalAgr");
            viewString.Append("eement_Description, \r\n                T.IsAutoRenew AS InstitutionalAgreement_Is");
            viewString.Append("AutoRenew, \r\n                T.Status AS InstitutionalAgreement_Status, \r\n      ");
            viewString.Append("          T.EntityId AS InstitutionalAgreement_EntityId, \r\n                T.Cre");
            viewString.Append("atedOnUtc AS InstitutionalAgreement_CreatedOnUtc, \r\n                T.CreatedByP");
            viewString.Append("rincipal AS InstitutionalAgreement_CreatedByPrincipal, \r\n                T.Updat");
            viewString.Append("edOnUtc AS InstitutionalAgreement_UpdatedOnUtc, \r\n                T.UpdatedByPri");
            viewString.Append("ncipal AS InstitutionalAgreement_UpdatedByPrincipal, \r\n                T.Version");
            viewString.Append(" AS InstitutionalAgreement_Version, \r\n                T.IsCurrent AS Institution");
            viewString.Append("alAgreement_IsCurrent, \r\n                T.IsArchived AS InstitutionalAgreement_");
            viewString.Append("IsArchived, \r\n                T.IsDeleted AS InstitutionalAgreement_IsDeleted, \r");
            viewString.Append("\n                True AS _from0\r\n            FROM UCosmicContext.InstitutionalAg");
            viewString.Append("reements AS T) AS T1\r\n            LEFT OUTER JOIN (\r\n            SELECT \r\n      ");
            viewString.Append("          Key(T.InstitutionalAgreement_Umbrella_Source).RevisionId AS Institutio");
            viewString.Append("nalAgreement_RevisionId, \r\n                Key(T.InstitutionalAgreement_Umbrella");
            viewString.Append("_Target).RevisionId AS InstitutionalAgreement_UmbrellaId, \r\n                True");
            viewString.Append(" AS _from1\r\n            FROM UCosmicContext.InstitutionalAgreement_Umbrella AS T");
            viewString.Append(") AS T2\r\n            ON T1.InstitutionalAgreement_RevisionId = T2.InstitutionalA");
            viewString.Append("greement_RevisionId\r\n    ) AS T3");
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.InstitutionalAgreement", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.InstitutionalAgreementNode
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView38()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.InstitutionalAgreementNode", @"
    SELECT VALUE -- Constructing InstitutionalAgreementNode
        [CodeFirstDatabaseSchema.InstitutionalAgreementNode](T1.InstitutionalAgreementNode_AncestorId, T1.InstitutionalAgreementNode_OffspringId, T1.InstitutionalAgreementNode_Separation)
    FROM (
        SELECT 
            T.AncestorId AS InstitutionalAgreementNode_AncestorId, 
            T.OffspringId AS InstitutionalAgreementNode_OffspringId, 
            T.Separation AS InstitutionalAgreementNode_Separation, 
            True AS _from0
        FROM UCosmicContext.InstitutionalAgreementNodes AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.InstitutionalAgreementParticipant
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView39()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.InstitutionalAgreementParticipant", "\r\n    SELECT VALUE -- Constructing InstitutionalAgreementParticipant\r\n        [Co" +
                    "deFirstDatabaseSchema.InstitutionalAgreementParticipant](T4.InstitutionalAgreeme" +
                    "ntParticipant_Id, T4.InstitutionalAgreementParticipant_IsOwner, T4.Institutional" +
                    "AgreementParticipant_EstablishmentId, T4.InstitutionalAgreementParticipant_Agree" +
                    "mentId)\r\n    FROM (\r\n        SELECT T1.InstitutionalAgreementParticipant_Id, T3." +
                    "InstitutionalAgreementParticipant_IsOwner, T2.InstitutionalAgreementParticipant_" +
                    "EstablishmentId, T1.InstitutionalAgreementParticipant_AgreementId, T3._from0, T2" +
                    "._from1, T1._from2\r\n        FROM  (\r\n            SELECT \r\n                Key(T." +
                    "InstitutionalAgreement_Participants_Target).Id AS InstitutionalAgreementParticip" +
                    "ant_Id, \r\n                Key(T.InstitutionalAgreement_Participants_Source).Revi" +
                    "sionId AS InstitutionalAgreementParticipant_AgreementId, \r\n                True " +
                    "AS _from2\r\n            FROM UCosmicContext.InstitutionalAgreement_Participants A" +
                    "S T) AS T1\r\n            INNER JOIN (\r\n            SELECT \r\n                Key(T" +
                    ".InstitutionalAgreementParticipant_Establishment_Source).Id AS InstitutionalAgre" +
                    "ementParticipant_Id, \r\n                Key(T.InstitutionalAgreementParticipant_E" +
                    "stablishment_Target).RevisionId AS InstitutionalAgreementParticipant_Establishme" +
                    "ntId, \r\n                True AS _from1\r\n            FROM UCosmicContext.Institut" +
                    "ionalAgreementParticipant_Establishment AS T) AS T2\r\n            ON T1.Instituti" +
                    "onalAgreementParticipant_Id = T2.InstitutionalAgreementParticipant_Id\r\n         " +
                    "   INNER JOIN (\r\n            SELECT \r\n                T.Id AS InstitutionalAgree" +
                    "mentParticipant_Id, \r\n                T.IsOwner AS InstitutionalAgreementPartici" +
                    "pant_IsOwner, \r\n                True AS _from0\r\n            FROM UCosmicContext." +
                    "InstitutionalAgreementParticipants AS T) AS T3\r\n            ON T1.InstitutionalA" +
                    "greementParticipant_Id = T3.InstitutionalAgreementParticipant_Id\r\n    ) AS T4");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.InstitutionalAgreementContact
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView40()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3398);
            viewString.Append("\r\n    SELECT VALUE -- Constructing InstitutionalAgreementContact\r\n        [CodeF");
            viewString.Append("irstDatabaseSchema.InstitutionalAgreementContact](T4.InstitutionalAgreementConta");
            viewString.Append("ct_RevisionId, T4.InstitutionalAgreementContact_Type, T4.InstitutionalAgreementC");
            viewString.Append("ontact_EntityId, T4.InstitutionalAgreementContact_CreatedOnUtc, T4.Institutional");
            viewString.Append("AgreementContact_CreatedByPrincipal, T4.InstitutionalAgreementContact_UpdatedOnU");
            viewString.Append("tc, T4.InstitutionalAgreementContact_UpdatedByPrincipal, T4.InstitutionalAgreeme");
            viewString.Append("ntContact_Version, T4.InstitutionalAgreementContact_IsCurrent, T4.InstitutionalA");
            viewString.Append("greementContact_IsArchived, T4.InstitutionalAgreementContact_IsDeleted, T4.Insti");
            viewString.Append("tutionalAgreementContact_PersonId, T4.InstitutionalAgreementContact_AgreementId)");
            viewString.Append("\r\n    FROM (\r\n        SELECT T1.InstitutionalAgreementContact_RevisionId, T3.Ins");
            viewString.Append("titutionalAgreementContact_Type, T3.InstitutionalAgreementContact_EntityId, T3.I");
            viewString.Append("nstitutionalAgreementContact_CreatedOnUtc, T3.InstitutionalAgreementContact_Crea");
            viewString.Append("tedByPrincipal, T3.InstitutionalAgreementContact_UpdatedOnUtc, T3.InstitutionalA");
            viewString.Append("greementContact_UpdatedByPrincipal, T3.InstitutionalAgreementContact_Version, T3");
            viewString.Append(".InstitutionalAgreementContact_IsCurrent, T3.InstitutionalAgreementContact_IsArc");
            viewString.Append("hived, T3.InstitutionalAgreementContact_IsDeleted, T2.InstitutionalAgreementCont");
            viewString.Append("act_PersonId, T1.InstitutionalAgreementContact_AgreementId, T3._from0, T2._from1");
            viewString.Append(", T1._from2\r\n        FROM  (\r\n            SELECT \r\n                Key(T.Institu");
            viewString.Append("tionalAgreement_Contacts_Target).RevisionId AS InstitutionalAgreementContact_Rev");
            viewString.Append("isionId, \r\n                Key(T.InstitutionalAgreement_Contacts_Source).Revisio");
            viewString.Append("nId AS InstitutionalAgreementContact_AgreementId, \r\n                True AS _fro");
            viewString.Append("m2\r\n            FROM UCosmicContext.InstitutionalAgreement_Contacts AS T) AS T1\r");
            viewString.Append("\n            INNER JOIN (\r\n            SELECT \r\n                Key(T.Institutio");
            viewString.Append("nalAgreementContact_Person_Source).RevisionId AS InstitutionalAgreementContact_R");
            viewString.Append("evisionId, \r\n                Key(T.InstitutionalAgreementContact_Person_Target).");
            viewString.Append("RevisionId AS InstitutionalAgreementContact_PersonId, \r\n                True AS ");
            viewString.Append("_from1\r\n            FROM UCosmicContext.InstitutionalAgreementContact_Person AS ");
            viewString.Append("T) AS T2\r\n            ON T1.InstitutionalAgreementContact_RevisionId = T2.Instit");
            viewString.Append("utionalAgreementContact_RevisionId\r\n            INNER JOIN (\r\n            SELECT");
            viewString.Append(" \r\n                T.RevisionId AS InstitutionalAgreementContact_RevisionId, \r\n ");
            viewString.Append("               T.Type AS InstitutionalAgreementContact_Type, \r\n                T");
            viewString.Append(".EntityId AS InstitutionalAgreementContact_EntityId, \r\n                T.Created");
            viewString.Append("OnUtc AS InstitutionalAgreementContact_CreatedOnUtc, \r\n                T.Created");
            viewString.Append("ByPrincipal AS InstitutionalAgreementContact_CreatedByPrincipal, \r\n             ");
            viewString.Append("   T.UpdatedOnUtc AS InstitutionalAgreementContact_UpdatedOnUtc, \r\n             ");
            viewString.Append("   T.UpdatedByPrincipal AS InstitutionalAgreementContact_UpdatedByPrincipal, \r\n ");
            viewString.Append("               T.Version AS InstitutionalAgreementContact_Version, \r\n           ");
            viewString.Append("     T.IsCurrent AS InstitutionalAgreementContact_IsCurrent, \r\n                T");
            viewString.Append(".IsArchived AS InstitutionalAgreementContact_IsArchived, \r\n                T.IsD");
            viewString.Append("eleted AS InstitutionalAgreementContact_IsDeleted, \r\n                True AS _fr");
            viewString.Append("om0\r\n            FROM UCosmicContext.InstitutionalAgreementContacts AS T) AS T3\r");
            viewString.Append("\n            ON T1.InstitutionalAgreementContact_RevisionId = T3.InstitutionalAg");
            viewString.Append("reementContact_RevisionId\r\n    ) AS T4");
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.InstitutionalAgreementContact", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.InstitutionalAgreementFile
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView41()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3086);
            viewString.Append("\r\n    SELECT VALUE -- Constructing InstitutionalAgreementFile\r\n        [CodeFirs");
            viewString.Append("tDatabaseSchema.InstitutionalAgreementFile](T3.InstitutionalAgreementFile_Revisi");
            viewString.Append("onId, T3.InstitutionalAgreementFile_Content, T3.InstitutionalAgreementFile_Lengt");
            viewString.Append("h, T3.InstitutionalAgreementFile_MimeType, T3.InstitutionalAgreementFile_Name, T");
            viewString.Append("3.InstitutionalAgreementFile_EntityId, T3.InstitutionalAgreementFile_CreatedOnUt");
            viewString.Append("c, T3.InstitutionalAgreementFile_CreatedByPrincipal, T3.InstitutionalAgreementFi");
            viewString.Append("le_UpdatedOnUtc, T3.InstitutionalAgreementFile_UpdatedByPrincipal, T3.Institutio");
            viewString.Append("nalAgreementFile_Version, T3.InstitutionalAgreementFile_IsCurrent, T3.Institutio");
            viewString.Append("nalAgreementFile_IsArchived, T3.InstitutionalAgreementFile_IsDeleted, T3.Institu");
            viewString.Append("tionalAgreementFile_AgreementId)\r\n    FROM (\r\n        SELECT T1.InstitutionalAgr");
            viewString.Append("eementFile_RevisionId, T2.InstitutionalAgreementFile_Content, T2.InstitutionalAg");
            viewString.Append("reementFile_Length, T2.InstitutionalAgreementFile_MimeType, T2.InstitutionalAgre");
            viewString.Append("ementFile_Name, T2.InstitutionalAgreementFile_EntityId, T2.InstitutionalAgreemen");
            viewString.Append("tFile_CreatedOnUtc, T2.InstitutionalAgreementFile_CreatedByPrincipal, T2.Institu");
            viewString.Append("tionalAgreementFile_UpdatedOnUtc, T2.InstitutionalAgreementFile_UpdatedByPrincip");
            viewString.Append("al, T2.InstitutionalAgreementFile_Version, T2.InstitutionalAgreementFile_IsCurre");
            viewString.Append("nt, T2.InstitutionalAgreementFile_IsArchived, T2.InstitutionalAgreementFile_IsDe");
            viewString.Append("leted, T1.InstitutionalAgreementFile_AgreementId, T2._from0, T1._from1\r\n        ");
            viewString.Append("FROM  (\r\n            SELECT \r\n                Key(T.InstitutionalAgreement_Files");
            viewString.Append("_Target).RevisionId AS InstitutionalAgreementFile_RevisionId, \r\n                ");
            viewString.Append("Key(T.InstitutionalAgreement_Files_Source).RevisionId AS InstitutionalAgreementF");
            viewString.Append("ile_AgreementId, \r\n                True AS _from1\r\n            FROM UCosmicConte");
            viewString.Append("xt.InstitutionalAgreement_Files AS T) AS T1\r\n            INNER JOIN (\r\n         ");
            viewString.Append("   SELECT \r\n                T.RevisionId AS InstitutionalAgreementFile_RevisionI");
            viewString.Append("d, \r\n                T.Content AS InstitutionalAgreementFile_Content, \r\n        ");
            viewString.Append("        T.Length AS InstitutionalAgreementFile_Length, \r\n                T.MimeT");
            viewString.Append("ype AS InstitutionalAgreementFile_MimeType, \r\n                T.Name AS Institut");
            viewString.Append("ionalAgreementFile_Name, \r\n                T.EntityId AS InstitutionalAgreementF");
            viewString.Append("ile_EntityId, \r\n                T.CreatedOnUtc AS InstitutionalAgreementFile_Cre");
            viewString.Append("atedOnUtc, \r\n                T.CreatedByPrincipal AS InstitutionalAgreementFile_");
            viewString.Append("CreatedByPrincipal, \r\n                T.UpdatedOnUtc AS InstitutionalAgreementFi");
            viewString.Append("le_UpdatedOnUtc, \r\n                T.UpdatedByPrincipal AS InstitutionalAgreemen");
            viewString.Append("tFile_UpdatedByPrincipal, \r\n                T.Version AS InstitutionalAgreementF");
            viewString.Append("ile_Version, \r\n                T.IsCurrent AS InstitutionalAgreementFile_IsCurre");
            viewString.Append("nt, \r\n                T.IsArchived AS InstitutionalAgreementFile_IsArchived, \r\n ");
            viewString.Append("               T.IsDeleted AS InstitutionalAgreementFile_IsDeleted, \r\n          ");
            viewString.Append("      True AS _from0\r\n            FROM UCosmicContext.InstitutionalAgreementFile");
            viewString.Append("s AS T) AS T2\r\n            ON T1.InstitutionalAgreementFile_RevisionId = T2.Inst");
            viewString.Append("itutionalAgreementFile_RevisionId\r\n    ) AS T3");
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.InstitutionalAgreementFile", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.InstitutionalAgreementConfiguration
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView42()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2259);
            viewString.Append("\r\n    SELECT VALUE -- Constructing InstitutionalAgreementConfiguration\r\n        ");
            viewString.Append("[CodeFirstDatabaseSchema.InstitutionalAgreementConfiguration](T1.InstitutionalAg");
            viewString.Append("reementConfiguration_RevisionId, T1.InstitutionalAgreementConfiguration_ForEstab");
            viewString.Append("lishmentId, T1.InstitutionalAgreementConfiguration_IsCustomTypeAllowed, T1.Insti");
            viewString.Append("tutionalAgreementConfiguration_IsCustomStatusAllowed, T1.InstitutionalAgreementC");
            viewString.Append("onfiguration_IsCustomContactTypeAllowed, T1.InstitutionalAgreementConfiguration_");
            viewString.Append("EntityId, T1.InstitutionalAgreementConfiguration_CreatedOnUtc, T1.InstitutionalA");
            viewString.Append("greementConfiguration_CreatedByPrincipal, T1.InstitutionalAgreementConfiguration");
            viewString.Append("_UpdatedOnUtc, T1.InstitutionalAgreementConfiguration_UpdatedByPrincipal, T1.Ins");
            viewString.Append("titutionalAgreementConfiguration_Version, T1.InstitutionalAgreementConfiguration");
            viewString.Append("_IsCurrent, T1.InstitutionalAgreementConfiguration_IsArchived, T1.InstitutionalA");
            viewString.Append("greementConfiguration_IsDeleted)\r\n    FROM (\r\n        SELECT \r\n            T.Rev");
            viewString.Append("isionId AS InstitutionalAgreementConfiguration_RevisionId, \r\n            T.ForEs");
            viewString.Append("tablishmentId AS InstitutionalAgreementConfiguration_ForEstablishmentId, \r\n     ");
            viewString.Append("       T.IsCustomTypeAllowed AS InstitutionalAgreementConfiguration_IsCustomType");
            viewString.Append("Allowed, \r\n            T.IsCustomStatusAllowed AS InstitutionalAgreementConfigur");
            viewString.Append("ation_IsCustomStatusAllowed, \r\n            T.IsCustomContactTypeAllowed AS Insti");
            viewString.Append("tutionalAgreementConfiguration_IsCustomContactTypeAllowed, \r\n            T.Entit");
            viewString.Append("yId AS InstitutionalAgreementConfiguration_EntityId, \r\n            T.CreatedOnUt");
            viewString.Append("c AS InstitutionalAgreementConfiguration_CreatedOnUtc, \r\n            T.CreatedBy");
            viewString.Append("Principal AS InstitutionalAgreementConfiguration_CreatedByPrincipal, \r\n         ");
            viewString.Append("   T.UpdatedOnUtc AS InstitutionalAgreementConfiguration_UpdatedOnUtc, \r\n       ");
            viewString.Append("     T.UpdatedByPrincipal AS InstitutionalAgreementConfiguration_UpdatedByPrinci");
            viewString.Append("pal, \r\n            T.Version AS InstitutionalAgreementConfiguration_Version, \r\n ");
            viewString.Append("           T.IsCurrent AS InstitutionalAgreementConfiguration_IsCurrent, \r\n     ");
            viewString.Append("       T.IsArchived AS InstitutionalAgreementConfiguration_IsArchived, \r\n       ");
            viewString.Append("     T.IsDeleted AS InstitutionalAgreementConfiguration_IsDeleted, \r\n           ");
            viewString.Append(" True AS _from0\r\n        FROM UCosmicContext.InstitutionalAgreementConfiguration");
            viewString.Append("s AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.InstitutionalAgreementConfiguration", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.InstitutionalAgreementTypeValue
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView43()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.InstitutionalAgreementTypeValue", @"
    SELECT VALUE -- Constructing InstitutionalAgreementTypeValue
        [CodeFirstDatabaseSchema.InstitutionalAgreementTypeValue](T1.InstitutionalAgreementTypeValue_Id, T1.InstitutionalAgreementTypeValue_ConfigurationId, T1.InstitutionalAgreementTypeValue_Text)
    FROM (
        SELECT 
            T.Id AS InstitutionalAgreementTypeValue_Id, 
            T.ConfigurationId AS InstitutionalAgreementTypeValue_ConfigurationId, 
            T.Text AS InstitutionalAgreementTypeValue_Text, 
            True AS _from0
        FROM UCosmicContext.InstitutionalAgreementTypeValues AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.InstitutionalAgreementStatusValue
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView44()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.InstitutionalAgreementStatusValue", @"
    SELECT VALUE -- Constructing InstitutionalAgreementStatusValue
        [CodeFirstDatabaseSchema.InstitutionalAgreementStatusValue](T1.InstitutionalAgreementStatusValue_Id, T1.InstitutionalAgreementStatusValue_ConfigurationId, T1.InstitutionalAgreementStatusValue_Text)
    FROM (
        SELECT 
            T.Id AS InstitutionalAgreementStatusValue_Id, 
            T.ConfigurationId AS InstitutionalAgreementStatusValue_ConfigurationId, 
            T.Text AS InstitutionalAgreementStatusValue_Text, 
            True AS _from0
        FROM UCosmicContext.InstitutionalAgreementStatusValues AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.InstitutionalAgreementContactTypeValue
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView45()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.InstitutionalAgreementContactTypeValue", @"
    SELECT VALUE -- Constructing InstitutionalAgreementContactTypeValue
        [CodeFirstDatabaseSchema.InstitutionalAgreementContactTypeValue](T1.InstitutionalAgreementContactTypeValue_Id, T1.InstitutionalAgreementContactTypeValue_ConfigurationId, T1.InstitutionalAgreementContactTypeValue_Text)
    FROM (
        SELECT 
            T.Id AS InstitutionalAgreementContactTypeValue_Id, 
            T.ConfigurationId AS InstitutionalAgreementContactTypeValue_ConfigurationId, 
            T.Text AS InstitutionalAgreementContactTypeValue_Text, 
            True AS _from0
        FROM UCosmicContext.InstitutionalAgreementContactTypeValues AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.EstablishmentLocationPlace
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView46()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.EstablishmentLocationPlace", @"
    SELECT VALUE -- Constructing EstablishmentLocationPlace
        [CodeFirstDatabaseSchema.EstablishmentLocationPlace](T1.EstablishmentLocationPlace_EstablishmentLocationId, T1.EstablishmentLocationPlace_PlaceId)
    FROM (
        SELECT 
            Key(T.EstablishmentLocation_Places_Source).RevisionId AS EstablishmentLocationPlace_EstablishmentLocationId, 
            Key(T.EstablishmentLocation_Places_Target).RevisionId AS EstablishmentLocationPlace_PlaceId, 
            True AS _from0
        FROM UCosmicContext.EstablishmentLocation_Places AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.Languages
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView47()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.Languages", @"
    SELECT VALUE -- Constructing Languages
        [UCosmic.Orm.Language](T1.Language_RevisionId, T1.Language_TwoLetterIsoCode, T1.Language_ThreeLetterIsoCode, T1.Language_ThreeLetterIsoBibliographicCode, T1.Language_EntityId, T1.Language_CreatedOnUtc, T1.Language_CreatedByPrincipal, T1.Language_UpdatedOnUtc, T1.Language_UpdatedByPrincipal, T1.Language_Version, T1.Language_IsCurrent, T1.Language_IsArchived, T1.Language_IsDeleted)
    FROM (
        SELECT 
            T.RevisionId AS Language_RevisionId, 
            T.TwoLetterIsoCode AS Language_TwoLetterIsoCode, 
            T.ThreeLetterIsoCode AS Language_ThreeLetterIsoCode, 
            T.ThreeLetterIsoBibliographicCode AS Language_ThreeLetterIsoBibliographicCode, 
            T.EntityId AS Language_EntityId, 
            T.CreatedOnUtc AS Language_CreatedOnUtc, 
            T.CreatedByPrincipal AS Language_CreatedByPrincipal, 
            T.UpdatedOnUtc AS Language_UpdatedOnUtc, 
            T.UpdatedByPrincipal AS Language_UpdatedByPrincipal, 
            T.Version AS Language_Version, 
            T.IsCurrent AS Language_IsCurrent, 
            T.IsArchived AS Language_IsArchived, 
            T.IsDeleted AS Language_IsDeleted, 
            True AS _from0
        FROM CodeFirstDatabase.Language AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.LanguageNames
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView48()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2092);
            viewString.Append("\r\n    SELECT VALUE -- Constructing LanguageNames\r\n        [UCosmic.Orm.LanguageN");
            viewString.Append("ame](T1.LanguageName_RevisionId, T1.LanguageName_Text, T1.LanguageName_AsciiEqui");
            viewString.Append("valent, T1.LanguageName_EntityId, T1.LanguageName_CreatedOnUtc, T1.LanguageName_");
            viewString.Append("CreatedByPrincipal, T1.LanguageName_UpdatedOnUtc, T1.LanguageName_UpdatedByPrinc");
            viewString.Append("ipal, T1.LanguageName_Version, T1.LanguageName_IsCurrent, T1.LanguageName_IsArch");
            viewString.Append("ived, T1.LanguageName_IsDeleted) WITH \r\n        RELATIONSHIP(CREATEREF(UCosmicCo");
            viewString.Append("ntext.Languages, ROW(T1.[LanguageName_NameForLanguage.LanguageName_NameForLangua");
            viewString.Append("ge_Target.RevisionId]),[UCosmic.Orm.Language]),[UCosmic.Orm.LanguageName_NameFor");
            viewString.Append("Language],LanguageName_NameForLanguage_Source,LanguageName_NameForLanguage_Targe");
            viewString.Append("t) \r\n        RELATIONSHIP(CREATEREF(UCosmicContext.Languages, ROW(T1.[LanguageNa");
            viewString.Append("me_TranslationToLanguage.LanguageName_TranslationToLanguage_Target.RevisionId]),");
            viewString.Append("[UCosmic.Orm.Language]),[UCosmic.Orm.LanguageName_TranslationToLanguage],Languag");
            viewString.Append("eName_TranslationToLanguage_Source,LanguageName_TranslationToLanguage_Target) \r\n");
            viewString.Append("    FROM (\r\n        SELECT \r\n            T.RevisionId AS LanguageName_RevisionId");
            viewString.Append(", \r\n            T.Text AS LanguageName_Text, \r\n            T.AsciiEquivalent AS ");
            viewString.Append("LanguageName_AsciiEquivalent, \r\n            T.EntityId AS LanguageName_EntityId,");
            viewString.Append(" \r\n            T.CreatedOnUtc AS LanguageName_CreatedOnUtc, \r\n            T.Crea");
            viewString.Append("tedByPrincipal AS LanguageName_CreatedByPrincipal, \r\n            T.UpdatedOnUtc ");
            viewString.Append("AS LanguageName_UpdatedOnUtc, \r\n            T.UpdatedByPrincipal AS LanguageName");
            viewString.Append("_UpdatedByPrincipal, \r\n            T.Version AS LanguageName_Version, \r\n        ");
            viewString.Append("    T.IsCurrent AS LanguageName_IsCurrent, \r\n            T.IsArchived AS Languag");
            viewString.Append("eName_IsArchived, \r\n            T.IsDeleted AS LanguageName_IsDeleted, \r\n       ");
            viewString.Append("     True AS _from0, \r\n            T.NameForLanguageId AS [LanguageName_NameForL");
            viewString.Append("anguage.LanguageName_NameForLanguage_Target.RevisionId], \r\n            T.Transla");
            viewString.Append("tionToLanguageId AS [LanguageName_TranslationToLanguage.LanguageName_Translation");
            viewString.Append("ToLanguage_Target.RevisionId]\r\n        FROM CodeFirstDatabase.LanguageName AS T\r");
            viewString.Append("\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.LanguageNames", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for UCosmicContext.Places
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView49()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(7056);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Places\r\n        [UCosmic.Orm.Place](T5.Place_");
            viewString.Append("RevisionId, T5.Place_OfficialName, T5.Place_IsEarth, T5.Place_IsContinent, T5.Pl");
            viewString.Append("ace_IsCountry, T5.Place_IsAdmin1, T5.Place_IsAdmin2, T5.Place_IsAdmin3, T5.Place");
            viewString.Append("_Center, T5.Place_BoundingBox, T5.Place_EntityId, T5.Place_CreatedOnUtc, T5.Plac");
            viewString.Append("e_CreatedByPrincipal, T5.Place_UpdatedOnUtc, T5.Place_UpdatedByPrincipal, T5.Pla");
            viewString.Append("ce_Version, T5.Place_IsCurrent, T5.Place_IsArchived, T5.Place_IsDeleted) WITH \r\n");
            viewString.Append("        RELATIONSHIP(CREATEREF(UCosmicContext.Places, ROW(T5.[Place_Parent.Place");
            viewString.Append("_Parent_Target.RevisionId]),[UCosmic.Orm.Place]),[UCosmic.Orm.Place_Parent],Plac");
            viewString.Append("e_Parent_Source,Place_Parent_Target) \r\n    FROM (\r\n        SELECT -- Constructin");
            viewString.Append("g Center\r\n            T4.Place_RevisionId, \r\n            T4.Place_OfficialName, ");
            viewString.Append("\r\n            T4.Place_IsEarth, \r\n            T4.Place_IsContinent, \r\n          ");
            viewString.Append("  T4.Place_IsCountry, \r\n            T4.Place_IsAdmin1, \r\n            T4.Place_Is");
            viewString.Append("Admin2, \r\n            T4.Place_IsAdmin3, \r\n            [UCosmic.Orm.Coordinates]");
            viewString.Append("(T4.Place_Center_Latitude, T4.Place_Center_Longitude) AS Place_Center, \r\n       ");
            viewString.Append("     T4.Place_BoundingBox, \r\n            T4.Place_EntityId, \r\n            T4.Pla");
            viewString.Append("ce_CreatedOnUtc, \r\n            T4.Place_CreatedByPrincipal, \r\n            T4.Pla");
            viewString.Append("ce_UpdatedOnUtc, \r\n            T4.Place_UpdatedByPrincipal, \r\n            T4.Pla");
            viewString.Append("ce_Version, \r\n            T4.Place_IsCurrent, \r\n            T4.Place_IsArchived,");
            viewString.Append(" \r\n            T4.Place_IsDeleted, \r\n            T4.[Place_Parent.Place_Parent_T");
            viewString.Append("arget.RevisionId]\r\n        FROM (\r\n            SELECT -- Constructing BoundingBo");
            viewString.Append("x\r\n                T3.Place_RevisionId, \r\n                T3.Place_OfficialName,");
            viewString.Append(" \r\n                T3.Place_IsEarth, \r\n                T3.Place_IsContinent, \r\n ");
            viewString.Append("               T3.Place_IsCountry, \r\n                T3.Place_IsAdmin1, \r\n      ");
            viewString.Append("          T3.Place_IsAdmin2, \r\n                T3.Place_IsAdmin3, \r\n            ");
            viewString.Append("    T3.Place_Center_Latitude, \r\n                T3.Place_Center_Longitude, \r\n   ");
            viewString.Append("             [UCosmic.Orm.BoundingBox](T3.Place_BoundingBox_Northeast, T3.Place_");
            viewString.Append("BoundingBox_Southwest) AS Place_BoundingBox, \r\n                T3.Place_EntityId");
            viewString.Append(", \r\n                T3.Place_CreatedOnUtc, \r\n                T3.Place_CreatedByP");
            viewString.Append("rincipal, \r\n                T3.Place_UpdatedOnUtc, \r\n                T3.Place_Up");
            viewString.Append("datedByPrincipal, \r\n                T3.Place_Version, \r\n                T3.Place");
            viewString.Append("_IsCurrent, \r\n                T3.Place_IsArchived, \r\n                T3.Place_Is");
            viewString.Append("Deleted, \r\n                T3.[Place_Parent.Place_Parent_Target.RevisionId]\r\n   ");
            viewString.Append("         FROM (\r\n                SELECT -- Constructing Northeast\r\n             ");
            viewString.Append("       T2.Place_RevisionId, \r\n                    T2.Place_OfficialName, \r\n     ");
            viewString.Append("               T2.Place_IsEarth, \r\n                    T2.Place_IsContinent, \r\n ");
            viewString.Append("                   T2.Place_IsCountry, \r\n                    T2.Place_IsAdmin1, ");
            viewString.Append("\r\n                    T2.Place_IsAdmin2, \r\n                    T2.Place_IsAdmin3");
            viewString.Append(", \r\n                    T2.Place_Center_Latitude, \r\n                    T2.Place");
            viewString.Append("_Center_Longitude, \r\n                    [UCosmic.Orm.Coordinates](T2.Place_Boun");
            viewString.Append("dingBox_Northeast_Latitude, T2.Place_BoundingBox_Northeast_Longitude) AS Place_B");
            viewString.Append("oundingBox_Northeast, \r\n                    T2.Place_BoundingBox_Southwest, \r\n  ");
            viewString.Append("                  T2.Place_EntityId, \r\n                    T2.Place_CreatedOnUtc");
            viewString.Append(", \r\n                    T2.Place_CreatedByPrincipal, \r\n                    T2.Pl");
            viewString.Append("ace_UpdatedOnUtc, \r\n                    T2.Place_UpdatedByPrincipal, \r\n         ");
            viewString.Append("           T2.Place_Version, \r\n                    T2.Place_IsCurrent, \r\n       ");
            viewString.Append("             T2.Place_IsArchived, \r\n                    T2.Place_IsDeleted, \r\n  ");
            viewString.Append("                  T2.[Place_Parent.Place_Parent_Target.RevisionId]\r\n            ");
            viewString.Append("    FROM (\r\n                    SELECT -- Constructing Southwest\r\n              ");
            viewString.Append("          T1.Place_RevisionId, \r\n                        T1.Place_OfficialName, ");
            viewString.Append("\r\n                        T1.Place_IsEarth, \r\n                        T1.Place_I");
            viewString.Append("sContinent, \r\n                        T1.Place_IsCountry, \r\n                    ");
            viewString.Append("    T1.Place_IsAdmin1, \r\n                        T1.Place_IsAdmin2, \r\n          ");
            viewString.Append("              T1.Place_IsAdmin3, \r\n                        T1.Place_Center_Latit");
            viewString.Append("ude, \r\n                        T1.Place_Center_Longitude, \r\n                    ");
            viewString.Append("    T1.Place_BoundingBox_Northeast_Latitude, \r\n                        T1.Place_");
            viewString.Append("BoundingBox_Northeast_Longitude, \r\n                        [UCosmic.Orm.Coordina");
            viewString.Append("tes](T1.Place_BoundingBox_Southwest_Latitude, T1.Place_BoundingBox_Southwest_Lon");
            viewString.Append("gitude) AS Place_BoundingBox_Southwest, \r\n                        T1.Place_Entit");
            viewString.Append("yId, \r\n                        T1.Place_CreatedOnUtc, \r\n                        ");
            viewString.Append("T1.Place_CreatedByPrincipal, \r\n                        T1.Place_UpdatedOnUtc, \r\n");
            viewString.Append("                        T1.Place_UpdatedByPrincipal, \r\n                        T");
            viewString.Append("1.Place_Version, \r\n                        T1.Place_IsCurrent, \r\n               ");
            viewString.Append("         T1.Place_IsArchived, \r\n                        T1.Place_IsDeleted, \r\n  ");
            viewString.Append("                      T1.[Place_Parent.Place_Parent_Target.RevisionId]\r\n        ");
            viewString.Append("            FROM (\r\n                        SELECT \r\n                           ");
            viewString.Append(" T.RevisionId AS Place_RevisionId, \r\n                            T.OfficialName ");
            viewString.Append("AS Place_OfficialName, \r\n                            T.IsEarth AS Place_IsEarth,");
            viewString.Append(" \r\n                            T.IsContinent AS Place_IsContinent, \r\n           ");
            viewString.Append("                 T.IsCountry AS Place_IsCountry, \r\n                            T");
            viewString.Append(".IsAdmin1 AS Place_IsAdmin1, \r\n                            T.IsAdmin2 AS Place_I");
            viewString.Append("sAdmin2, \r\n                            T.IsAdmin3 AS Place_IsAdmin3, \r\n         ");
            viewString.Append("                   T.Latitude AS Place_Center_Latitude, \r\n                      ");
            viewString.Append("      T.Longitude AS Place_Center_Longitude, \r\n                            T.Nor");
            viewString.Append("thLatitude AS Place_BoundingBox_Northeast_Latitude, \r\n                          ");
            viewString.Append("  T.EastLongitude AS Place_BoundingBox_Northeast_Longitude, \r\n                  ");
            viewString.Append("          T.SouthLatitude AS Place_BoundingBox_Southwest_Latitude, \r\n           ");
            viewString.Append("                 T.WestLongitude AS Place_BoundingBox_Southwest_Longitude, \r\n   ");
            viewString.Append("                         T.EntityId AS Place_EntityId, \r\n                       ");
            viewString.Append("     T.CreatedOnUtc AS Place_CreatedOnUtc, \r\n                            T.Creat");
            viewString.Append("edByPrincipal AS Place_CreatedByPrincipal, \r\n                            T.Updat");
            viewString.Append("edOnUtc AS Place_UpdatedOnUtc, \r\n                            T.UpdatedByPrincipa");
            viewString.Append("l AS Place_UpdatedByPrincipal, \r\n                            T.Version AS Place_");
            viewString.Append("Version, \r\n                            T.IsCurrent AS Place_IsCurrent, \r\n       ");
            viewString.Append("                     T.IsArchived AS Place_IsArchived, \r\n                       ");
            viewString.Append("     T.IsDeleted AS Place_IsDeleted, \r\n                            True AS _from");
            viewString.Append("0, \r\n                            T.ParentId AS [Place_Parent.Place_Parent_Target");
            viewString.Append(".RevisionId]\r\n                        FROM CodeFirstDatabase.Place AS T\r\n       ");
            viewString.Append("             ) AS T1\r\n                ) AS T2\r\n            ) AS T3\r\n        ) AS");
            viewString.Append(" T4\r\n    ) AS T5");
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.Places", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for UCosmicContext.PlaceNodes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView50()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.PlaceNodes", @"
    SELECT VALUE -- Constructing PlaceNodes
        [UCosmic.Orm.PlaceNode](T1.PlaceNode_AncestorId, T1.PlaceNode_OffspringId, T1.PlaceNode_Separation)
    FROM (
        SELECT 
            T.AncestorId AS PlaceNode_AncestorId, 
            T.OffspringId AS PlaceNode_OffspringId, 
            T.Separation AS PlaceNode_Separation, 
            True AS _from0
        FROM CodeFirstDatabase.PlaceNode AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.GeoNamesToponyms
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView51()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(3958);
            viewString.Append("\r\n    SELECT VALUE -- Constructing GeoNamesToponyms\r\n        [UCosmic.Orm.GeoNam");
            viewString.Append("esToponym](T2.GeoNamesToponym_GeoNameId, T2.GeoNamesToponym_FeatureCode, T2.GeoN");
            viewString.Append("amesToponym_TimeZoneId, T2.GeoNamesToponym_Center, T2.GeoNamesToponym_Name, T2.G");
            viewString.Append("eoNamesToponym_ToponymName, T2.GeoNamesToponym_ContinentCode, T2.GeoNamesToponym");
            viewString.Append("_CountryCode, T2.GeoNamesToponym_CountryName, T2.GeoNamesToponym_Admin1Code, T2.");
            viewString.Append("GeoNamesToponym_Admin1Name, T2.GeoNamesToponym_Admin2Code, T2.GeoNamesToponym_Ad");
            viewString.Append("min2Name, T2.GeoNamesToponym_Admin3Code, T2.GeoNamesToponym_Admin3Name, T2.GeoNa");
            viewString.Append("mesToponym_Admin4Code, T2.GeoNamesToponym_Admin4Name, T2.GeoNamesToponym_Populat");
            viewString.Append("ion, T2.GeoNamesToponym_Elevation) WITH \r\n        RELATIONSHIP(CREATEREF(UCosmic");
            viewString.Append("Context.Places, ROW(T2.[GeoNamesToponym_Place.GeoNamesToponym_Place_Target.Revis");
            viewString.Append("ionId]),[UCosmic.Orm.Place]),[UCosmic.Orm.GeoNamesToponym_Place],GeoNamesToponym");
            viewString.Append("_Place_Source,GeoNamesToponym_Place_Target) \r\n        RELATIONSHIP(CREATEREF(UCo");
            viewString.Append("smicContext.GeoNamesToponyms, ROW(T2.[GeoNamesToponym_Parent.GeoNamesToponym_Par");
            viewString.Append("ent_Target.GeoNameId]),[UCosmic.Orm.GeoNamesToponym]),[UCosmic.Orm.GeoNamesTopon");
            viewString.Append("ym_Parent],GeoNamesToponym_Parent_Source,GeoNamesToponym_Parent_Target) \r\n    FR");
            viewString.Append("OM (\r\n        SELECT -- Constructing Center\r\n            T1.GeoNamesToponym_GeoN");
            viewString.Append("ameId, \r\n            T1.GeoNamesToponym_FeatureCode, \r\n            T1.GeoNamesTo");
            viewString.Append("ponym_TimeZoneId, \r\n            [UCosmic.Orm.Coordinates](T1.GeoNamesToponym_Cen");
            viewString.Append("ter_Latitude, T1.GeoNamesToponym_Center_Longitude) AS GeoNamesToponym_Center, \r\n");
            viewString.Append("            T1.GeoNamesToponym_Name, \r\n            T1.GeoNamesToponym_ToponymNam");
            viewString.Append("e, \r\n            T1.GeoNamesToponym_ContinentCode, \r\n            T1.GeoNamesTopo");
            viewString.Append("nym_CountryCode, \r\n            T1.GeoNamesToponym_CountryName, \r\n            T1.");
            viewString.Append("GeoNamesToponym_Admin1Code, \r\n            T1.GeoNamesToponym_Admin1Name, \r\n     ");
            viewString.Append("       T1.GeoNamesToponym_Admin2Code, \r\n            T1.GeoNamesToponym_Admin2Nam");
            viewString.Append("e, \r\n            T1.GeoNamesToponym_Admin3Code, \r\n            T1.GeoNamesToponym");
            viewString.Append("_Admin3Name, \r\n            T1.GeoNamesToponym_Admin4Code, \r\n            T1.GeoNa");
            viewString.Append("mesToponym_Admin4Name, \r\n            T1.GeoNamesToponym_Population, \r\n          ");
            viewString.Append("  T1.GeoNamesToponym_Elevation, \r\n            T1.[GeoNamesToponym_Place.GeoNames");
            viewString.Append("Toponym_Place_Target.RevisionId], \r\n            T1.[GeoNamesToponym_Parent.GeoNa");
            viewString.Append("mesToponym_Parent_Target.GeoNameId]\r\n        FROM (\r\n            SELECT \r\n      ");
            viewString.Append("          T.GeoNameId AS GeoNamesToponym_GeoNameId, \r\n                T.FeatureC");
            viewString.Append("ode AS GeoNamesToponym_FeatureCode, \r\n                T.TimeZoneId AS GeoNamesTo");
            viewString.Append("ponym_TimeZoneId, \r\n                T.Latitude AS GeoNamesToponym_Center_Latitud");
            viewString.Append("e, \r\n                T.Longitude AS GeoNamesToponym_Center_Longitude, \r\n        ");
            viewString.Append("        T.Name AS GeoNamesToponym_Name, \r\n                T.ToponymName AS GeoNa");
            viewString.Append("mesToponym_ToponymName, \r\n                T.ContinentCode AS GeoNamesToponym_Con");
            viewString.Append("tinentCode, \r\n                T.CountryCode AS GeoNamesToponym_CountryCode, \r\n  ");
            viewString.Append("              T.CountryName AS GeoNamesToponym_CountryName, \r\n                T.");
            viewString.Append("Admin1Code AS GeoNamesToponym_Admin1Code, \r\n                T.Admin1Name AS GeoN");
            viewString.Append("amesToponym_Admin1Name, \r\n                T.Admin2Code AS GeoNamesToponym_Admin2");
            viewString.Append("Code, \r\n                T.Admin2Name AS GeoNamesToponym_Admin2Name, \r\n          ");
            viewString.Append("      T.Admin3Code AS GeoNamesToponym_Admin3Code, \r\n                T.Admin3Name");
            viewString.Append(" AS GeoNamesToponym_Admin3Name, \r\n                T.Admin4Code AS GeoNamesTopony");
            viewString.Append("m_Admin4Code, \r\n                T.Admin4Name AS GeoNamesToponym_Admin4Name, \r\n  ");
            viewString.Append("              T.Population AS GeoNamesToponym_Population, \r\n                T.El");
            viewString.Append("evation AS GeoNamesToponym_Elevation, \r\n                True AS _from0, \r\n      ");
            viewString.Append("          T.PlaceId AS [GeoNamesToponym_Place.GeoNamesToponym_Place_Target.Revis");
            viewString.Append("ionId], \r\n                T.ParentGeoNameId AS [GeoNamesToponym_Parent.GeoNamesT");
            viewString.Append("oponym_Parent_Target.GeoNameId]\r\n            FROM CodeFirstDatabase.GeoNamesTopo");
            viewString.Append("nym AS T\r\n        ) AS T1\r\n    ) AS T2");
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.GeoNamesToponyms", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for UCosmicContext.GeoNamesFeatures
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView52()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.GeoNamesFeatures", @"
    SELECT VALUE -- Constructing GeoNamesFeatures
        [UCosmic.Orm.GeoNamesFeature](T1.GeoNamesFeature_Code, T1.GeoNamesFeature_ClassCode, T1.GeoNamesFeature_Name)
    FROM (
        SELECT 
            T.Code AS GeoNamesFeature_Code, 
            T.ClassCode AS GeoNamesFeature_ClassCode, 
            T.Name AS GeoNamesFeature_Name, 
            True AS _from0
        FROM CodeFirstDatabase.GeoNamesFeature AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.GeoNamesFeatureClasses
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView53()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.GeoNamesFeatureClasses", @"
    SELECT VALUE -- Constructing GeoNamesFeatureClasses
        [UCosmic.Orm.GeoNamesFeatureClass](T1.GeoNamesFeatureClass_Code, T1.GeoNamesFeatureClass_Name)
    FROM (
        SELECT 
            T.Code AS GeoNamesFeatureClass_Code, 
            T.Name AS GeoNamesFeatureClass_Name, 
            True AS _from0
        FROM CodeFirstDatabase.GeoNamesFeatureClass AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.GeoNamesTimeZones
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView54()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.GeoNamesTimeZones", @"
    SELECT VALUE -- Constructing GeoNamesTimeZones
        [UCosmic.Orm.GeoNamesTimeZone](T1.GeoNamesTimeZone_Id, T1.GeoNamesTimeZone_DstOffset, T1.GeoNamesTimeZone_GmtOffset)
    FROM (
        SELECT 
            T.Id AS GeoNamesTimeZone_Id, 
            T.DstOffset AS GeoNamesTimeZone_DstOffset, 
            T.GmtOffset AS GeoNamesTimeZone_GmtOffset, 
            True AS _from0
        FROM CodeFirstDatabase.GeoNamesTimeZone AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.GeoNamesCountries
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView55()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(4906);
            viewString.Append("\r\n    SELECT VALUE -- Constructing GeoNamesCountries\r\n        [UCosmic.Orm.GeoNa");
            viewString.Append("mesCountry](T4.GeoNamesCountry_GeoNameId, T4.GeoNamesCountry_BoundingBox, T4.Geo");
            viewString.Append("NamesCountry_Code, T4.GeoNamesCountry_Name, T4.GeoNamesCountry_ContinentCode, T4");
            viewString.Append(".GeoNamesCountry_ContinentName, T4.GeoNamesCountry_IsoNumericCode, T4.GeoNamesCo");
            viewString.Append("untry_IsoAlpha3Code, T4.GeoNamesCountry_FipsCode, T4.GeoNamesCountry_CapitalCity");
            viewString.Append("Name, T4.GeoNamesCountry_AreaInSqKm, T4.GeoNamesCountry_CurrencyCode, T4.GeoName");
            viewString.Append("sCountry_Languages, T4.GeoNamesCountry_Population)\r\n    FROM (\r\n        SELECT -");
            viewString.Append("- Constructing BoundingBox\r\n            T3.GeoNamesCountry_GeoNameId, \r\n        ");
            viewString.Append("    [UCosmic.Orm.BoundingBox](T3.GeoNamesCountry_BoundingBox_Northeast, T3.GeoNa");
            viewString.Append("mesCountry_BoundingBox_Southwest) AS GeoNamesCountry_BoundingBox, \r\n            ");
            viewString.Append("T3.GeoNamesCountry_Code, \r\n            T3.GeoNamesCountry_Name, \r\n            T3");
            viewString.Append(".GeoNamesCountry_ContinentCode, \r\n            T3.GeoNamesCountry_ContinentName, ");
            viewString.Append("\r\n            T3.GeoNamesCountry_IsoNumericCode, \r\n            T3.GeoNamesCountr");
            viewString.Append("y_IsoAlpha3Code, \r\n            T3.GeoNamesCountry_FipsCode, \r\n            T3.Geo");
            viewString.Append("NamesCountry_CapitalCityName, \r\n            T3.GeoNamesCountry_AreaInSqKm, \r\n   ");
            viewString.Append("         T3.GeoNamesCountry_CurrencyCode, \r\n            T3.GeoNamesCountry_Langu");
            viewString.Append("ages, \r\n            T3.GeoNamesCountry_Population\r\n        FROM (\r\n            S");
            viewString.Append("ELECT -- Constructing Northeast\r\n                T2.GeoNamesCountry_GeoNameId, \r");
            viewString.Append("\n                [UCosmic.Orm.Coordinates](T2.GeoNamesCountry_BoundingBox_Northe");
            viewString.Append("ast_Latitude, T2.GeoNamesCountry_BoundingBox_Northeast_Longitude) AS GeoNamesCou");
            viewString.Append("ntry_BoundingBox_Northeast, \r\n                T2.GeoNamesCountry_BoundingBox_Sou");
            viewString.Append("thwest, \r\n                T2.GeoNamesCountry_Code, \r\n                T2.GeoNames");
            viewString.Append("Country_Name, \r\n                T2.GeoNamesCountry_ContinentCode, \r\n            ");
            viewString.Append("    T2.GeoNamesCountry_ContinentName, \r\n                T2.GeoNamesCountry_IsoNu");
            viewString.Append("mericCode, \r\n                T2.GeoNamesCountry_IsoAlpha3Code, \r\n               ");
            viewString.Append(" T2.GeoNamesCountry_FipsCode, \r\n                T2.GeoNamesCountry_CapitalCityNa");
            viewString.Append("me, \r\n                T2.GeoNamesCountry_AreaInSqKm, \r\n                T2.GeoNam");
            viewString.Append("esCountry_CurrencyCode, \r\n                T2.GeoNamesCountry_Languages, \r\n      ");
            viewString.Append("          T2.GeoNamesCountry_Population\r\n            FROM (\r\n                SEL");
            viewString.Append("ECT -- Constructing Southwest\r\n                    T1.GeoNamesCountry_GeoNameId,");
            viewString.Append(" \r\n                    T1.GeoNamesCountry_BoundingBox_Northeast_Latitude, \r\n    ");
            viewString.Append("                T1.GeoNamesCountry_BoundingBox_Northeast_Longitude, \r\n          ");
            viewString.Append("          [UCosmic.Orm.Coordinates](T1.GeoNamesCountry_BoundingBox_Southwest_Lat");
            viewString.Append("itude, T1.GeoNamesCountry_BoundingBox_Southwest_Longitude) AS GeoNamesCountry_Bo");
            viewString.Append("undingBox_Southwest, \r\n                    T1.GeoNamesCountry_Code, \r\n          ");
            viewString.Append("          T1.GeoNamesCountry_Name, \r\n                    T1.GeoNamesCountry_Cont");
            viewString.Append("inentCode, \r\n                    T1.GeoNamesCountry_ContinentName, \r\n           ");
            viewString.Append("         T1.GeoNamesCountry_IsoNumericCode, \r\n                    T1.GeoNamesCou");
            viewString.Append("ntry_IsoAlpha3Code, \r\n                    T1.GeoNamesCountry_FipsCode, \r\n       ");
            viewString.Append("             T1.GeoNamesCountry_CapitalCityName, \r\n                    T1.GeoNam");
            viewString.Append("esCountry_AreaInSqKm, \r\n                    T1.GeoNamesCountry_CurrencyCode, \r\n ");
            viewString.Append("                   T1.GeoNamesCountry_Languages, \r\n                    T1.GeoNam");
            viewString.Append("esCountry_Population\r\n                FROM (\r\n                    SELECT \r\n     ");
            viewString.Append("                   T.GeoNameId AS GeoNamesCountry_GeoNameId, \r\n                 ");
            viewString.Append("       T.NorthLatitude AS GeoNamesCountry_BoundingBox_Northeast_Latitude, \r\n    ");
            viewString.Append("                    T.EastLongitude AS GeoNamesCountry_BoundingBox_Northeast_Lon");
            viewString.Append("gitude, \r\n                        T.SouthLatitude AS GeoNamesCountry_BoundingBox");
            viewString.Append("_Southwest_Latitude, \r\n                        T.WestLongitude AS GeoNamesCountr");
            viewString.Append("y_BoundingBox_Southwest_Longitude, \r\n                        T.Code AS GeoNamesC");
            viewString.Append("ountry_Code, \r\n                        T.Name AS GeoNamesCountry_Name, \r\n       ");
            viewString.Append("                 T.ContinentCode AS GeoNamesCountry_ContinentCode, \r\n           ");
            viewString.Append("             T.ContinentName AS GeoNamesCountry_ContinentName, \r\n               ");
            viewString.Append("         T.IsoNumericCode AS GeoNamesCountry_IsoNumericCode, \r\n                 ");
            viewString.Append("       T.IsoAlpha3Code AS GeoNamesCountry_IsoAlpha3Code, \r\n                     ");
            viewString.Append("   T.FipsCode AS GeoNamesCountry_FipsCode, \r\n                        T.CapitalCi");
            viewString.Append("tyName AS GeoNamesCountry_CapitalCityName, \r\n                        T.AreaInSqK");
            viewString.Append("m AS GeoNamesCountry_AreaInSqKm, \r\n                        T.CurrencyCode AS Geo");
            viewString.Append("NamesCountry_CurrencyCode, \r\n                        T.Languages AS GeoNamesCoun");
            viewString.Append("try_Languages, \r\n                        T.Population AS GeoNamesCountry_Populat");
            viewString.Append("ion, \r\n                        True AS _from0\r\n                    FROM CodeFirs");
            viewString.Append("tDatabase.GeoNamesCountry AS T\r\n                ) AS T1\r\n            ) AS T2\r\n  ");
            viewString.Append("      ) AS T3\r\n    ) AS T4");
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.GeoNamesCountries", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for UCosmicContext.GeoNamesToponymNodes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView56()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.GeoNamesToponymNodes", @"
    SELECT VALUE -- Constructing GeoNamesToponymNodes
        [UCosmic.Orm.GeoNamesToponymNode](T1.GeoNamesToponymNode_AncestorId, T1.GeoNamesToponymNode_OffspringId, T1.GeoNamesToponymNode_Separation)
    FROM (
        SELECT 
            T.AncestorId AS GeoNamesToponymNode_AncestorId, 
            T.OffspringId AS GeoNamesToponymNode_OffspringId, 
            T.Separation AS GeoNamesToponymNode_Separation, 
            True AS _from0
        FROM CodeFirstDatabase.GeoNamesToponymNode AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.GeoNamesAlternateNames
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView57()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.GeoNamesAlternateNames", @"
    SELECT VALUE -- Constructing GeoNamesAlternateNames
        [UCosmic.Orm.GeoNamesAlternateName](T1.GeoNamesAlternateName_AlternateNameId, T1.GeoNamesAlternateName_GeoNameId, T1.GeoNamesAlternateName_Language, T1.GeoNamesAlternateName_Name)
    FROM (
        SELECT 
            T.AlternateNameId AS GeoNamesAlternateName_AlternateNameId, 
            T.GeoNameId AS GeoNamesAlternateName_GeoNameId, 
            T.Language AS GeoNamesAlternateName_Language, 
            T.Name AS GeoNamesAlternateName_Name, 
            True AS _from0
        FROM CodeFirstDatabase.GeoNamesAlternateName AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.GeoPlanetPlaces
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView58()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(23398);
            viewString.Append("\r\n    SELECT VALUE -- Constructing GeoPlanetPlaces\r\n        [UCosmic.Orm.GeoPlan");
            viewString.Append("etPlace](T11.GeoPlanetPlace_WoeId, T11.GeoPlanetPlace_EnglishName, T11.GeoPlanet");
            viewString.Append("Place_Uri, T11.GeoPlanetPlace_Center, T11.GeoPlanetPlace_BoundingBox, T11.GeoPla");
            viewString.Append("netPlace_AreaRank, T11.GeoPlanetPlace_PopulationRank, T11.GeoPlanetPlace_Postal,");
            viewString.Append(" T11.GeoPlanetPlace_Country, T11.GeoPlanetPlace_Admin1, T11.GeoPlanetPlace_Admin");
            viewString.Append("2, T11.GeoPlanetPlace_Admin3, T11.GeoPlanetPlace_Locality1, T11.GeoPlanetPlace_L");
            viewString.Append("ocality2) WITH \r\n        RELATIONSHIP(CREATEREF(UCosmicContext.GeoPlanetPlaces, ");
            viewString.Append("ROW(T11.[GeoPlanetPlace_Parent.GeoPlanetPlace_Parent_Target.WoeId]),[UCosmic.Orm");
            viewString.Append(".GeoPlanetPlace]),[UCosmic.Orm.GeoPlanetPlace_Parent],GeoPlanetPlace_Parent_Sour");
            viewString.Append("ce,GeoPlanetPlace_Parent_Target) \r\n        RELATIONSHIP(CREATEREF(UCosmicContext");
            viewString.Append(".GeoPlanetPlaceTypes, ROW(T11.[GeoPlanetPlace_Type.GeoPlanetPlace_Type_Target.Co");
            viewString.Append("de]),[UCosmic.Orm.GeoPlanetPlaceType]),[UCosmic.Orm.GeoPlanetPlace_Type],GeoPlan");
            viewString.Append("etPlace_Type_Source,GeoPlanetPlace_Type_Target) \r\n        RELATIONSHIP(CREATEREF");
            viewString.Append("(UCosmicContext.Places, ROW(T11.[GeoPlanetPlace_Place.GeoPlanetPlace_Place_Targe");
            viewString.Append("t.RevisionId]),[UCosmic.Orm.Place]),[UCosmic.Orm.GeoPlanetPlace_Place],GeoPlanet");
            viewString.Append("Place_Place_Source,GeoPlanetPlace_Place_Target) \r\n    FROM (\r\n        SELECT -- ");
            viewString.Append("Constructing Center\r\n            T10.GeoPlanetPlace_WoeId, \r\n            T10.Geo");
            viewString.Append("PlanetPlace_EnglishName, \r\n            T10.GeoPlanetPlace_Uri, \r\n            [UC");
            viewString.Append("osmic.Orm.Coordinates](T10.GeoPlanetPlace_Center_Latitude, T10.GeoPlanetPlace_Ce");
            viewString.Append("nter_Longitude) AS GeoPlanetPlace_Center, \r\n            T10.GeoPlanetPlace_Bound");
            viewString.Append("ingBox, \r\n            T10.GeoPlanetPlace_AreaRank, \r\n            T10.GeoPlanetPl");
            viewString.Append("ace_PopulationRank, \r\n            T10.GeoPlanetPlace_Postal, \r\n            T10.G");
            viewString.Append("eoPlanetPlace_Country, \r\n            T10.GeoPlanetPlace_Admin1, \r\n            T1");
            viewString.Append("0.GeoPlanetPlace_Admin2, \r\n            T10.GeoPlanetPlace_Admin3, \r\n            ");
            viewString.Append("T10.GeoPlanetPlace_Locality1, \r\n            T10.GeoPlanetPlace_Locality2, \r\n    ");
            viewString.Append("        T10.[GeoPlanetPlace_Parent.GeoPlanetPlace_Parent_Target.WoeId], \r\n      ");
            viewString.Append("      T10.[GeoPlanetPlace_Type.GeoPlanetPlace_Type_Target.Code], \r\n            T");
            viewString.Append("10.[GeoPlanetPlace_Place.GeoPlanetPlace_Place_Target.RevisionId]\r\n        FROM (");
            viewString.Append("\r\n            SELECT -- Constructing BoundingBox\r\n                T9.GeoPlanetPl");
            viewString.Append("ace_WoeId, \r\n                T9.GeoPlanetPlace_EnglishName, \r\n                T9");
            viewString.Append(".GeoPlanetPlace_Uri, \r\n                T9.GeoPlanetPlace_Center_Latitude, \r\n    ");
            viewString.Append("            T9.GeoPlanetPlace_Center_Longitude, \r\n                [UCosmic.Orm.B");
            viewString.Append("oundingBox](T9.GeoPlanetPlace_BoundingBox_Northeast, T9.GeoPlanetPlace_BoundingB");
            viewString.Append("ox_Southwest) AS GeoPlanetPlace_BoundingBox, \r\n                T9.GeoPlanetPlace");
            viewString.Append("_AreaRank, \r\n                T9.GeoPlanetPlace_PopulationRank, \r\n               ");
            viewString.Append(" T9.GeoPlanetPlace_Postal, \r\n                T9.GeoPlanetPlace_Country, \r\n      ");
            viewString.Append("          T9.GeoPlanetPlace_Admin1, \r\n                T9.GeoPlanetPlace_Admin2, ");
            viewString.Append("\r\n                T9.GeoPlanetPlace_Admin3, \r\n                T9.GeoPlanetPlace_");
            viewString.Append("Locality1, \r\n                T9.GeoPlanetPlace_Locality2, \r\n                T9.[");
            viewString.Append("GeoPlanetPlace_Parent.GeoPlanetPlace_Parent_Target.WoeId], \r\n                T9.");
            viewString.Append("[GeoPlanetPlace_Type.GeoPlanetPlace_Type_Target.Code], \r\n                T9.[Geo");
            viewString.Append("PlanetPlace_Place.GeoPlanetPlace_Place_Target.RevisionId]\r\n            FROM (\r\n ");
            viewString.Append("               SELECT -- Constructing Northeast\r\n                    T8.GeoPlane");
            viewString.Append("tPlace_WoeId, \r\n                    T8.GeoPlanetPlace_EnglishName, \r\n           ");
            viewString.Append("         T8.GeoPlanetPlace_Uri, \r\n                    T8.GeoPlanetPlace_Center_L");
            viewString.Append("atitude, \r\n                    T8.GeoPlanetPlace_Center_Longitude, \r\n           ");
            viewString.Append("         [UCosmic.Orm.Coordinates](T8.GeoPlanetPlace_BoundingBox_Northeast_Latit");
            viewString.Append("ude, T8.GeoPlanetPlace_BoundingBox_Northeast_Longitude) AS GeoPlanetPlace_Boundi");
            viewString.Append("ngBox_Northeast, \r\n                    T8.GeoPlanetPlace_BoundingBox_Southwest, ");
            viewString.Append("\r\n                    T8.GeoPlanetPlace_AreaRank, \r\n                    T8.GeoPl");
            viewString.Append("anetPlace_PopulationRank, \r\n                    T8.GeoPlanetPlace_Postal, \r\n    ");
            viewString.Append("                T8.GeoPlanetPlace_Country, \r\n                    T8.GeoPlanetPla");
            viewString.Append("ce_Admin1, \r\n                    T8.GeoPlanetPlace_Admin2, \r\n                   ");
            viewString.Append(" T8.GeoPlanetPlace_Admin3, \r\n                    T8.GeoPlanetPlace_Locality1, \r\n");
            viewString.Append("                    T8.GeoPlanetPlace_Locality2, \r\n                    T8.[GeoPl");
            viewString.Append("anetPlace_Parent.GeoPlanetPlace_Parent_Target.WoeId], \r\n                    T8.[");
            viewString.Append("GeoPlanetPlace_Type.GeoPlanetPlace_Type_Target.Code], \r\n                    T8.[");
            viewString.Append("GeoPlanetPlace_Place.GeoPlanetPlace_Place_Target.RevisionId]\r\n                FR");
            viewString.Append("OM (\r\n                    SELECT -- Constructing Southwest\r\n                    ");
            viewString.Append("    T7.GeoPlanetPlace_WoeId, \r\n                        T7.GeoPlanetPlace_English");
            viewString.Append("Name, \r\n                        T7.GeoPlanetPlace_Uri, \r\n                       ");
            viewString.Append(" T7.GeoPlanetPlace_Center_Latitude, \r\n                        T7.GeoPlanetPlace_");
            viewString.Append("Center_Longitude, \r\n                        T7.GeoPlanetPlace_BoundingBox_Northe");
            viewString.Append("ast_Latitude, \r\n                        T7.GeoPlanetPlace_BoundingBox_Northeast_");
            viewString.Append("Longitude, \r\n                        [UCosmic.Orm.Coordinates](T7.GeoPlanetPlace");
            viewString.Append("_BoundingBox_Southwest_Latitude, T7.GeoPlanetPlace_BoundingBox_Southwest_Longitu");
            viewString.Append("de) AS GeoPlanetPlace_BoundingBox_Southwest, \r\n                        T7.GeoPla");
            viewString.Append("netPlace_AreaRank, \r\n                        T7.GeoPlanetPlace_PopulationRank, \r");
            viewString.Append("\n                        T7.GeoPlanetPlace_Postal, \r\n                        T7.");
            viewString.Append("GeoPlanetPlace_Country, \r\n                        T7.GeoPlanetPlace_Admin1, \r\n  ");
            viewString.Append("                      T7.GeoPlanetPlace_Admin2, \r\n                        T7.Geo");
            viewString.Append("PlanetPlace_Admin3, \r\n                        T7.GeoPlanetPlace_Locality1, \r\n   ");
            viewString.Append("                     T7.GeoPlanetPlace_Locality2, \r\n                        T7.[");
            viewString.Append("GeoPlanetPlace_Parent.GeoPlanetPlace_Parent_Target.WoeId], \r\n                   ");
            viewString.Append("     T7.[GeoPlanetPlace_Type.GeoPlanetPlace_Type_Target.Code], \r\n               ");
            viewString.Append("         T7.[GeoPlanetPlace_Place.GeoPlanetPlace_Place_Target.RevisionId]\r\n     ");
            viewString.Append("               FROM (\r\n                        SELECT -- Constructing Country\r\n ");
            viewString.Append("                           T6.GeoPlanetPlace_WoeId, \r\n                          ");
            viewString.Append("  T6.GeoPlanetPlace_EnglishName, \r\n                            T6.GeoPlanetPlace");
            viewString.Append("_Uri, \r\n                            T6.GeoPlanetPlace_Center_Latitude, \r\n       ");
            viewString.Append("                     T6.GeoPlanetPlace_Center_Longitude, \r\n                     ");
            viewString.Append("       T6.GeoPlanetPlace_BoundingBox_Northeast_Latitude, \r\n                     ");
            viewString.Append("       T6.GeoPlanetPlace_BoundingBox_Northeast_Longitude, \r\n                    ");
            viewString.Append("        T6.GeoPlanetPlace_BoundingBox_Southwest_Latitude, \r\n                    ");
            viewString.Append("        T6.GeoPlanetPlace_BoundingBox_Southwest_Longitude, \r\n                   ");
            viewString.Append("         T6.GeoPlanetPlace_AreaRank, \r\n                            T6.GeoPlanetP");
            viewString.Append("lace_PopulationRank, \r\n                            T6.GeoPlanetPlace_Postal, \r\n ");
            viewString.Append("                           [UCosmic.Orm.GeoPlanetAdmin](T6.GeoPlanetPlace_Countr");
            viewString.Append("y_Code, T6.GeoPlanetPlace_Country_TypeName, T6.GeoPlanetPlace_Country_Name) AS G");
            viewString.Append("eoPlanetPlace_Country, \r\n                            T6.GeoPlanetPlace_Admin1, \r");
            viewString.Append("\n                            T6.GeoPlanetPlace_Admin2, \r\n                       ");
            viewString.Append("     T6.GeoPlanetPlace_Admin3, \r\n                            T6.GeoPlanetPlace_L");
            viewString.Append("ocality1, \r\n                            T6.GeoPlanetPlace_Locality2, \r\n         ");
            viewString.Append("                   T6.[GeoPlanetPlace_Parent.GeoPlanetPlace_Parent_Target.WoeId]");
            viewString.Append(", \r\n                            T6.[GeoPlanetPlace_Type.GeoPlanetPlace_Type_Targ");
            viewString.Append("et.Code], \r\n                            T6.[GeoPlanetPlace_Place.GeoPlanetPlace_");
            viewString.Append("Place_Target.RevisionId]\r\n                        FROM (\r\n                      ");
            viewString.Append("      SELECT -- Constructing Admin1\r\n                                T5.GeoPlane");
            viewString.Append("tPlace_WoeId, \r\n                                T5.GeoPlanetPlace_EnglishName, \r");
            viewString.Append("\n                                T5.GeoPlanetPlace_Uri, \r\n                      ");
            viewString.Append("          T5.GeoPlanetPlace_Center_Latitude, \r\n                                T");
            viewString.Append("5.GeoPlanetPlace_Center_Longitude, \r\n                                T5.GeoPlane");
            viewString.Append("tPlace_BoundingBox_Northeast_Latitude, \r\n                                T5.GeoP");
            viewString.Append("lanetPlace_BoundingBox_Northeast_Longitude, \r\n                                T5");
            viewString.Append(".GeoPlanetPlace_BoundingBox_Southwest_Latitude, \r\n                              ");
            viewString.Append("  T5.GeoPlanetPlace_BoundingBox_Southwest_Longitude, \r\n                         ");
            viewString.Append("       T5.GeoPlanetPlace_AreaRank, \r\n                                T5.GeoPlane");
            viewString.Append("tPlace_PopulationRank, \r\n                                T5.GeoPlanetPlace_Posta");
            viewString.Append("l, \r\n                                T5.GeoPlanetPlace_Country_Code, \r\n         ");
            viewString.Append("                       T5.GeoPlanetPlace_Country_TypeName, \r\n                   ");
            viewString.Append("             T5.GeoPlanetPlace_Country_Name, \r\n                                [");
            viewString.Append("UCosmic.Orm.GeoPlanetAdmin](T5.GeoPlanetPlace_Admin1_Code, T5.GeoPlanetPlace_Adm");
            viewString.Append("in1_TypeName, T5.GeoPlanetPlace_Admin1_Name) AS GeoPlanetPlace_Admin1, \r\n       ");
            viewString.Append("                         T5.GeoPlanetPlace_Admin2, \r\n                           ");
            viewString.Append("     T5.GeoPlanetPlace_Admin3, \r\n                                T5.GeoPlanetPla");
            viewString.Append("ce_Locality1, \r\n                                T5.GeoPlanetPlace_Locality2, \r\n ");
            viewString.Append("                               T5.[GeoPlanetPlace_Parent.GeoPlanetPlace_Parent_T");
            viewString.Append("arget.WoeId], \r\n                                T5.[GeoPlanetPlace_Type.GeoPlane");
            viewString.Append("tPlace_Type_Target.Code], \r\n                                T5.[GeoPlanetPlace_P");
            viewString.Append("lace.GeoPlanetPlace_Place_Target.RevisionId]\r\n                            FROM (");
            viewString.Append("\r\n                                SELECT -- Constructing Admin2\r\n               ");
            viewString.Append("                     T4.GeoPlanetPlace_WoeId, \r\n                                ");
            viewString.Append("    T4.GeoPlanetPlace_EnglishName, \r\n                                    T4.GeoP");
            viewString.Append("lanetPlace_Uri, \r\n                                    T4.GeoPlanetPlace_Center_L");
            viewString.Append("atitude, \r\n                                    T4.GeoPlanetPlace_Center_Longitud");
            viewString.Append("e, \r\n                                    T4.GeoPlanetPlace_BoundingBox_Northeast");
            viewString.Append("_Latitude, \r\n                                    T4.GeoPlanetPlace_BoundingBox_N");
            viewString.Append("ortheast_Longitude, \r\n                                    T4.GeoPlanetPlace_Boun");
            viewString.Append("dingBox_Southwest_Latitude, \r\n                                    T4.GeoPlanetPl");
            viewString.Append("ace_BoundingBox_Southwest_Longitude, \r\n                                    T4.Ge");
            viewString.Append("oPlanetPlace_AreaRank, \r\n                                    T4.GeoPlanetPlace_P");
            viewString.Append("opulationRank, \r\n                                    T4.GeoPlanetPlace_Postal, \r");
            viewString.Append("\n                                    T4.GeoPlanetPlace_Country_Code, \r\n         ");
            viewString.Append("                           T4.GeoPlanetPlace_Country_TypeName, \r\n               ");
            viewString.Append("                     T4.GeoPlanetPlace_Country_Name, \r\n                         ");
            viewString.Append("           T4.GeoPlanetPlace_Admin1_Code, \r\n                                    ");
            viewString.Append("T4.GeoPlanetPlace_Admin1_TypeName, \r\n                                    T4.GeoP");
            viewString.Append("lanetPlace_Admin1_Name, \r\n                                    [UCosmic.Orm.GeoPl");
            viewString.Append("anetAdmin](T4.GeoPlanetPlace_Admin2_Code, T4.GeoPlanetPlace_Admin2_TypeName, T4.");
            viewString.Append("GeoPlanetPlace_Admin2_Name) AS GeoPlanetPlace_Admin2, \r\n                        ");
            viewString.Append("            T4.GeoPlanetPlace_Admin3, \r\n                                    T4.G");
            viewString.Append("eoPlanetPlace_Locality1, \r\n                                    T4.GeoPlanetPlace");
            viewString.Append("_Locality2, \r\n                                    T4.[GeoPlanetPlace_Parent.GeoP");
            viewString.Append("lanetPlace_Parent_Target.WoeId], \r\n                                    T4.[GeoPl");
            viewString.Append("anetPlace_Type.GeoPlanetPlace_Type_Target.Code], \r\n                             ");
            viewString.Append("       T4.[GeoPlanetPlace_Place.GeoPlanetPlace_Place_Target.RevisionId]\r\n       ");
            viewString.Append("                         FROM (\r\n                                    SELECT -- C");
            viewString.Append("onstructing Admin3\r\n                                        T3.GeoPlanetPlace_Wo");
            viewString.Append("eId, \r\n                                        T3.GeoPlanetPlace_EnglishName, \r\n");
            viewString.Append("                                        T3.GeoPlanetPlace_Uri, \r\n               ");
            viewString.Append("                         T3.GeoPlanetPlace_Center_Latitude, \r\n                  ");
            viewString.Append("                      T3.GeoPlanetPlace_Center_Longitude, \r\n                    ");
            viewString.Append("                    T3.GeoPlanetPlace_BoundingBox_Northeast_Latitude, \r\n        ");
            viewString.Append("                                T3.GeoPlanetPlace_BoundingBox_Northeast_Longitud");
            viewString.Append("e, \r\n                                        T3.GeoPlanetPlace_BoundingBox_South");
            viewString.Append("west_Latitude, \r\n                                        T3.GeoPlanetPlace_Bound");
            viewString.Append("ingBox_Southwest_Longitude, \r\n                                        T3.GeoPlan");
            viewString.Append("etPlace_AreaRank, \r\n                                        T3.GeoPlanetPlace_Po");
            viewString.Append("pulationRank, \r\n                                        T3.GeoPlanetPlace_Postal");
            viewString.Append(", \r\n                                        T3.GeoPlanetPlace_Country_Code, \r\n  ");
            viewString.Append("                                      T3.GeoPlanetPlace_Country_TypeName, \r\n    ");
            viewString.Append("                                    T3.GeoPlanetPlace_Country_Name, \r\n          ");
            viewString.Append("                              T3.GeoPlanetPlace_Admin1_Code, \r\n                 ");
            viewString.Append("                       T3.GeoPlanetPlace_Admin1_TypeName, \r\n                    ");
            viewString.Append("                    T3.GeoPlanetPlace_Admin1_Name, \r\n                           ");
            viewString.Append("             T3.GeoPlanetPlace_Admin2_Code, \r\n                                  ");
            viewString.Append("      T3.GeoPlanetPlace_Admin2_TypeName, \r\n                                     ");
            viewString.Append("   T3.GeoPlanetPlace_Admin2_Name, \r\n                                        [UCo");
            viewString.Append("smic.Orm.GeoPlanetAdmin](T3.GeoPlanetPlace_Admin3_Code, T3.GeoPlanetPlace_Admin3");
            viewString.Append("_TypeName, T3.GeoPlanetPlace_Admin3_Name) AS GeoPlanetPlace_Admin3, \r\n          ");
            viewString.Append("                              T3.GeoPlanetPlace_Locality1, \r\n                   ");
            viewString.Append("                     T3.GeoPlanetPlace_Locality2, \r\n                            ");
            viewString.Append("            T3.[GeoPlanetPlace_Parent.GeoPlanetPlace_Parent_Target.WoeId], \r\n   ");
            viewString.Append("                                     T3.[GeoPlanetPlace_Type.GeoPlanetPlace_Type");
            viewString.Append("_Target.Code], \r\n                                        T3.[GeoPlanetPlace_Plac");
            viewString.Append("e.GeoPlanetPlace_Place_Target.RevisionId]\r\n                                    F");
            viewString.Append("ROM (\r\n                                        SELECT -- Constructing Locality1\r");
            viewString.Append("\n                                            T2.GeoPlanetPlace_WoeId, \r\n        ");
            viewString.Append("                                    T2.GeoPlanetPlace_EnglishName, \r\n           ");
            viewString.Append("                                 T2.GeoPlanetPlace_Uri, \r\n                      ");
            viewString.Append("                      T2.GeoPlanetPlace_Center_Latitude, \r\n                     ");
            viewString.Append("                       T2.GeoPlanetPlace_Center_Longitude, \r\n                   ");
            viewString.Append("                         T2.GeoPlanetPlace_BoundingBox_Northeast_Latitude, \r\n   ");
            viewString.Append("                                         T2.GeoPlanetPlace_BoundingBox_Northeast");
            viewString.Append("_Longitude, \r\n                                            T2.GeoPlanetPlace_Boun");
            viewString.Append("dingBox_Southwest_Latitude, \r\n                                            T2.Geo");
            viewString.Append("PlanetPlace_BoundingBox_Southwest_Longitude, \r\n                                 ");
            viewString.Append("           T2.GeoPlanetPlace_AreaRank, \r\n                                       ");
            viewString.Append("     T2.GeoPlanetPlace_PopulationRank, \r\n                                       ");
            viewString.Append("     T2.GeoPlanetPlace_Postal, \r\n                                            T2.");
            viewString.Append("GeoPlanetPlace_Country_Code, \r\n                                            T2.Ge");
            viewString.Append("oPlanetPlace_Country_TypeName, \r\n                                            T2.");
            viewString.Append("GeoPlanetPlace_Country_Name, \r\n                                            T2.Ge");
            viewString.Append("oPlanetPlace_Admin1_Code, \r\n                                            T2.GeoPl");
            viewString.Append("anetPlace_Admin1_TypeName, \r\n                                            T2.GeoP");
            viewString.Append("lanetPlace_Admin1_Name, \r\n                                            T2.GeoPlan");
            viewString.Append("etPlace_Admin2_Code, \r\n                                            T2.GeoPlanetP");
            viewString.Append("lace_Admin2_TypeName, \r\n                                            T2.GeoPlanet");
            viewString.Append("Place_Admin2_Name, \r\n                                            T2.GeoPlanetPla");
            viewString.Append("ce_Admin3_Code, \r\n                                            T2.GeoPlanetPlace_");
            viewString.Append("Admin3_TypeName, \r\n                                            T2.GeoPlanetPlace");
            viewString.Append("_Admin3_Name, \r\n                                            [UCosmic.Orm.GeoPlan");
            viewString.Append("etLocality](T2.GeoPlanetPlace_Locality1_TypeName, T2.GeoPlanetPlace_Locality1_Na");
            viewString.Append("me) AS GeoPlanetPlace_Locality1, \r\n                                            T");
            viewString.Append("2.GeoPlanetPlace_Locality2, \r\n                                            T2.[Ge");
            viewString.Append("oPlanetPlace_Parent.GeoPlanetPlace_Parent_Target.WoeId], \r\n                     ");
            viewString.Append("                       T2.[GeoPlanetPlace_Type.GeoPlanetPlace_Type_Target.Code],");
            viewString.Append(" \r\n                                            T2.[GeoPlanetPlace_Place.GeoPlane");
            viewString.Append("tPlace_Place_Target.RevisionId]\r\n                                        FROM (\r");
            viewString.Append("\n                                            SELECT -- Constructing Locality2\r\n ");
            viewString.Append("                                               T1.GeoPlanetPlace_WoeId, \r\n      ");
            viewString.Append("                                          T1.GeoPlanetPlace_EnglishName, \r\n     ");
            viewString.Append("                                           T1.GeoPlanetPlace_Uri, \r\n            ");
            viewString.Append("                                    T1.GeoPlanetPlace_Center_Latitude, \r\n       ");
            viewString.Append("                                         T1.GeoPlanetPlace_Center_Longitude, \r\n ");
            viewString.Append("                                               T1.GeoPlanetPlace_BoundingBox_Nor");
            viewString.Append("theast_Latitude, \r\n                                                T1.GeoPlanetP");
            viewString.Append("lace_BoundingBox_Northeast_Longitude, \r\n                                        ");
            viewString.Append("        T1.GeoPlanetPlace_BoundingBox_Southwest_Latitude, \r\n                    ");
            viewString.Append("                            T1.GeoPlanetPlace_BoundingBox_Southwest_Longitude, \r");
            viewString.Append("\n                                                T1.GeoPlanetPlace_AreaRank, \r\n ");
            viewString.Append("                                               T1.GeoPlanetPlace_PopulationRank,");
            viewString.Append(" \r\n                                                T1.GeoPlanetPlace_Postal, \r\n ");
            viewString.Append("                                               T1.GeoPlanetPlace_Country_Code, \r");
            viewString.Append("\n                                                T1.GeoPlanetPlace_Country_TypeN");
            viewString.Append("ame, \r\n                                                T1.GeoPlanetPlace_Country");
            viewString.Append("_Name, \r\n                                                T1.GeoPlanetPlace_Admin");
            viewString.Append("1_Code, \r\n                                                T1.GeoPlanetPlace_Admi");
            viewString.Append("n1_TypeName, \r\n                                                T1.GeoPlanetPlace");
            viewString.Append("_Admin1_Name, \r\n                                                T1.GeoPlanetPlac");
            viewString.Append("e_Admin2_Code, \r\n                                                T1.GeoPlanetPla");
            viewString.Append("ce_Admin2_TypeName, \r\n                                                T1.GeoPlan");
            viewString.Append("etPlace_Admin2_Name, \r\n                                                T1.GeoPla");
            viewString.Append("netPlace_Admin3_Code, \r\n                                                T1.GeoPl");
            viewString.Append("anetPlace_Admin3_TypeName, \r\n                                                T1.");
            viewString.Append("GeoPlanetPlace_Admin3_Name, \r\n                                                T1");
            viewString.Append(".GeoPlanetPlace_Locality1_TypeName, \r\n                                          ");
            viewString.Append("      T1.GeoPlanetPlace_Locality1_Name, \r\n                                      ");
            viewString.Append("          [UCosmic.Orm.GeoPlanetLocality](T1.GeoPlanetPlace_Locality2_TypeName, ");
            viewString.Append("T1.GeoPlanetPlace_Locality2_Name) AS GeoPlanetPlace_Locality2, \r\n               ");
            viewString.Append("                                 T1.[GeoPlanetPlace_Parent.GeoPlanetPlace_Parent");
            viewString.Append("_Target.WoeId], \r\n                                                T1.[GeoPlanetP");
            viewString.Append("lace_Type.GeoPlanetPlace_Type_Target.Code], \r\n                                  ");
            viewString.Append("              T1.[GeoPlanetPlace_Place.GeoPlanetPlace_Place_Target.RevisionId]\r\n");
            viewString.Append("                                            FROM (\r\n                            ");
            viewString.Append("                    SELECT \r\n                                                   ");
            viewString.Append(" T.WoeId AS GeoPlanetPlace_WoeId, \r\n                                            ");
            viewString.Append("        T.EnglishName AS GeoPlanetPlace_EnglishName, \r\n                         ");
            viewString.Append("                           T.Uri AS GeoPlanetPlace_Uri, \r\n                      ");
            viewString.Append("                              T.Latitude AS GeoPlanetPlace_Center_Latitude, \r\n  ");
            viewString.Append("                                                  T.Longitude AS GeoPlanetPlace_");
            viewString.Append("Center_Longitude, \r\n                                                    T.NorthL");
            viewString.Append("atitude AS GeoPlanetPlace_BoundingBox_Northeast_Latitude, \r\n                    ");
            viewString.Append("                                T.EastLongitude AS GeoPlanetPlace_BoundingBox_No");
            viewString.Append("rtheast_Longitude, \r\n                                                    T.South");
            viewString.Append("Latitude AS GeoPlanetPlace_BoundingBox_Southwest_Latitude, \r\n                   ");
            viewString.Append("                                 T.WestLongitude AS GeoPlanetPlace_BoundingBox_S");
            viewString.Append("outhwest_Longitude, \r\n                                                    T.Area");
            viewString.Append("Rank AS GeoPlanetPlace_AreaRank, \r\n                                             ");
            viewString.Append("       T.PopulationRank AS GeoPlanetPlace_PopulationRank, \r\n                    ");
            viewString.Append("                                T.Postal AS GeoPlanetPlace_Postal, \r\n           ");
            viewString.Append("                                         T.CountryCode AS GeoPlanetPlace_Country");
            viewString.Append("_Code, \r\n                                                    T.CountryType AS Ge");
            viewString.Append("oPlanetPlace_Country_TypeName, \r\n                                               ");
            viewString.Append("     T.CountryName AS GeoPlanetPlace_Country_Name, \r\n                           ");
            viewString.Append("                         T.Admin1Code AS GeoPlanetPlace_Admin1_Code, \r\n         ");
            viewString.Append("                                           T.Admin1Type AS GeoPlanetPlace_Admin1");
            viewString.Append("_TypeName, \r\n                                                    T.Admin1Name AS");
            viewString.Append(" GeoPlanetPlace_Admin1_Name, \r\n                                                 ");
            viewString.Append("   T.Admin2Code AS GeoPlanetPlace_Admin2_Code, \r\n                               ");
            viewString.Append("                     T.Admin2Type AS GeoPlanetPlace_Admin2_TypeName, \r\n         ");
            viewString.Append("                                           T.Admin2Name AS GeoPlanetPlace_Admin2");
            viewString.Append("_Name, \r\n                                                    T.Admin3Code AS Geo");
            viewString.Append("PlanetPlace_Admin3_Code, \r\n                                                    T");
            viewString.Append(".Admin3Type AS GeoPlanetPlace_Admin3_TypeName, \r\n                               ");
            viewString.Append("                     T.Admin3Name AS GeoPlanetPlace_Admin3_Name, \r\n             ");
            viewString.Append("                                       T.Locality1Type AS GeoPlanetPlace_Localit");
            viewString.Append("y1_TypeName, \r\n                                                    T.Locality1Na");
            viewString.Append("me AS GeoPlanetPlace_Locality1_Name, \r\n                                         ");
            viewString.Append("           T.Locality2Type AS GeoPlanetPlace_Locality2_TypeName, \r\n             ");
            viewString.Append("                                       T.Locality2Name AS GeoPlanetPlace_Localit");
            viewString.Append("y2_Name, \r\n                                                    True AS _from0, \r");
            viewString.Append("\n                                                    T.ParentWoeId AS [GeoPlanet");
            viewString.Append("Place_Parent.GeoPlanetPlace_Parent_Target.WoeId], \r\n                            ");
            viewString.Append("                        T.TypeCode AS [GeoPlanetPlace_Type.GeoPlanetPlace_Type_T");
            viewString.Append("arget.Code], \r\n                                                    T.PlaceId AS ");
            viewString.Append("[GeoPlanetPlace_Place.GeoPlanetPlace_Place_Target.RevisionId]\r\n                 ");
            viewString.Append("                               FROM CodeFirstDatabase.GeoPlanetPlace AS T\r\n     ");
            viewString.Append("                                       ) AS T1\r\n                                ");
            viewString.Append("        ) AS T2\r\n                                    ) AS T3\r\n                  ");
            viewString.Append("              ) AS T4\r\n                            ) AS T5\r\n                    ");
            viewString.Append("    ) AS T6\r\n                    ) AS T7\r\n                ) AS T8\r\n            )");
            viewString.Append(" AS T9\r\n        ) AS T10\r\n    ) AS T11");
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.GeoPlanetPlaces", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for UCosmicContext.GeoPlanetPlaceNodes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView59()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.GeoPlanetPlaceNodes", @"
    SELECT VALUE -- Constructing GeoPlanetPlaceNodes
        [UCosmic.Orm.GeoPlanetPlaceNode](T1.GeoPlanetPlaceNode_AncestorId, T1.GeoPlanetPlaceNode_OffspringId, T1.GeoPlanetPlaceNode_Separation)
    FROM (
        SELECT 
            T.AncestorId AS GeoPlanetPlaceNode_AncestorId, 
            T.OffspringId AS GeoPlanetPlaceNode_OffspringId, 
            T.Separation AS GeoPlanetPlaceNode_Separation, 
            True AS _from0
        FROM CodeFirstDatabase.GeoPlanetPlaceNode AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.GeoPlanetPlaceTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView60()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.GeoPlanetPlaceTypes", @"
    SELECT VALUE -- Constructing GeoPlanetPlaceTypes
        [UCosmic.Orm.GeoPlanetPlaceType](T1.GeoPlanetPlaceType_Code, T1.GeoPlanetPlaceType_Uri, T1.GeoPlanetPlaceType_EnglishName, T1.GeoPlanetPlaceType_EnglishDescription)
    FROM (
        SELECT 
            T.Code AS GeoPlanetPlaceType_Code, 
            T.Uri AS GeoPlanetPlaceType_Uri, 
            T.EnglishName AS GeoPlanetPlaceType_EnglishName, 
            T.EnglishDescription AS GeoPlanetPlaceType_EnglishDescription, 
            True AS _from0
        FROM CodeFirstDatabase.GeoPlanetPlaceType AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.GeoPlanetPlaceBelongToes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView61()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.GeoPlanetPlaceBelongToes", @"
    SELECT VALUE -- Constructing GeoPlanetPlaceBelongToes
        [UCosmic.Orm.GeoPlanetPlaceBelongTo](T1.GeoPlanetPlaceBelongTo_PlaceWoeId, T1.GeoPlanetPlaceBelongTo_Rank, T1.GeoPlanetPlaceBelongTo_BelongToWoeId)
    FROM (
        SELECT 
            T.PlaceWoeId AS GeoPlanetPlaceBelongTo_PlaceWoeId, 
            T.Rank AS GeoPlanetPlaceBelongTo_Rank, 
            T.BelongToWoeId AS GeoPlanetPlaceBelongTo_BelongToWoeId, 
            True AS _from0
        FROM CodeFirstDatabase.GeoPlanetPlaceBelongTo AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.PlaceNames
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView62()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2115);
            viewString.Append("\r\n    SELECT VALUE -- Constructing PlaceNames\r\n        [UCosmic.Orm.PlaceName](T");
            viewString.Append("1.PlaceName_RevisionId, T1.PlaceName_TranslationToHint, T1.PlaceName_IsPreferred");
            viewString.Append("Translation, T1.PlaceName_Text, T1.PlaceName_AsciiEquivalent, T1.PlaceName_Entit");
            viewString.Append("yId, T1.PlaceName_CreatedOnUtc, T1.PlaceName_CreatedByPrincipal, T1.PlaceName_Up");
            viewString.Append("datedOnUtc, T1.PlaceName_UpdatedByPrincipal, T1.PlaceName_Version, T1.PlaceName_");
            viewString.Append("IsCurrent, T1.PlaceName_IsArchived, T1.PlaceName_IsDeleted) WITH \r\n        RELAT");
            viewString.Append("IONSHIP(CREATEREF(UCosmicContext.Places, ROW(T1.[PlaceName_NameFor.PlaceName_Nam");
            viewString.Append("eFor_Target.RevisionId]),[UCosmic.Orm.Place]),[UCosmic.Orm.PlaceName_NameFor],Pl");
            viewString.Append("aceName_NameFor_Source,PlaceName_NameFor_Target) \r\n        RELATIONSHIP(CREATERE");
            viewString.Append("F(UCosmicContext.Languages, ROW(T1.[PlaceName_TranslationToLanguage.PlaceName_Tr");
            viewString.Append("anslationToLanguage_Target.RevisionId]),[UCosmic.Orm.Language]),[UCosmic.Orm.Pla");
            viewString.Append("ceName_TranslationToLanguage],PlaceName_TranslationToLanguage_Source,PlaceName_T");
            viewString.Append("ranslationToLanguage_Target) \r\n    FROM (\r\n        SELECT \r\n            T.Revisi");
            viewString.Append("onId AS PlaceName_RevisionId, \r\n            T.TranslationToHint AS PlaceName_Tra");
            viewString.Append("nslationToHint, \r\n            T.IsPreferredTranslation AS PlaceName_IsPreferredT");
            viewString.Append("ranslation, \r\n            T.Text AS PlaceName_Text, \r\n            T.AsciiEquival");
            viewString.Append("ent AS PlaceName_AsciiEquivalent, \r\n            T.EntityId AS PlaceName_EntityId");
            viewString.Append(", \r\n            T.CreatedOnUtc AS PlaceName_CreatedOnUtc, \r\n            T.Create");
            viewString.Append("dByPrincipal AS PlaceName_CreatedByPrincipal, \r\n            T.UpdatedOnUtc AS Pl");
            viewString.Append("aceName_UpdatedOnUtc, \r\n            T.UpdatedByPrincipal AS PlaceName_UpdatedByP");
            viewString.Append("rincipal, \r\n            T.Version AS PlaceName_Version, \r\n            T.IsCurren");
            viewString.Append("t AS PlaceName_IsCurrent, \r\n            T.IsArchived AS PlaceName_IsArchived, \r\n");
            viewString.Append("            T.IsDeleted AS PlaceName_IsDeleted, \r\n            True AS _from0, \r\n");
            viewString.Append("            T.NameForPlaceId AS [PlaceName_NameFor.PlaceName_NameFor_Target.Revi");
            viewString.Append("sionId], \r\n            T.TranslationToLanguageId AS [PlaceName_TranslationToLang");
            viewString.Append("uage.PlaceName_TranslationToLanguage_Target.RevisionId]\r\n        FROM CodeFirstD");
            viewString.Append("atabase.PlaceName AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.PlaceNames", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for UCosmicContext.Users
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView63()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.Users", @"
    SELECT VALUE -- Constructing Users
        [UCosmic.Orm.User](T1.User_RevisionId, T1.User_UserName, T1.User_SubjectNameId, T1.User_IsRegistered, T1.User_EntityId, T1.User_CreatedOnUtc, T1.User_CreatedByPrincipal, T1.User_UpdatedOnUtc, T1.User_UpdatedByPrincipal, T1.User_Version, T1.User_IsCurrent, T1.User_IsArchived, T1.User_IsDeleted) WITH 
        RELATIONSHIP(CREATEREF(UCosmicContext.People, ROW(T1.[Person_User.Person_User_Source.RevisionId]),[UCosmic.Orm.Person]),[UCosmic.Orm.Person_User],Person_User_Target,Person_User_Source) 
    FROM (
        SELECT 
            T.RevisionId AS User_RevisionId, 
            T.UserName AS User_UserName, 
            T.SubjectNameId AS User_SubjectNameId, 
            T.IsRegistered AS User_IsRegistered, 
            T.EntityId AS User_EntityId, 
            T.CreatedOnUtc AS User_CreatedOnUtc, 
            T.CreatedByPrincipal AS User_CreatedByPrincipal, 
            T.UpdatedOnUtc AS User_UpdatedOnUtc, 
            T.UpdatedByPrincipal AS User_UpdatedByPrincipal, 
            T.Version AS User_Version, 
            T.IsCurrent AS User_IsCurrent, 
            T.IsArchived AS User_IsArchived, 
            T.IsDeleted AS User_IsDeleted, 
            True AS _from0, 
            T.PersonId AS [Person_User.Person_User_Source.RevisionId]
        FROM CodeFirstDatabase.User AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.RoleGrants
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView64()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.RoleGrants", "\r\n    SELECT VALUE -- Constructing RoleGrants\r\n        [UCosmic.Orm.RoleGrant](T1" +
                    ".RoleGrant_RevisionId, T1.RoleGrant_EntityId, T1.RoleGrant_CreatedOnUtc, T1.Role" +
                    "Grant_CreatedByPrincipal, T1.RoleGrant_UpdatedOnUtc, T1.RoleGrant_UpdatedByPrinc" +
                    "ipal, T1.RoleGrant_Version, T1.RoleGrant_IsCurrent, T1.RoleGrant_IsArchived, T1." +
                    "RoleGrant_IsDeleted) WITH \r\n        RELATIONSHIP(CREATEREF(UCosmicContext.Users," +
                    " ROW(T1.[RoleGrant_User.RoleGrant_User_Target.RevisionId]),[UCosmic.Orm.User]),[" +
                    "UCosmic.Orm.RoleGrant_User],RoleGrant_User_Source,RoleGrant_User_Target) \r\n     " +
                    "   RELATIONSHIP(CREATEREF(UCosmicContext.Roles, ROW(T1.[RoleGrant_Role.RoleGrant" +
                    "_Role_Target.RevisionId]),[UCosmic.Orm.Role]),[UCosmic.Orm.RoleGrant_Role],RoleG" +
                    "rant_Role_Source,RoleGrant_Role_Target) \r\n        RELATIONSHIP(CREATEREF(UCosmic" +
                    "Context.Establishments, ROW(T1.[RoleGrant_ForEstablishment.RoleGrant_ForEstablis" +
                    "hment_Target.RevisionId]),[UCosmic.Orm.Establishment]),[UCosmic.Orm.RoleGrant_Fo" +
                    "rEstablishment],RoleGrant_ForEstablishment_Source,RoleGrant_ForEstablishment_Tar" +
                    "get) \r\n    FROM (\r\n        SELECT \r\n            T.RevisionId AS RoleGrant_Revisi" +
                    "onId, \r\n            T.EntityId AS RoleGrant_EntityId, \r\n            T.CreatedOnU" +
                    "tc AS RoleGrant_CreatedOnUtc, \r\n            T.CreatedByPrincipal AS RoleGrant_Cr" +
                    "eatedByPrincipal, \r\n            T.UpdatedOnUtc AS RoleGrant_UpdatedOnUtc, \r\n    " +
                    "        T.UpdatedByPrincipal AS RoleGrant_UpdatedByPrincipal, \r\n            T.Ve" +
                    "rsion AS RoleGrant_Version, \r\n            T.IsCurrent AS RoleGrant_IsCurrent, \r\n" +
                    "            T.IsArchived AS RoleGrant_IsArchived, \r\n            T.IsDeleted AS R" +
                    "oleGrant_IsDeleted, \r\n            True AS _from0, \r\n            T.UserId AS [Rol" +
                    "eGrant_User.RoleGrant_User_Target.RevisionId], \r\n            T.RoleId AS [RoleGr" +
                    "ant_Role.RoleGrant_Role_Target.RevisionId], \r\n            T.ForEstablishmentId A" +
                    "S [RoleGrant_ForEstablishment.RoleGrant_ForEstablishment_Target.RevisionId]\r\n   " +
                    "     FROM CodeFirstDatabase.RoleGrant AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.Roles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView65()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.Roles", @"
    SELECT VALUE -- Constructing Roles
        [UCosmic.Orm.Role](T1.Role_RevisionId, T1.Role_Name, T1.Role_Description, T1.Role_EntityId, T1.Role_CreatedOnUtc, T1.Role_CreatedByPrincipal, T1.Role_UpdatedOnUtc, T1.Role_UpdatedByPrincipal, T1.Role_Version, T1.Role_IsCurrent, T1.Role_IsArchived, T1.Role_IsDeleted)
    FROM (
        SELECT 
            T.RevisionId AS Role_RevisionId, 
            T.Name AS Role_Name, 
            T.Description AS Role_Description, 
            T.EntityId AS Role_EntityId, 
            T.CreatedOnUtc AS Role_CreatedOnUtc, 
            T.CreatedByPrincipal AS Role_CreatedByPrincipal, 
            T.UpdatedOnUtc AS Role_UpdatedOnUtc, 
            T.UpdatedByPrincipal AS Role_UpdatedByPrincipal, 
            T.Version AS Role_Version, 
            T.IsCurrent AS Role_IsCurrent, 
            T.IsArchived AS Role_IsArchived, 
            T.IsDeleted AS Role_IsDeleted, 
            True AS _from0
        FROM CodeFirstDatabase.Role AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.Establishments
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView66()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(6990);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Establishments\r\n        [UCosmic.Orm.Establis");
            viewString.Append("hment](T4.Establishment_RevisionId, T4.Establishment_OfficialName, T4.Establishm");
            viewString.Append("ent_WebsiteUrl, T4.Establishment_IsMember, T4.Establishment_InstitutionInfo, T4.");
            viewString.Append("Establishment_PublicContactInfo, T4.Establishment_PartnerContactInfo, T4.Establi");
            viewString.Append("shment_EntityId, T4.Establishment_CreatedOnUtc, T4.Establishment_CreatedByPrinci");
            viewString.Append("pal, T4.Establishment_UpdatedOnUtc, T4.Establishment_UpdatedByPrincipal, T4.Esta");
            viewString.Append("blishment_Version, T4.Establishment_IsCurrent, T4.Establishment_IsArchived, T4.E");
            viewString.Append("stablishment_IsDeleted) WITH \r\n        RELATIONSHIP(CREATEREF(UCosmicContext.Est");
            viewString.Append("ablishments, ROW(T4.[Establishment_Parent.Establishment_Parent_Target.RevisionId");
            viewString.Append("]),[UCosmic.Orm.Establishment]),[UCosmic.Orm.Establishment_Parent],Establishment");
            viewString.Append("_Parent_Source,Establishment_Parent_Target) \r\n        RELATIONSHIP(CREATEREF(UCo");
            viewString.Append("smicContext.EstablishmentTypes, ROW(T4.[Establishment_Type.Establishment_Type_Ta");
            viewString.Append("rget.RevisionId]),[UCosmic.Orm.EstablishmentType]),[UCosmic.Orm.Establishment_Ty");
            viewString.Append("pe],Establishment_Type_Source,Establishment_Type_Target) \r\n    FROM (\r\n        S");
            viewString.Append("ELECT -- Constructing InstitutionInfo\r\n            T3.Establishment_RevisionId, ");
            viewString.Append("\r\n            T3.Establishment_OfficialName, \r\n            T3.Establishment_Webs");
            viewString.Append("iteUrl, \r\n            T3.Establishment_IsMember, \r\n            [UCosmic.Orm.Inst");
            viewString.Append("itutionInfo](T3.Establishment_InstitutionInfo_CollegeBoardDesignatedIndicator, T");
            viewString.Append("3.Establishment_InstitutionInfo_UCosmicCode) AS Establishment_InstitutionInfo, \r");
            viewString.Append("\n            T3.Establishment_PublicContactInfo, \r\n            T3.Establishment_");
            viewString.Append("PartnerContactInfo, \r\n            T3.Establishment_EntityId, \r\n            T3.Es");
            viewString.Append("tablishment_CreatedOnUtc, \r\n            T3.Establishment_CreatedByPrincipal, \r\n ");
            viewString.Append("           T3.Establishment_UpdatedOnUtc, \r\n            T3.Establishment_Updated");
            viewString.Append("ByPrincipal, \r\n            T3.Establishment_Version, \r\n            T3.Establishm");
            viewString.Append("ent_IsCurrent, \r\n            T3.Establishment_IsArchived, \r\n            T3.Estab");
            viewString.Append("lishment_IsDeleted, \r\n            T3.[Establishment_Parent.Establishment_Parent_");
            viewString.Append("Target.RevisionId], \r\n            T3.[Establishment_Type.Establishment_Type_Targ");
            viewString.Append("et.RevisionId]\r\n        FROM (\r\n            SELECT -- Constructing PublicContact");
            viewString.Append("Info\r\n                T2.Establishment_RevisionId, \r\n                T2.Establis");
            viewString.Append("hment_OfficialName, \r\n                T2.Establishment_WebsiteUrl, \r\n           ");
            viewString.Append("     T2.Establishment_IsMember, \r\n                T2.Establishment_InstitutionIn");
            viewString.Append("fo_CollegeBoardDesignatedIndicator, \r\n                T2.Establishment_Instituti");
            viewString.Append("onInfo_UCosmicCode, \r\n                [UCosmic.Orm.EstablishmentContactInfo](T2.");
            viewString.Append("Establishment_PublicContactInfo_Phone, T2.Establishment_PublicContactInfo_Fax, T");
            viewString.Append("2.Establishment_PublicContactInfo_Email) AS Establishment_PublicContactInfo, \r\n ");
            viewString.Append("               T2.Establishment_PartnerContactInfo, \r\n                T2.Establi");
            viewString.Append("shment_EntityId, \r\n                T2.Establishment_CreatedOnUtc, \r\n            ");
            viewString.Append("    T2.Establishment_CreatedByPrincipal, \r\n                T2.Establishment_Upda");
            viewString.Append("tedOnUtc, \r\n                T2.Establishment_UpdatedByPrincipal, \r\n             ");
            viewString.Append("   T2.Establishment_Version, \r\n                T2.Establishment_IsCurrent, \r\n   ");
            viewString.Append("             T2.Establishment_IsArchived, \r\n                T2.Establishment_IsD");
            viewString.Append("eleted, \r\n                T2.[Establishment_Parent.Establishment_Parent_Target.R");
            viewString.Append("evisionId], \r\n                T2.[Establishment_Type.Establishment_Type_Target.R");
            viewString.Append("evisionId]\r\n            FROM (\r\n                SELECT -- Constructing PartnerCo");
            viewString.Append("ntactInfo\r\n                    T1.Establishment_RevisionId, \r\n                  ");
            viewString.Append("  T1.Establishment_OfficialName, \r\n                    T1.Establishment_WebsiteU");
            viewString.Append("rl, \r\n                    T1.Establishment_IsMember, \r\n                    T1.Es");
            viewString.Append("tablishment_InstitutionInfo_CollegeBoardDesignatedIndicator, \r\n                 ");
            viewString.Append("   T1.Establishment_InstitutionInfo_UCosmicCode, \r\n                    T1.Establ");
            viewString.Append("ishment_PublicContactInfo_Phone, \r\n                    T1.Establishment_PublicCo");
            viewString.Append("ntactInfo_Fax, \r\n                    T1.Establishment_PublicContactInfo_Email, \r");
            viewString.Append("\n                    [UCosmic.Orm.EstablishmentContactInfo](T1.Establishment_Par");
            viewString.Append("tnerContactInfo_Phone, T1.Establishment_PartnerContactInfo_Fax, T1.Establishment");
            viewString.Append("_PartnerContactInfo_Email) AS Establishment_PartnerContactInfo, \r\n              ");
            viewString.Append("      T1.Establishment_EntityId, \r\n                    T1.Establishment_CreatedO");
            viewString.Append("nUtc, \r\n                    T1.Establishment_CreatedByPrincipal, \r\n             ");
            viewString.Append("       T1.Establishment_UpdatedOnUtc, \r\n                    T1.Establishment_Upd");
            viewString.Append("atedByPrincipal, \r\n                    T1.Establishment_Version, \r\n             ");
            viewString.Append("       T1.Establishment_IsCurrent, \r\n                    T1.Establishment_IsArch");
            viewString.Append("ived, \r\n                    T1.Establishment_IsDeleted, \r\n                    T1");
            viewString.Append(".[Establishment_Parent.Establishment_Parent_Target.RevisionId], \r\n              ");
            viewString.Append("      T1.[Establishment_Type.Establishment_Type_Target.RevisionId]\r\n            ");
            viewString.Append("    FROM (\r\n                    SELECT \r\n                        T.RevisionId AS");
            viewString.Append(" Establishment_RevisionId, \r\n                        T.OfficialName AS Establish");
            viewString.Append("ment_OfficialName, \r\n                        T.WebsiteUrl AS Establishment_Websi");
            viewString.Append("teUrl, \r\n                        T.IsMember AS Establishment_IsMember, \r\n       ");
            viewString.Append("                 T.CollegeBoardDesignatedIndicator AS Establishment_InstitutionI");
            viewString.Append("nfo_CollegeBoardDesignatedIndicator, \r\n                        T.UCosmicCode AS ");
            viewString.Append("Establishment_InstitutionInfo_UCosmicCode, \r\n                        T.PublicPho");
            viewString.Append("ne AS Establishment_PublicContactInfo_Phone, \r\n                        T.PublicF");
            viewString.Append("ax AS Establishment_PublicContactInfo_Fax, \r\n                        T.PublicEma");
            viewString.Append("il AS Establishment_PublicContactInfo_Email, \r\n                        T.Partner");
            viewString.Append("Phone AS Establishment_PartnerContactInfo_Phone, \r\n                        T.Par");
            viewString.Append("tnerFax AS Establishment_PartnerContactInfo_Fax, \r\n                        T.Par");
            viewString.Append("tnerEmail AS Establishment_PartnerContactInfo_Email, \r\n                        T");
            viewString.Append(".EntityId AS Establishment_EntityId, \r\n                        T.CreatedOnUtc AS");
            viewString.Append(" Establishment_CreatedOnUtc, \r\n                        T.CreatedByPrincipal AS E");
            viewString.Append("stablishment_CreatedByPrincipal, \r\n                        T.UpdatedOnUtc AS Est");
            viewString.Append("ablishment_UpdatedOnUtc, \r\n                        T.UpdatedByPrincipal AS Estab");
            viewString.Append("lishment_UpdatedByPrincipal, \r\n                        T.Version AS Establishmen");
            viewString.Append("t_Version, \r\n                        T.IsCurrent AS Establishment_IsCurrent, \r\n ");
            viewString.Append("                       T.IsArchived AS Establishment_IsArchived, \r\n             ");
            viewString.Append("           T.IsDeleted AS Establishment_IsDeleted, \r\n                        Tru");
            viewString.Append("e AS _from0, \r\n                        T.ParentId AS [Establishment_Parent.Estab");
            viewString.Append("lishment_Parent_Target.RevisionId], \r\n                        T.TypeId AS [Estab");
            viewString.Append("lishment_Type.Establishment_Type_Target.RevisionId]\r\n                    FROM Co");
            viewString.Append("deFirstDatabase.Establishment AS T\r\n                ) AS T1\r\n            ) AS T2");
            viewString.Append("\r\n        ) AS T3\r\n    ) AS T4");
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.Establishments", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for UCosmicContext.EstablishmentNames
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView67()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2528);
            viewString.Append("\r\n    SELECT VALUE -- Constructing EstablishmentNames\r\n        [UCosmic.Orm.Esta");
            viewString.Append("blishmentName](T1.EstablishmentName_RevisionId, T1.EstablishmentName_Translation");
            viewString.Append("ToHint, T1.EstablishmentName_IsFormerName, T1.EstablishmentName_IsOfficialName, ");
            viewString.Append("T1.EstablishmentName_Text, T1.EstablishmentName_AsciiEquivalent, T1.Establishmen");
            viewString.Append("tName_EntityId, T1.EstablishmentName_CreatedOnUtc, T1.EstablishmentName_CreatedB");
            viewString.Append("yPrincipal, T1.EstablishmentName_UpdatedOnUtc, T1.EstablishmentName_UpdatedByPri");
            viewString.Append("ncipal, T1.EstablishmentName_Version, T1.EstablishmentName_IsCurrent, T1.Establi");
            viewString.Append("shmentName_IsArchived, T1.EstablishmentName_IsDeleted) WITH \r\n        RELATIONSH");
            viewString.Append("IP(CREATEREF(UCosmicContext.Languages, ROW(T1.[EstablishmentName_TranslationToLa");
            viewString.Append("nguage.EstablishmentName_TranslationToLanguage_Target.RevisionId]),[UCosmic.Orm.");
            viewString.Append("Language]),[UCosmic.Orm.EstablishmentName_TranslationToLanguage],EstablishmentNa");
            viewString.Append("me_TranslationToLanguage_Source,EstablishmentName_TranslationToLanguage_Target) ");
            viewString.Append("\r\n        RELATIONSHIP(CREATEREF(UCosmicContext.Establishments, ROW(T1.[Establis");
            viewString.Append("hment_Names.Establishment_Names_Source.RevisionId]),[UCosmic.Orm.Establishment])");
            viewString.Append(",[UCosmic.Orm.Establishment_Names],Establishment_Names_Target,Establishment_Name");
            viewString.Append("s_Source) \r\n    FROM (\r\n        SELECT \r\n            T.RevisionId AS Establishme");
            viewString.Append("ntName_RevisionId, \r\n            T.TranslationToHint AS EstablishmentName_Transl");
            viewString.Append("ationToHint, \r\n            T.IsFormerName AS EstablishmentName_IsFormerName, \r\n ");
            viewString.Append("           T.IsOfficialName AS EstablishmentName_IsOfficialName, \r\n            T");
            viewString.Append(".Text AS EstablishmentName_Text, \r\n            T.AsciiEquivalent AS Establishmen");
            viewString.Append("tName_AsciiEquivalent, \r\n            T.EntityId AS EstablishmentName_EntityId, \r");
            viewString.Append("\n            T.CreatedOnUtc AS EstablishmentName_CreatedOnUtc, \r\n            T.C");
            viewString.Append("reatedByPrincipal AS EstablishmentName_CreatedByPrincipal, \r\n            T.Updat");
            viewString.Append("edOnUtc AS EstablishmentName_UpdatedOnUtc, \r\n            T.UpdatedByPrincipal AS");
            viewString.Append(" EstablishmentName_UpdatedByPrincipal, \r\n            T.Version AS EstablishmentN");
            viewString.Append("ame_Version, \r\n            T.IsCurrent AS EstablishmentName_IsCurrent, \r\n       ");
            viewString.Append("     T.IsArchived AS EstablishmentName_IsArchived, \r\n            T.IsDeleted AS ");
            viewString.Append("EstablishmentName_IsDeleted, \r\n            True AS _from0, \r\n            T.Trans");
            viewString.Append("lationToLanguageId AS [EstablishmentName_TranslationToLanguage.EstablishmentName");
            viewString.Append("_TranslationToLanguage_Target.RevisionId], \r\n            T.ForEstablishmentId AS");
            viewString.Append(" [Establishment_Names.Establishment_Names_Source.RevisionId]\r\n        FROM CodeF");
            viewString.Append("irstDatabase.EstablishmentName AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.EstablishmentNames", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for UCosmicContext.EstablishmentUrls
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView68()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.EstablishmentUrls", "\r\n    SELECT VALUE -- Constructing EstablishmentUrls\r\n        [UCosmic.Orm.Establ" +
                    "ishmentUrl](T1.EstablishmentUrl_RevisionId, T1.EstablishmentUrl_Value, T1.Establ" +
                    "ishmentUrl_IsOfficialUrl, T1.EstablishmentUrl_IsFormerUrl, T1.EstablishmentUrl_E" +
                    "ntityId, T1.EstablishmentUrl_CreatedOnUtc, T1.EstablishmentUrl_CreatedByPrincipa" +
                    "l, T1.EstablishmentUrl_UpdatedOnUtc, T1.EstablishmentUrl_UpdatedByPrincipal, T1." +
                    "EstablishmentUrl_Version, T1.EstablishmentUrl_IsCurrent, T1.EstablishmentUrl_IsA" +
                    "rchived, T1.EstablishmentUrl_IsDeleted) WITH \r\n        RELATIONSHIP(CREATEREF(UC" +
                    "osmicContext.Establishments, ROW(T1.[Establishment_Urls.Establishment_Urls_Sourc" +
                    "e.RevisionId]),[UCosmic.Orm.Establishment]),[UCosmic.Orm.Establishment_Urls],Est" +
                    "ablishment_Urls_Target,Establishment_Urls_Source) \r\n    FROM (\r\n        SELECT \r" +
                    "\n            T.RevisionId AS EstablishmentUrl_RevisionId, \r\n            T.[Value" +
                    "] AS EstablishmentUrl_Value, \r\n            T.IsOfficialUrl AS EstablishmentUrl_I" +
                    "sOfficialUrl, \r\n            T.IsFormerUrl AS EstablishmentUrl_IsFormerUrl, \r\n   " +
                    "         T.EntityId AS EstablishmentUrl_EntityId, \r\n            T.CreatedOnUtc A" +
                    "S EstablishmentUrl_CreatedOnUtc, \r\n            T.CreatedByPrincipal AS Establish" +
                    "mentUrl_CreatedByPrincipal, \r\n            T.UpdatedOnUtc AS EstablishmentUrl_Upd" +
                    "atedOnUtc, \r\n            T.UpdatedByPrincipal AS EstablishmentUrl_UpdatedByPrinc" +
                    "ipal, \r\n            T.Version AS EstablishmentUrl_Version, \r\n            T.IsCur" +
                    "rent AS EstablishmentUrl_IsCurrent, \r\n            T.IsArchived AS EstablishmentU" +
                    "rl_IsArchived, \r\n            T.IsDeleted AS EstablishmentUrl_IsDeleted, \r\n      " +
                    "      True AS _from0, \r\n            T.ForEstablishmentId AS [Establishment_Urls." +
                    "Establishment_Urls_Source.RevisionId]\r\n        FROM CodeFirstDatabase.Establishm" +
                    "entUrl AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.EstablishmentNodes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView69()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.EstablishmentNodes", @"
    SELECT VALUE -- Constructing EstablishmentNodes
        [UCosmic.Orm.EstablishmentNode](T1.EstablishmentNode_AncestorId, T1.EstablishmentNode_OffspringId, T1.EstablishmentNode_Separation)
    FROM (
        SELECT 
            T.AncestorId AS EstablishmentNode_AncestorId, 
            T.OffspringId AS EstablishmentNode_OffspringId, 
            T.Separation AS EstablishmentNode_Separation, 
            True AS _from0
        FROM CodeFirstDatabase.EstablishmentNode AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.EstablishmentLocations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView70()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(6731);
            viewString.Append("\r\n    SELECT VALUE -- Constructing EstablishmentLocations\r\n        [UCosmic.Orm.");
            viewString.Append("EstablishmentLocation](T5.EstablishmentLocation_RevisionId, T5.EstablishmentLoca");
            viewString.Append("tion_Center, T5.EstablishmentLocation_BoundingBox, T5.EstablishmentLocation_Goog");
            viewString.Append("leMapZoomLevel, T5.EstablishmentLocation_EntityId, T5.EstablishmentLocation_Crea");
            viewString.Append("tedOnUtc, T5.EstablishmentLocation_CreatedByPrincipal, T5.EstablishmentLocation_");
            viewString.Append("UpdatedOnUtc, T5.EstablishmentLocation_UpdatedByPrincipal, T5.EstablishmentLocat");
            viewString.Append("ion_Version, T5.EstablishmentLocation_IsCurrent, T5.EstablishmentLocation_IsArch");
            viewString.Append("ived, T5.EstablishmentLocation_IsDeleted)\r\n    FROM (\r\n        SELECT -- Constru");
            viewString.Append("cting Center\r\n            T4.EstablishmentLocation_RevisionId, \r\n            [UC");
            viewString.Append("osmic.Orm.Coordinates](T4.EstablishmentLocation_Center_Latitude, T4.Establishmen");
            viewString.Append("tLocation_Center_Longitude) AS EstablishmentLocation_Center, \r\n            T4.Es");
            viewString.Append("tablishmentLocation_BoundingBox, \r\n            T4.EstablishmentLocation_GoogleMa");
            viewString.Append("pZoomLevel, \r\n            T4.EstablishmentLocation_EntityId, \r\n            T4.Es");
            viewString.Append("tablishmentLocation_CreatedOnUtc, \r\n            T4.EstablishmentLocation_Created");
            viewString.Append("ByPrincipal, \r\n            T4.EstablishmentLocation_UpdatedOnUtc, \r\n            ");
            viewString.Append("T4.EstablishmentLocation_UpdatedByPrincipal, \r\n            T4.EstablishmentLocat");
            viewString.Append("ion_Version, \r\n            T4.EstablishmentLocation_IsCurrent, \r\n            T4.");
            viewString.Append("EstablishmentLocation_IsArchived, \r\n            T4.EstablishmentLocation_IsDelet");
            viewString.Append("ed\r\n        FROM (\r\n            SELECT -- Constructing BoundingBox\r\n            ");
            viewString.Append("    T3.EstablishmentLocation_RevisionId, \r\n                T3.EstablishmentLocat");
            viewString.Append("ion_Center_Latitude, \r\n                T3.EstablishmentLocation_Center_Longitude");
            viewString.Append(", \r\n                [UCosmic.Orm.BoundingBox](T3.EstablishmentLocation_BoundingB");
            viewString.Append("ox_Northeast, T3.EstablishmentLocation_BoundingBox_Southwest) AS EstablishmentLo");
            viewString.Append("cation_BoundingBox, \r\n                T3.EstablishmentLocation_GoogleMapZoomLeve");
            viewString.Append("l, \r\n                T3.EstablishmentLocation_EntityId, \r\n                T3.Est");
            viewString.Append("ablishmentLocation_CreatedOnUtc, \r\n                T3.EstablishmentLocation_Crea");
            viewString.Append("tedByPrincipal, \r\n                T3.EstablishmentLocation_UpdatedOnUtc, \r\n     ");
            viewString.Append("           T3.EstablishmentLocation_UpdatedByPrincipal, \r\n                T3.Est");
            viewString.Append("ablishmentLocation_Version, \r\n                T3.EstablishmentLocation_IsCurrent");
            viewString.Append(", \r\n                T3.EstablishmentLocation_IsArchived, \r\n                T3.Es");
            viewString.Append("tablishmentLocation_IsDeleted\r\n            FROM (\r\n                SELECT -- Con");
            viewString.Append("structing Northeast\r\n                    T2.EstablishmentLocation_RevisionId, \r\n");
            viewString.Append("                    T2.EstablishmentLocation_Center_Latitude, \r\n                ");
            viewString.Append("    T2.EstablishmentLocation_Center_Longitude, \r\n                    [UCosmic.Or");
            viewString.Append("m.Coordinates](T2.EstablishmentLocation_BoundingBox_Northeast_Latitude, T2.Estab");
            viewString.Append("lishmentLocation_BoundingBox_Northeast_Longitude) AS EstablishmentLocation_Bound");
            viewString.Append("ingBox_Northeast, \r\n                    T2.EstablishmentLocation_BoundingBox_Sou");
            viewString.Append("thwest, \r\n                    T2.EstablishmentLocation_GoogleMapZoomLevel, \r\n   ");
            viewString.Append("                 T2.EstablishmentLocation_EntityId, \r\n                    T2.Est");
            viewString.Append("ablishmentLocation_CreatedOnUtc, \r\n                    T2.EstablishmentLocation_");
            viewString.Append("CreatedByPrincipal, \r\n                    T2.EstablishmentLocation_UpdatedOnUtc,");
            viewString.Append(" \r\n                    T2.EstablishmentLocation_UpdatedByPrincipal, \r\n          ");
            viewString.Append("          T2.EstablishmentLocation_Version, \r\n                    T2.Establishme");
            viewString.Append("ntLocation_IsCurrent, \r\n                    T2.EstablishmentLocation_IsArchived,");
            viewString.Append(" \r\n                    T2.EstablishmentLocation_IsDeleted\r\n                FROM ");
            viewString.Append("(\r\n                    SELECT -- Constructing Southwest\r\n                       ");
            viewString.Append(" T1.EstablishmentLocation_RevisionId, \r\n                        T1.Establishment");
            viewString.Append("Location_Center_Latitude, \r\n                        T1.EstablishmentLocation_Cen");
            viewString.Append("ter_Longitude, \r\n                        T1.EstablishmentLocation_BoundingBox_No");
            viewString.Append("rtheast_Latitude, \r\n                        T1.EstablishmentLocation_BoundingBox");
            viewString.Append("_Northeast_Longitude, \r\n                        [UCosmic.Orm.Coordinates](T1.Est");
            viewString.Append("ablishmentLocation_BoundingBox_Southwest_Latitude, T1.EstablishmentLocation_Boun");
            viewString.Append("dingBox_Southwest_Longitude) AS EstablishmentLocation_BoundingBox_Southwest, \r\n ");
            viewString.Append("                       T1.EstablishmentLocation_GoogleMapZoomLevel, \r\n          ");
            viewString.Append("              T1.EstablishmentLocation_EntityId, \r\n                        T1.Es");
            viewString.Append("tablishmentLocation_CreatedOnUtc, \r\n                        T1.EstablishmentLoca");
            viewString.Append("tion_CreatedByPrincipal, \r\n                        T1.EstablishmentLocation_Upda");
            viewString.Append("tedOnUtc, \r\n                        T1.EstablishmentLocation_UpdatedByPrincipal,");
            viewString.Append(" \r\n                        T1.EstablishmentLocation_Version, \r\n                 ");
            viewString.Append("       T1.EstablishmentLocation_IsCurrent, \r\n                        T1.Establis");
            viewString.Append("hmentLocation_IsArchived, \r\n                        T1.EstablishmentLocation_IsD");
            viewString.Append("eleted\r\n                    FROM (\r\n                        SELECT \r\n           ");
            viewString.Append("                 T.RevisionId AS EstablishmentLocation_RevisionId, \r\n           ");
            viewString.Append("                 T.CenterLatitude AS EstablishmentLocation_Center_Latitude, \r\n  ");
            viewString.Append("                          T.CenterLongitude AS EstablishmentLocation_Center_Long");
            viewString.Append("itude, \r\n                            T.BoundingBoxNorthLatitude AS Establishment");
            viewString.Append("Location_BoundingBox_Northeast_Latitude, \r\n                            T.Boundin");
            viewString.Append("gBoxEastLongitude AS EstablishmentLocation_BoundingBox_Northeast_Longitude, \r\n  ");
            viewString.Append("                          T.BoundingBoxSouthLatitude AS EstablishmentLocation_Bo");
            viewString.Append("undingBox_Southwest_Latitude, \r\n                            T.BoundingBoxWestLon");
            viewString.Append("gitude AS EstablishmentLocation_BoundingBox_Southwest_Longitude, \r\n             ");
            viewString.Append("               T.GoogleMapZoomLevel AS EstablishmentLocation_GoogleMapZoomLevel,");
            viewString.Append(" \r\n                            T.EntityId AS EstablishmentLocation_EntityId, \r\n ");
            viewString.Append("                           T.CreatedOnUtc AS EstablishmentLocation_CreatedOnUtc,");
            viewString.Append(" \r\n                            T.CreatedByPrincipal AS EstablishmentLocation_Cre");
            viewString.Append("atedByPrincipal, \r\n                            T.UpdatedOnUtc AS EstablishmentLo");
            viewString.Append("cation_UpdatedOnUtc, \r\n                            T.UpdatedByPrincipal AS Estab");
            viewString.Append("lishmentLocation_UpdatedByPrincipal, \r\n                            T.Version AS ");
            viewString.Append("EstablishmentLocation_Version, \r\n                            T.IsCurrent AS Esta");
            viewString.Append("blishmentLocation_IsCurrent, \r\n                            T.IsArchived AS Estab");
            viewString.Append("lishmentLocation_IsArchived, \r\n                            T.IsDeleted AS Establ");
            viewString.Append("ishmentLocation_IsDeleted, \r\n                            True AS _from0\r\n       ");
            viewString.Append("                 FROM CodeFirstDatabase.EstablishmentLocation AS T\r\n            ");
            viewString.Append("        ) AS T1\r\n                ) AS T2\r\n            ) AS T3\r\n        ) AS T4\r\n");
            viewString.Append("    ) AS T5");
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.EstablishmentLocations", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for UCosmicContext.EstablishmentAddresses
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView71()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2304);
            viewString.Append("\r\n    SELECT VALUE -- Constructing EstablishmentAddresses\r\n        [UCosmic.Orm.");
            viewString.Append("EstablishmentAddress](T1.EstablishmentAddress_RevisionId, T1.EstablishmentAddres");
            viewString.Append("s_Text, T1.EstablishmentAddress_EntityId, T1.EstablishmentAddress_CreatedOnUtc, ");
            viewString.Append("T1.EstablishmentAddress_CreatedByPrincipal, T1.EstablishmentAddress_UpdatedOnUtc");
            viewString.Append(", T1.EstablishmentAddress_UpdatedByPrincipal, T1.EstablishmentAddress_Version, T");
            viewString.Append("1.EstablishmentAddress_IsCurrent, T1.EstablishmentAddress_IsArchived, T1.Establi");
            viewString.Append("shmentAddress_IsDeleted) WITH \r\n        RELATIONSHIP(CREATEREF(UCosmicContext.La");
            viewString.Append("nguages, ROW(T1.[EstablishmentAddress_TranslationToLanguage.EstablishmentAddress");
            viewString.Append("_TranslationToLanguage_Target.RevisionId]),[UCosmic.Orm.Language]),[UCosmic.Orm.");
            viewString.Append("EstablishmentAddress_TranslationToLanguage],EstablishmentAddress_TranslationToLa");
            viewString.Append("nguage_Source,EstablishmentAddress_TranslationToLanguage_Target) \r\n        RELAT");
            viewString.Append("IONSHIP(CREATEREF(UCosmicContext.EstablishmentLocations, ROW(T1.[EstablishmentLo");
            viewString.Append("cation_Addresses.EstablishmentLocation_Addresses_Source.RevisionId]),[UCosmic.Or");
            viewString.Append("m.EstablishmentLocation]),[UCosmic.Orm.EstablishmentLocation_Addresses],Establis");
            viewString.Append("hmentLocation_Addresses_Target,EstablishmentLocation_Addresses_Source) \r\n    FRO");
            viewString.Append("M (\r\n        SELECT \r\n            T.RevisionId AS EstablishmentAddress_RevisionI");
            viewString.Append("d, \r\n            T.Text AS EstablishmentAddress_Text, \r\n            T.EntityId A");
            viewString.Append("S EstablishmentAddress_EntityId, \r\n            T.CreatedOnUtc AS EstablishmentAd");
            viewString.Append("dress_CreatedOnUtc, \r\n            T.CreatedByPrincipal AS EstablishmentAddress_C");
            viewString.Append("reatedByPrincipal, \r\n            T.UpdatedOnUtc AS EstablishmentAddress_UpdatedO");
            viewString.Append("nUtc, \r\n            T.UpdatedByPrincipal AS EstablishmentAddress_UpdatedByPrinci");
            viewString.Append("pal, \r\n            T.Version AS EstablishmentAddress_Version, \r\n            T.Is");
            viewString.Append("Current AS EstablishmentAddress_IsCurrent, \r\n            T.IsArchived AS Establi");
            viewString.Append("shmentAddress_IsArchived, \r\n            T.IsDeleted AS EstablishmentAddress_IsDe");
            viewString.Append("leted, \r\n            True AS _from0, \r\n            T.TranslationToLanguageId AS ");
            viewString.Append("[EstablishmentAddress_TranslationToLanguage.EstablishmentAddress_TranslationToLa");
            viewString.Append("nguage_Target.RevisionId], \r\n            T.EstablishmentLocationId AS [Establish");
            viewString.Append("mentLocation_Addresses.EstablishmentLocation_Addresses_Source.RevisionId]\r\n     ");
            viewString.Append("   FROM CodeFirstDatabase.EstablishmentAddress AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.EstablishmentAddresses", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for UCosmicContext.EstablishmentSamlSignOns
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView72()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.EstablishmentSamlSignOns", @"
    SELECT VALUE -- Constructing EstablishmentSamlSignOns
        [UCosmic.Orm.EstablishmentSamlSignOn](T1.EstablishmentSamlSignOn_Id, T1.EstablishmentSamlSignOn_EntityId, T1.EstablishmentSamlSignOn_MetadataUrl, T1.EstablishmentSamlSignOn_MetadataXml, T1.EstablishmentSamlSignOn_SsoLocation, T1.EstablishmentSamlSignOn_SsoBinding, T1.EstablishmentSamlSignOn_CreatedOnUtc, T1.EstablishmentSamlSignOn_UpdatedOnUtc)
    FROM (
        SELECT 
            T.Id AS EstablishmentSamlSignOn_Id, 
            T.EntityId AS EstablishmentSamlSignOn_EntityId, 
            T.MetadataUrl AS EstablishmentSamlSignOn_MetadataUrl, 
            T.MetadataXml AS EstablishmentSamlSignOn_MetadataXml, 
            T.SsoLocation AS EstablishmentSamlSignOn_SsoLocation, 
            T.SsoBinding AS EstablishmentSamlSignOn_SsoBinding, 
            T.CreatedOnUtc AS EstablishmentSamlSignOn_CreatedOnUtc, 
            T.UpdatedOnUtc AS EstablishmentSamlSignOn_UpdatedOnUtc, 
            True AS _from0
        FROM CodeFirstDatabase.EstablishmentSamlSignOn AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.EstablishmentTypes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView73()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.EstablishmentTypes", @"
    SELECT VALUE -- Constructing EstablishmentTypes
        [UCosmic.Orm.EstablishmentType](T1.EstablishmentType_RevisionId, T1.EstablishmentType_CategoryId, T1.EstablishmentType_EnglishName, T1.EstablishmentType_EnglishPluralName, T1.EstablishmentType_EntityId, T1.EstablishmentType_CreatedOnUtc, T1.EstablishmentType_CreatedByPrincipal, T1.EstablishmentType_UpdatedOnUtc, T1.EstablishmentType_UpdatedByPrincipal, T1.EstablishmentType_Version, T1.EstablishmentType_IsCurrent, T1.EstablishmentType_IsArchived, T1.EstablishmentType_IsDeleted)
    FROM (
        SELECT 
            T.RevisionId AS EstablishmentType_RevisionId, 
            T.CategoryId AS EstablishmentType_CategoryId, 
            T.EnglishName AS EstablishmentType_EnglishName, 
            T.EnglishPluralName AS EstablishmentType_EnglishPluralName, 
            T.EntityId AS EstablishmentType_EntityId, 
            T.CreatedOnUtc AS EstablishmentType_CreatedOnUtc, 
            T.CreatedByPrincipal AS EstablishmentType_CreatedByPrincipal, 
            T.UpdatedOnUtc AS EstablishmentType_UpdatedOnUtc, 
            T.UpdatedByPrincipal AS EstablishmentType_UpdatedByPrincipal, 
            T.Version AS EstablishmentType_Version, 
            T.IsCurrent AS EstablishmentType_IsCurrent, 
            T.IsArchived AS EstablishmentType_IsArchived, 
            T.IsDeleted AS EstablishmentType_IsDeleted, 
            True AS _from0
        FROM CodeFirstDatabase.EstablishmentType AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.EstablishmentCategories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView74()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.EstablishmentCategories", "\r\n    SELECT VALUE -- Constructing EstablishmentCategories\r\n        [UCosmic.Orm." +
                    "EstablishmentCategory](T1.EstablishmentCategory_RevisionId, T1.EstablishmentCate" +
                    "gory_EnglishName, T1.EstablishmentCategory_EnglishPluralName, T1.EstablishmentCa" +
                    "tegory_Code, T1.EstablishmentCategory_EntityId, T1.EstablishmentCategory_Created" +
                    "OnUtc, T1.EstablishmentCategory_CreatedByPrincipal, T1.EstablishmentCategory_Upd" +
                    "atedOnUtc, T1.EstablishmentCategory_UpdatedByPrincipal, T1.EstablishmentCategory" +
                    "_Version, T1.EstablishmentCategory_IsCurrent, T1.EstablishmentCategory_IsArchive" +
                    "d, T1.EstablishmentCategory_IsDeleted)\r\n    FROM (\r\n        SELECT \r\n           " +
                    " T.RevisionId AS EstablishmentCategory_RevisionId, \r\n            T.EnglishName A" +
                    "S EstablishmentCategory_EnglishName, \r\n            T.EnglishPluralName AS Establ" +
                    "ishmentCategory_EnglishPluralName, \r\n            T.Code AS EstablishmentCategory" +
                    "_Code, \r\n            T.EntityId AS EstablishmentCategory_EntityId, \r\n           " +
                    " T.CreatedOnUtc AS EstablishmentCategory_CreatedOnUtc, \r\n            T.CreatedBy" +
                    "Principal AS EstablishmentCategory_CreatedByPrincipal, \r\n            T.UpdatedOn" +
                    "Utc AS EstablishmentCategory_UpdatedOnUtc, \r\n            T.UpdatedByPrincipal AS" +
                    " EstablishmentCategory_UpdatedByPrincipal, \r\n            T.Version AS Establishm" +
                    "entCategory_Version, \r\n            T.IsCurrent AS EstablishmentCategory_IsCurren" +
                    "t, \r\n            T.IsArchived AS EstablishmentCategory_IsArchived, \r\n           " +
                    " T.IsDeleted AS EstablishmentCategory_IsDeleted, \r\n            True AS _from0\r\n " +
                    "       FROM CodeFirstDatabase.EstablishmentCategory AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.EstablishmentEmailDomains
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView75()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.EstablishmentEmailDomains", "\r\n    SELECT VALUE -- Constructing EstablishmentEmailDomains\r\n        [UCosmic.Or" +
                    "m.EstablishmentEmailDomain](T1.EstablishmentEmailDomain_RevisionId, T1.Establish" +
                    "mentEmailDomain_Value, T1.EstablishmentEmailDomain_EstablishmentId, T1.Establish" +
                    "mentEmailDomain_EntityId, T1.EstablishmentEmailDomain_CreatedOnUtc, T1.Establish" +
                    "mentEmailDomain_CreatedByPrincipal, T1.EstablishmentEmailDomain_UpdatedOnUtc, T1" +
                    ".EstablishmentEmailDomain_UpdatedByPrincipal, T1.EstablishmentEmailDomain_Versio" +
                    "n, T1.EstablishmentEmailDomain_IsCurrent, T1.EstablishmentEmailDomain_IsArchived" +
                    ", T1.EstablishmentEmailDomain_IsDeleted)\r\n    FROM (\r\n        SELECT \r\n         " +
                    "   T.RevisionId AS EstablishmentEmailDomain_RevisionId, \r\n            T.[Value] " +
                    "AS EstablishmentEmailDomain_Value, \r\n            T.EstablishmentId AS Establishm" +
                    "entEmailDomain_EstablishmentId, \r\n            T.EntityId AS EstablishmentEmailDo" +
                    "main_EntityId, \r\n            T.CreatedOnUtc AS EstablishmentEmailDomain_CreatedO" +
                    "nUtc, \r\n            T.CreatedByPrincipal AS EstablishmentEmailDomain_CreatedByPr" +
                    "incipal, \r\n            T.UpdatedOnUtc AS EstablishmentEmailDomain_UpdatedOnUtc, " +
                    "\r\n            T.UpdatedByPrincipal AS EstablishmentEmailDomain_UpdatedByPrincipa" +
                    "l, \r\n            T.Version AS EstablishmentEmailDomain_Version, \r\n            T." +
                    "IsCurrent AS EstablishmentEmailDomain_IsCurrent, \r\n            T.IsArchived AS E" +
                    "stablishmentEmailDomain_IsArchived, \r\n            T.IsDeleted AS EstablishmentEm" +
                    "ailDomain_IsDeleted, \r\n            True AS _from0\r\n        FROM CodeFirstDatabas" +
                    "e.EstablishmentEmailDomain AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.Affiliations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView76()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2133);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Affiliations\r\n        [UCosmic.Orm.Affiliatio");
            viewString.Append("n](T1.Affiliation_RevisionId, T1.Affiliation_PersonId, T1.Affiliation_Establishm");
            viewString.Append("entId, T1.Affiliation_JobTitles, T1.Affiliation_IsDefault, T1.Affiliation_IsAckn");
            viewString.Append("owledged, T1.Affiliation_IsClaimingStudent, T1.Affiliation_IsClaimingEmployee, T");
            viewString.Append("1.Affiliation_IsClaimingInternationalOffice, T1.Affiliation_IsClaimingAdministra");
            viewString.Append("tor, T1.Affiliation_IsClaimingFaculty, T1.Affiliation_IsClaimingStaff, T1.Affili");
            viewString.Append("ation_EntityId, T1.Affiliation_CreatedOnUtc, T1.Affiliation_CreatedByPrincipal, ");
            viewString.Append("T1.Affiliation_UpdatedOnUtc, T1.Affiliation_UpdatedByPrincipal, T1.Affiliation_V");
            viewString.Append("ersion, T1.Affiliation_IsCurrent, T1.Affiliation_IsArchived, T1.Affiliation_IsDe");
            viewString.Append("leted)\r\n    FROM (\r\n        SELECT \r\n            T.RevisionId AS Affiliation_Rev");
            viewString.Append("isionId, \r\n            T.PersonId AS Affiliation_PersonId, \r\n            T.Estab");
            viewString.Append("lishmentId AS Affiliation_EstablishmentId, \r\n            T.JobTitles AS Affiliat");
            viewString.Append("ion_JobTitles, \r\n            T.IsDefault AS Affiliation_IsDefault, \r\n           ");
            viewString.Append(" T.IsAcknowledged AS Affiliation_IsAcknowledged, \r\n            T.IsClaimingStude");
            viewString.Append("nt AS Affiliation_IsClaimingStudent, \r\n            T.IsClaimingEmployee AS Affil");
            viewString.Append("iation_IsClaimingEmployee, \r\n            T.IsClaimingInternationalOffice AS Affi");
            viewString.Append("liation_IsClaimingInternationalOffice, \r\n            T.IsClaimingAdministrator A");
            viewString.Append("S Affiliation_IsClaimingAdministrator, \r\n            T.IsClaimingFaculty AS Affi");
            viewString.Append("liation_IsClaimingFaculty, \r\n            T.IsClaimingStaff AS Affiliation_IsClai");
            viewString.Append("mingStaff, \r\n            T.EntityId AS Affiliation_EntityId, \r\n            T.Cre");
            viewString.Append("atedOnUtc AS Affiliation_CreatedOnUtc, \r\n            T.CreatedByPrincipal AS Aff");
            viewString.Append("iliation_CreatedByPrincipal, \r\n            T.UpdatedOnUtc AS Affiliation_Updated");
            viewString.Append("OnUtc, \r\n            T.UpdatedByPrincipal AS Affiliation_UpdatedByPrincipal, \r\n ");
            viewString.Append("           T.Version AS Affiliation_Version, \r\n            T.IsCurrent AS Affili");
            viewString.Append("ation_IsCurrent, \r\n            T.IsArchived AS Affiliation_IsArchived, \r\n       ");
            viewString.Append("     T.IsDeleted AS Affiliation_IsDeleted, \r\n            True AS _from0\r\n       ");
            viewString.Append(" FROM CodeFirstDatabase.Affiliation AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.Affiliations", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for UCosmicContext.People
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView77()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.People", @"
    SELECT VALUE -- Constructing People
        [UCosmic.Orm.Person](T1.Person_RevisionId, T1.Person_IsDisplayNameDerived, T1.Person_DisplayName, T1.Person_Salutation, T1.Person_FirstName, T1.Person_MiddleName, T1.Person_LastName, T1.Person_Suffix, T1.Person_EntityId, T1.Person_CreatedOnUtc, T1.Person_CreatedByPrincipal, T1.Person_UpdatedOnUtc, T1.Person_UpdatedByPrincipal, T1.Person_Version, T1.Person_IsCurrent, T1.Person_IsArchived, T1.Person_IsDeleted)
    FROM (
        SELECT 
            T.RevisionId AS Person_RevisionId, 
            T.IsDisplayNameDerived AS Person_IsDisplayNameDerived, 
            T.DisplayName AS Person_DisplayName, 
            T.Salutation AS Person_Salutation, 
            T.FirstName AS Person_FirstName, 
            T.MiddleName AS Person_MiddleName, 
            T.LastName AS Person_LastName, 
            T.Suffix AS Person_Suffix, 
            T.EntityId AS Person_EntityId, 
            T.CreatedOnUtc AS Person_CreatedOnUtc, 
            T.CreatedByPrincipal AS Person_CreatedByPrincipal, 
            T.UpdatedOnUtc AS Person_UpdatedOnUtc, 
            T.UpdatedByPrincipal AS Person_UpdatedByPrincipal, 
            T.Version AS Person_Version, 
            T.IsCurrent AS Person_IsCurrent, 
            T.IsArchived AS Person_IsArchived, 
            T.IsDeleted AS Person_IsDeleted, 
            True AS _from0
        FROM CodeFirstDatabase.Person AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.EmailAddresses
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView78()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.EmailAddresses", @"
    SELECT VALUE -- Constructing EmailAddresses
        [UCosmic.Orm.EmailAddress](T1.EmailAddress_RevisionId, T1.EmailAddress_PersonId, T1.EmailAddress_Value, T1.EmailAddress_IsDefault, T1.EmailAddress_IsConfirmed, T1.EmailAddress_EntityId, T1.EmailAddress_CreatedOnUtc, T1.EmailAddress_CreatedByPrincipal, T1.EmailAddress_UpdatedOnUtc, T1.EmailAddress_UpdatedByPrincipal, T1.EmailAddress_Version, T1.EmailAddress_IsCurrent, T1.EmailAddress_IsArchived, T1.EmailAddress_IsDeleted)
    FROM (
        SELECT 
            T.RevisionId AS EmailAddress_RevisionId, 
            T.PersonId AS EmailAddress_PersonId, 
            T.[Value] AS EmailAddress_Value, 
            T.IsDefault AS EmailAddress_IsDefault, 
            T.IsConfirmed AS EmailAddress_IsConfirmed, 
            T.EntityId AS EmailAddress_EntityId, 
            T.CreatedOnUtc AS EmailAddress_CreatedOnUtc, 
            T.CreatedByPrincipal AS EmailAddress_CreatedByPrincipal, 
            T.UpdatedOnUtc AS EmailAddress_UpdatedOnUtc, 
            T.UpdatedByPrincipal AS EmailAddress_UpdatedByPrincipal, 
            T.Version AS EmailAddress_Version, 
            T.IsCurrent AS EmailAddress_IsCurrent, 
            T.IsArchived AS EmailAddress_IsArchived, 
            T.IsDeleted AS EmailAddress_IsDeleted, 
            True AS _from0
        FROM CodeFirstDatabase.EmailAddress AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.EmailMessages
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView79()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.EmailMessages", "\r\n    SELECT VALUE -- Constructing EmailMessages\r\n        [UCosmic.Orm.EmailMessa" +
                    "ge](T1.EmailMessage_Id, T1.EmailMessage_EntityId, T1.EmailMessage_ToEmailAddress" +
                    "Id, T1.EmailMessage_FromEmailTemplateId, T1.EmailMessage_Subject, T1.EmailMessag" +
                    "e_FromAddress, T1.EmailMessage_FromDisplayName, T1.EmailMessage_ReplyToAddress, " +
                    "T1.EmailMessage_ReplyToDisplayName, T1.EmailMessage_Body, T1.EmailMessage_Compos" +
                    "edByPrincipal, T1.EmailMessage_ComposedOnUtc, T1.EmailMessage_SentOnUtc, T1.Emai" +
                    "lMessage_IsArchived, T1.EmailMessage_IsDeleted)\r\n    FROM (\r\n        SELECT \r\n  " +
                    "          T.Id AS EmailMessage_Id, \r\n            T.EntityId AS EmailMessage_Enti" +
                    "tyId, \r\n            T.ToEmailAddressId AS EmailMessage_ToEmailAddressId, \r\n     " +
                    "       T.FromEmailTemplateId AS EmailMessage_FromEmailTemplateId, \r\n            " +
                    "T.Subject AS EmailMessage_Subject, \r\n            T.FromAddress AS EmailMessage_F" +
                    "romAddress, \r\n            T.FromDisplayName AS EmailMessage_FromDisplayName, \r\n " +
                    "           T.ReplyToAddress AS EmailMessage_ReplyToAddress, \r\n            T.Repl" +
                    "yToDisplayName AS EmailMessage_ReplyToDisplayName, \r\n            T.Body AS Email" +
                    "Message_Body, \r\n            T.ComposedByPrincipal AS EmailMessage_ComposedByPrin" +
                    "cipal, \r\n            T.ComposedOnUtc AS EmailMessage_ComposedOnUtc, \r\n          " +
                    "  T.SentOnUtc AS EmailMessage_SentOnUtc, \r\n            T.IsArchived AS EmailMess" +
                    "age_IsArchived, \r\n            T.IsDeleted AS EmailMessage_IsDeleted, \r\n         " +
                    "   True AS _from0\r\n        FROM CodeFirstDatabase.EmailMessage AS T\r\n    ) AS T1" +
                    "");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.EmailTemplates
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView80()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.EmailTemplates", "\r\n    SELECT VALUE -- Constructing EmailTemplates\r\n        [UCosmic.Orm.EmailTemp" +
                    "late](T1.EmailTemplate_RevisionId, T1.EmailTemplate_EstablishmentId, T1.EmailTem" +
                    "plate_Name, T1.EmailTemplate_Instructions, T1.EmailTemplate_SubjectFormat, T1.Em" +
                    "ailTemplate_FromAddress, T1.EmailTemplate_FromDisplayName, T1.EmailTemplate_Repl" +
                    "yToAddress, T1.EmailTemplate_ReplyToDisplayName, T1.EmailTemplate_BodyFormat, T1" +
                    ".EmailTemplate_EntityId, T1.EmailTemplate_CreatedOnUtc, T1.EmailTemplate_Created" +
                    "ByPrincipal, T1.EmailTemplate_UpdatedOnUtc, T1.EmailTemplate_UpdatedByPrincipal," +
                    " T1.EmailTemplate_Version, T1.EmailTemplate_IsCurrent, T1.EmailTemplate_IsArchiv" +
                    "ed, T1.EmailTemplate_IsDeleted)\r\n    FROM (\r\n        SELECT \r\n            T.Revi" +
                    "sionId AS EmailTemplate_RevisionId, \r\n            T.EstablishmentId AS EmailTemp" +
                    "late_EstablishmentId, \r\n            T.Name AS EmailTemplate_Name, \r\n            " +
                    "T.Instructions AS EmailTemplate_Instructions, \r\n            T.SubjectFormat AS E" +
                    "mailTemplate_SubjectFormat, \r\n            T.FromAddress AS EmailTemplate_FromAdd" +
                    "ress, \r\n            T.FromDisplayName AS EmailTemplate_FromDisplayName, \r\n      " +
                    "      T.ReplyToAddress AS EmailTemplate_ReplyToAddress, \r\n            T.ReplyToD" +
                    "isplayName AS EmailTemplate_ReplyToDisplayName, \r\n            T.BodyFormat AS Em" +
                    "ailTemplate_BodyFormat, \r\n            T.EntityId AS EmailTemplate_EntityId, \r\n  " +
                    "          T.CreatedOnUtc AS EmailTemplate_CreatedOnUtc, \r\n            T.CreatedB" +
                    "yPrincipal AS EmailTemplate_CreatedByPrincipal, \r\n            T.UpdatedOnUtc AS " +
                    "EmailTemplate_UpdatedOnUtc, \r\n            T.UpdatedByPrincipal AS EmailTemplate_" +
                    "UpdatedByPrincipal, \r\n            T.Version AS EmailTemplate_Version, \r\n        " +
                    "    T.IsCurrent AS EmailTemplate_IsCurrent, \r\n            T.IsArchived AS EmailT" +
                    "emplate_IsArchived, \r\n            T.IsDeleted AS EmailTemplate_IsDeleted, \r\n    " +
                    "        True AS _from0\r\n        FROM CodeFirstDatabase.EmailTemplate AS T\r\n    )" +
                    " AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.EmailConfirmations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView81()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.EmailConfirmations", @"
    SELECT VALUE -- Constructing EmailConfirmations
        [UCosmic.Orm.EmailConfirmation](T1.EmailConfirmation_Id, T1.EmailConfirmation_EmailAddressId, T1.EmailConfirmation_Token, T1.EmailConfirmation_SecretCode, T1.EmailConfirmation_Intent, T1.EmailConfirmation_IssuedOnUtc, T1.EmailConfirmation_ConfirmedOnUtc, T1.EmailConfirmation_ExpiresOnUtc)
    FROM (
        SELECT 
            T.Id AS EmailConfirmation_Id, 
            T.EmailAddressId AS EmailConfirmation_EmailAddressId, 
            T.Token AS EmailConfirmation_Token, 
            T.SecretCode AS EmailConfirmation_SecretCode, 
            T.Intent AS EmailConfirmation_Intent, 
            T.IssuedOnUtc AS EmailConfirmation_IssuedOnUtc, 
            T.ConfirmedOnUtc AS EmailConfirmation_ConfirmedOnUtc, 
            T.ExpiresOnUtc AS EmailConfirmation_ExpiresOnUtc, 
            True AS _from0
        FROM CodeFirstDatabase.EmailConfirmation AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.InstitutionalAgreements
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView82()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2676);
            viewString.Append("\r\n    SELECT VALUE -- Constructing InstitutionalAgreements\r\n        [UCosmic.Orm");
            viewString.Append(".InstitutionalAgreement](T1.InstitutionalAgreement_RevisionId, T1.InstitutionalA");
            viewString.Append("greement_IsTitleDerived, T1.InstitutionalAgreement_Title, T1.InstitutionalAgreem");
            viewString.Append("ent_Type, T1.InstitutionalAgreement_StartsOn, T1.InstitutionalAgreement_ExpiresO");
            viewString.Append("n, T1.InstitutionalAgreement_IsExpirationEstimated, T1.InstitutionalAgreement_De");
            viewString.Append("scription, T1.InstitutionalAgreement_IsAutoRenew, T1.InstitutionalAgreement_Stat");
            viewString.Append("us, T1.InstitutionalAgreement_EntityId, T1.InstitutionalAgreement_CreatedOnUtc, ");
            viewString.Append("T1.InstitutionalAgreement_CreatedByPrincipal, T1.InstitutionalAgreement_UpdatedO");
            viewString.Append("nUtc, T1.InstitutionalAgreement_UpdatedByPrincipal, T1.InstitutionalAgreement_Ve");
            viewString.Append("rsion, T1.InstitutionalAgreement_IsCurrent, T1.InstitutionalAgreement_IsArchived");
            viewString.Append(", T1.InstitutionalAgreement_IsDeleted) WITH \r\n        RELATIONSHIP(CREATEREF(UCo");
            viewString.Append("smicContext.InstitutionalAgreements, ROW(T1.[InstitutionalAgreement_Umbrella.Ins");
            viewString.Append("titutionalAgreement_Umbrella_Target.RevisionId]),[UCosmic.Orm.InstitutionalAgree");
            viewString.Append("ment]),[UCosmic.Orm.InstitutionalAgreement_Umbrella],InstitutionalAgreement_Umbr");
            viewString.Append("ella_Source,InstitutionalAgreement_Umbrella_Target) \r\n    FROM (\r\n        SELECT");
            viewString.Append(" \r\n            T.RevisionId AS InstitutionalAgreement_RevisionId, \r\n            ");
            viewString.Append("T.IsTitleDerived AS InstitutionalAgreement_IsTitleDerived, \r\n            T.Title");
            viewString.Append(" AS InstitutionalAgreement_Title, \r\n            T.Type AS InstitutionalAgreement");
            viewString.Append("_Type, \r\n            T.StartsOn AS InstitutionalAgreement_StartsOn, \r\n          ");
            viewString.Append("  T.ExpiresOn AS InstitutionalAgreement_ExpiresOn, \r\n            T.IsExpirationE");
            viewString.Append("stimated AS InstitutionalAgreement_IsExpirationEstimated, \r\n            T.Descri");
            viewString.Append("ption AS InstitutionalAgreement_Description, \r\n            T.IsAutoRenew AS Inst");
            viewString.Append("itutionalAgreement_IsAutoRenew, \r\n            T.Status AS InstitutionalAgreement");
            viewString.Append("_Status, \r\n            T.EntityId AS InstitutionalAgreement_EntityId, \r\n        ");
            viewString.Append("    T.CreatedOnUtc AS InstitutionalAgreement_CreatedOnUtc, \r\n            T.Creat");
            viewString.Append("edByPrincipal AS InstitutionalAgreement_CreatedByPrincipal, \r\n            T.Upda");
            viewString.Append("tedOnUtc AS InstitutionalAgreement_UpdatedOnUtc, \r\n            T.UpdatedByPrinci");
            viewString.Append("pal AS InstitutionalAgreement_UpdatedByPrincipal, \r\n            T.Version AS Ins");
            viewString.Append("titutionalAgreement_Version, \r\n            T.IsCurrent AS InstitutionalAgreement");
            viewString.Append("_IsCurrent, \r\n            T.IsArchived AS InstitutionalAgreement_IsArchived, \r\n ");
            viewString.Append("           T.IsDeleted AS InstitutionalAgreement_IsDeleted, \r\n            True A");
            viewString.Append("S _from0, \r\n            T.UmbrellaId AS [InstitutionalAgreement_Umbrella.Institu");
            viewString.Append("tionalAgreement_Umbrella_Target.RevisionId]\r\n        FROM CodeFirstDatabase.Inst");
            viewString.Append("itutionalAgreement AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.InstitutionalAgreements", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for UCosmicContext.InstitutionalAgreementNodes
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView83()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.InstitutionalAgreementNodes", @"
    SELECT VALUE -- Constructing InstitutionalAgreementNodes
        [UCosmic.Orm.InstitutionalAgreementNode](T1.InstitutionalAgreementNode_AncestorId, T1.InstitutionalAgreementNode_OffspringId, T1.InstitutionalAgreementNode_Separation)
    FROM (
        SELECT 
            T.AncestorId AS InstitutionalAgreementNode_AncestorId, 
            T.OffspringId AS InstitutionalAgreementNode_OffspringId, 
            T.Separation AS InstitutionalAgreementNode_Separation, 
            True AS _from0
        FROM CodeFirstDatabase.InstitutionalAgreementNode AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.InstitutionalAgreementParticipants
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView84()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.InstitutionalAgreementParticipants", "\r\n    SELECT VALUE -- Constructing InstitutionalAgreementParticipants\r\n        [U" +
                    "Cosmic.Orm.InstitutionalAgreementParticipant](T1.InstitutionalAgreementParticipa" +
                    "nt_Id, T1.InstitutionalAgreementParticipant_IsOwner) WITH \r\n        RELATIONSHIP" +
                    "(CREATEREF(UCosmicContext.Establishments, ROW(T1.[InstitutionalAgreementParticip" +
                    "ant_Establishment.InstitutionalAgreementParticipant_Establishment_Target.Revisio" +
                    "nId]),[UCosmic.Orm.Establishment]),[UCosmic.Orm.InstitutionalAgreementParticipan" +
                    "t_Establishment],InstitutionalAgreementParticipant_Establishment_Source,Institut" +
                    "ionalAgreementParticipant_Establishment_Target) \r\n        RELATIONSHIP(CREATEREF" +
                    "(UCosmicContext.InstitutionalAgreements, ROW(T1.[InstitutionalAgreement_Particip" +
                    "ants.InstitutionalAgreement_Participants_Source.RevisionId]),[UCosmic.Orm.Instit" +
                    "utionalAgreement]),[UCosmic.Orm.InstitutionalAgreement_Participants],Institution" +
                    "alAgreement_Participants_Target,InstitutionalAgreement_Participants_Source) \r\n  " +
                    "  FROM (\r\n        SELECT \r\n            T.Id AS InstitutionalAgreementParticipant" +
                    "_Id, \r\n            T.IsOwner AS InstitutionalAgreementParticipant_IsOwner, \r\n   " +
                    "         True AS _from0, \r\n            T.EstablishmentId AS [InstitutionalAgreem" +
                    "entParticipant_Establishment.InstitutionalAgreementParticipant_Establishment_Tar" +
                    "get.RevisionId], \r\n            T.AgreementId AS [InstitutionalAgreement_Particip" +
                    "ants.InstitutionalAgreement_Participants_Source.RevisionId]\r\n        FROM CodeFi" +
                    "rstDatabase.InstitutionalAgreementParticipant AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.InstitutionalAgreementContacts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView85()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2456);
            viewString.Append("\r\n    SELECT VALUE -- Constructing InstitutionalAgreementContacts\r\n        [UCos");
            viewString.Append("mic.Orm.InstitutionalAgreementContact](T1.InstitutionalAgreementContact_Revision");
            viewString.Append("Id, T1.InstitutionalAgreementContact_Type, T1.InstitutionalAgreementContact_Enti");
            viewString.Append("tyId, T1.InstitutionalAgreementContact_CreatedOnUtc, T1.InstitutionalAgreementCo");
            viewString.Append("ntact_CreatedByPrincipal, T1.InstitutionalAgreementContact_UpdatedOnUtc, T1.Inst");
            viewString.Append("itutionalAgreementContact_UpdatedByPrincipal, T1.InstitutionalAgreementContact_V");
            viewString.Append("ersion, T1.InstitutionalAgreementContact_IsCurrent, T1.InstitutionalAgreementCon");
            viewString.Append("tact_IsArchived, T1.InstitutionalAgreementContact_IsDeleted) WITH \r\n        RELA");
            viewString.Append("TIONSHIP(CREATEREF(UCosmicContext.People, ROW(T1.[InstitutionalAgreementContact_");
            viewString.Append("Person.InstitutionalAgreementContact_Person_Target.RevisionId]),[UCosmic.Orm.Per");
            viewString.Append("son]),[UCosmic.Orm.InstitutionalAgreementContact_Person],InstitutionalAgreementC");
            viewString.Append("ontact_Person_Source,InstitutionalAgreementContact_Person_Target) \r\n        RELA");
            viewString.Append("TIONSHIP(CREATEREF(UCosmicContext.InstitutionalAgreements, ROW(T1.[Institutional");
            viewString.Append("Agreement_Contacts.InstitutionalAgreement_Contacts_Source.RevisionId]),[UCosmic.");
            viewString.Append("Orm.InstitutionalAgreement]),[UCosmic.Orm.InstitutionalAgreement_Contacts],Insti");
            viewString.Append("tutionalAgreement_Contacts_Target,InstitutionalAgreement_Contacts_Source) \r\n    ");
            viewString.Append("FROM (\r\n        SELECT \r\n            T.RevisionId AS InstitutionalAgreementConta");
            viewString.Append("ct_RevisionId, \r\n            T.Type AS InstitutionalAgreementContact_Type, \r\n   ");
            viewString.Append("         T.EntityId AS InstitutionalAgreementContact_EntityId, \r\n            T.C");
            viewString.Append("reatedOnUtc AS InstitutionalAgreementContact_CreatedOnUtc, \r\n            T.Creat");
            viewString.Append("edByPrincipal AS InstitutionalAgreementContact_CreatedByPrincipal, \r\n           ");
            viewString.Append(" T.UpdatedOnUtc AS InstitutionalAgreementContact_UpdatedOnUtc, \r\n            T.U");
            viewString.Append("pdatedByPrincipal AS InstitutionalAgreementContact_UpdatedByPrincipal, \r\n       ");
            viewString.Append("     T.Version AS InstitutionalAgreementContact_Version, \r\n            T.IsCurre");
            viewString.Append("nt AS InstitutionalAgreementContact_IsCurrent, \r\n            T.IsArchived AS Ins");
            viewString.Append("titutionalAgreementContact_IsArchived, \r\n            T.IsDeleted AS Institutiona");
            viewString.Append("lAgreementContact_IsDeleted, \r\n            True AS _from0, \r\n            T.Perso");
            viewString.Append("nId AS [InstitutionalAgreementContact_Person.InstitutionalAgreementContact_Perso");
            viewString.Append("n_Target.RevisionId], \r\n            T.AgreementId AS [InstitutionalAgreement_Con");
            viewString.Append("tacts.InstitutionalAgreement_Contacts_Source.RevisionId]\r\n        FROM CodeFirst");
            viewString.Append("Database.InstitutionalAgreementContact AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.InstitutionalAgreementContacts", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for UCosmicContext.InstitutionalAgreementFiles
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView86()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2223);
            viewString.Append("\r\n    SELECT VALUE -- Constructing InstitutionalAgreementFiles\r\n        [UCosmic");
            viewString.Append(".Orm.InstitutionalAgreementFile](T1.InstitutionalAgreementFile_RevisionId, T1.In");
            viewString.Append("stitutionalAgreementFile_Content, T1.InstitutionalAgreementFile_Length, T1.Insti");
            viewString.Append("tutionalAgreementFile_MimeType, T1.InstitutionalAgreementFile_Name, T1.Instituti");
            viewString.Append("onalAgreementFile_EntityId, T1.InstitutionalAgreementFile_CreatedOnUtc, T1.Insti");
            viewString.Append("tutionalAgreementFile_CreatedByPrincipal, T1.InstitutionalAgreementFile_UpdatedO");
            viewString.Append("nUtc, T1.InstitutionalAgreementFile_UpdatedByPrincipal, T1.InstitutionalAgreemen");
            viewString.Append("tFile_Version, T1.InstitutionalAgreementFile_IsCurrent, T1.InstitutionalAgreemen");
            viewString.Append("tFile_IsArchived, T1.InstitutionalAgreementFile_IsDeleted) WITH \r\n        RELATI");
            viewString.Append("ONSHIP(CREATEREF(UCosmicContext.InstitutionalAgreements, ROW(T1.[InstitutionalAg");
            viewString.Append("reement_Files.InstitutionalAgreement_Files_Source.RevisionId]),[UCosmic.Orm.Inst");
            viewString.Append("itutionalAgreement]),[UCosmic.Orm.InstitutionalAgreement_Files],InstitutionalAgr");
            viewString.Append("eement_Files_Target,InstitutionalAgreement_Files_Source) \r\n    FROM (\r\n        S");
            viewString.Append("ELECT \r\n            T.RevisionId AS InstitutionalAgreementFile_RevisionId, \r\n   ");
            viewString.Append("         T.Content AS InstitutionalAgreementFile_Content, \r\n            T.Length");
            viewString.Append(" AS InstitutionalAgreementFile_Length, \r\n            T.MimeType AS Institutional");
            viewString.Append("AgreementFile_MimeType, \r\n            T.Name AS InstitutionalAgreementFile_Name,");
            viewString.Append(" \r\n            T.EntityId AS InstitutionalAgreementFile_EntityId, \r\n            ");
            viewString.Append("T.CreatedOnUtc AS InstitutionalAgreementFile_CreatedOnUtc, \r\n            T.Creat");
            viewString.Append("edByPrincipal AS InstitutionalAgreementFile_CreatedByPrincipal, \r\n            T.");
            viewString.Append("UpdatedOnUtc AS InstitutionalAgreementFile_UpdatedOnUtc, \r\n            T.Updated");
            viewString.Append("ByPrincipal AS InstitutionalAgreementFile_UpdatedByPrincipal, \r\n            T.Ve");
            viewString.Append("rsion AS InstitutionalAgreementFile_Version, \r\n            T.IsCurrent AS Instit");
            viewString.Append("utionalAgreementFile_IsCurrent, \r\n            T.IsArchived AS InstitutionalAgree");
            viewString.Append("mentFile_IsArchived, \r\n            T.IsDeleted AS InstitutionalAgreementFile_IsD");
            viewString.Append("eleted, \r\n            True AS _from0, \r\n            T.AgreementId AS [Institutio");
            viewString.Append("nalAgreement_Files.InstitutionalAgreement_Files_Source.RevisionId]\r\n        FROM");
            viewString.Append(" CodeFirstDatabase.InstitutionalAgreementFile AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.InstitutionalAgreementFiles", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for UCosmicContext.InstitutionalAgreementConfigurations
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView87()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2250);
            viewString.Append("\r\n    SELECT VALUE -- Constructing InstitutionalAgreementConfigurations\r\n       ");
            viewString.Append(" [UCosmic.Orm.InstitutionalAgreementConfiguration](T1.InstitutionalAgreementConf");
            viewString.Append("iguration_RevisionId, T1.InstitutionalAgreementConfiguration_ForEstablishmentId,");
            viewString.Append(" T1.InstitutionalAgreementConfiguration_IsCustomTypeAllowed, T1.InstitutionalAgr");
            viewString.Append("eementConfiguration_IsCustomStatusAllowed, T1.InstitutionalAgreementConfiguratio");
            viewString.Append("n_IsCustomContactTypeAllowed, T1.InstitutionalAgreementConfiguration_EntityId, T");
            viewString.Append("1.InstitutionalAgreementConfiguration_CreatedOnUtc, T1.InstitutionalAgreementCon");
            viewString.Append("figuration_CreatedByPrincipal, T1.InstitutionalAgreementConfiguration_UpdatedOnU");
            viewString.Append("tc, T1.InstitutionalAgreementConfiguration_UpdatedByPrincipal, T1.InstitutionalA");
            viewString.Append("greementConfiguration_Version, T1.InstitutionalAgreementConfiguration_IsCurrent,");
            viewString.Append(" T1.InstitutionalAgreementConfiguration_IsArchived, T1.InstitutionalAgreementCon");
            viewString.Append("figuration_IsDeleted)\r\n    FROM (\r\n        SELECT \r\n            T.RevisionId AS ");
            viewString.Append("InstitutionalAgreementConfiguration_RevisionId, \r\n            T.ForEstablishment");
            viewString.Append("Id AS InstitutionalAgreementConfiguration_ForEstablishmentId, \r\n            T.Is");
            viewString.Append("CustomTypeAllowed AS InstitutionalAgreementConfiguration_IsCustomTypeAllowed, \r\n");
            viewString.Append("            T.IsCustomStatusAllowed AS InstitutionalAgreementConfiguration_IsCus");
            viewString.Append("tomStatusAllowed, \r\n            T.IsCustomContactTypeAllowed AS InstitutionalAgr");
            viewString.Append("eementConfiguration_IsCustomContactTypeAllowed, \r\n            T.EntityId AS Inst");
            viewString.Append("itutionalAgreementConfiguration_EntityId, \r\n            T.CreatedOnUtc AS Instit");
            viewString.Append("utionalAgreementConfiguration_CreatedOnUtc, \r\n            T.CreatedByPrincipal A");
            viewString.Append("S InstitutionalAgreementConfiguration_CreatedByPrincipal, \r\n            T.Update");
            viewString.Append("dOnUtc AS InstitutionalAgreementConfiguration_UpdatedOnUtc, \r\n            T.Upda");
            viewString.Append("tedByPrincipal AS InstitutionalAgreementConfiguration_UpdatedByPrincipal, \r\n    ");
            viewString.Append("        T.Version AS InstitutionalAgreementConfiguration_Version, \r\n            ");
            viewString.Append("T.IsCurrent AS InstitutionalAgreementConfiguration_IsCurrent, \r\n            T.Is");
            viewString.Append("Archived AS InstitutionalAgreementConfiguration_IsArchived, \r\n            T.IsDe");
            viewString.Append("leted AS InstitutionalAgreementConfiguration_IsDeleted, \r\n            True AS _f");
            viewString.Append("rom0\r\n        FROM CodeFirstDatabase.InstitutionalAgreementConfiguration AS T\r\n ");
            viewString.Append("   ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.InstitutionalAgreementConfigurations", viewString.ToString());
        }
        
        /// <Summary>
        /// return view for UCosmicContext.InstitutionalAgreementTypeValues
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView88()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.InstitutionalAgreementTypeValues", @"
    SELECT VALUE -- Constructing InstitutionalAgreementTypeValues
        [UCosmic.Orm.InstitutionalAgreementTypeValue](T1.InstitutionalAgreementTypeValue_Id, T1.InstitutionalAgreementTypeValue_ConfigurationId, T1.InstitutionalAgreementTypeValue_Text)
    FROM (
        SELECT 
            T.Id AS InstitutionalAgreementTypeValue_Id, 
            T.ConfigurationId AS InstitutionalAgreementTypeValue_ConfigurationId, 
            T.Text AS InstitutionalAgreementTypeValue_Text, 
            True AS _from0
        FROM CodeFirstDatabase.InstitutionalAgreementTypeValue AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.InstitutionalAgreementStatusValues
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView89()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.InstitutionalAgreementStatusValues", @"
    SELECT VALUE -- Constructing InstitutionalAgreementStatusValues
        [UCosmic.Orm.InstitutionalAgreementStatusValue](T1.InstitutionalAgreementStatusValue_Id, T1.InstitutionalAgreementStatusValue_ConfigurationId, T1.InstitutionalAgreementStatusValue_Text)
    FROM (
        SELECT 
            T.Id AS InstitutionalAgreementStatusValue_Id, 
            T.ConfigurationId AS InstitutionalAgreementStatusValue_ConfigurationId, 
            T.Text AS InstitutionalAgreementStatusValue_Text, 
            True AS _from0
        FROM CodeFirstDatabase.InstitutionalAgreementStatusValue AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.InstitutionalAgreementContactTypeValues
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView90()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.InstitutionalAgreementContactTypeValues", @"
    SELECT VALUE -- Constructing InstitutionalAgreementContactTypeValues
        [UCosmic.Orm.InstitutionalAgreementContactTypeValue](T1.InstitutionalAgreementContactTypeValue_Id, T1.InstitutionalAgreementContactTypeValue_ConfigurationId, T1.InstitutionalAgreementContactTypeValue_Text)
    FROM (
        SELECT 
            T.Id AS InstitutionalAgreementContactTypeValue_Id, 
            T.ConfigurationId AS InstitutionalAgreementContactTypeValue_ConfigurationId, 
            T.Text AS InstitutionalAgreementContactTypeValue_Text, 
            True AS _from0
        FROM CodeFirstDatabase.InstitutionalAgreementContactTypeValue AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.LanguageName_NameForLanguage
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView91()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.LanguageName_NameForLanguage", "\r\n    SELECT VALUE -- Constructing LanguageName_NameForLanguage\r\n        [UCosmic" +
                    ".Orm.LanguageName_NameForLanguage](T3.[LanguageName_NameForLanguage.LanguageName" +
                    "_NameForLanguage_Source], T3.[LanguageName_NameForLanguage.LanguageName_NameForL" +
                    "anguage_Target])\r\n    FROM (\r\n        SELECT -- Constructing LanguageName_NameFo" +
                    "rLanguage_Source\r\n            CreateRef(UCosmicContext.LanguageNames, row(T2.[La" +
                    "nguageName_NameForLanguage.LanguageName_NameForLanguage_Source.RevisionId]), [UC" +
                    "osmic.Orm.LanguageName]) AS [LanguageName_NameForLanguage.LanguageName_NameForLa" +
                    "nguage_Source], \r\n            T2.[LanguageName_NameForLanguage.LanguageName_Name" +
                    "ForLanguage_Target]\r\n        FROM (\r\n            SELECT -- Constructing Language" +
                    "Name_NameForLanguage_Target\r\n                T1.[LanguageName_NameForLanguage.La" +
                    "nguageName_NameForLanguage_Source.RevisionId], \r\n                CreateRef(UCosm" +
                    "icContext.Languages, row(T1.[LanguageName_NameForLanguage.LanguageName_NameForLa" +
                    "nguage_Target.RevisionId]), [UCosmic.Orm.Language]) AS [LanguageName_NameForLang" +
                    "uage.LanguageName_NameForLanguage_Target]\r\n            FROM (\r\n                S" +
                    "ELECT \r\n                    T.RevisionId AS [LanguageName_NameForLanguage.Langua" +
                    "geName_NameForLanguage_Source.RevisionId], \r\n                    T.NameForLangua" +
                    "geId AS [LanguageName_NameForLanguage.LanguageName_NameForLanguage_Target.Revisi" +
                    "onId], \r\n                    True AS _from0\r\n                FROM CodeFirstDatab" +
                    "ase.LanguageName AS T\r\n            ) AS T1\r\n        ) AS T2\r\n    ) AS T3");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.LanguageName_TranslationToLanguage
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView92()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.LanguageName_TranslationToLanguage", "\r\n    SELECT VALUE -- Constructing LanguageName_TranslationToLanguage\r\n        [U" +
                    "Cosmic.Orm.LanguageName_TranslationToLanguage](T3.[LanguageName_TranslationToLan" +
                    "guage.LanguageName_TranslationToLanguage_Source], T3.[LanguageName_TranslationTo" +
                    "Language.LanguageName_TranslationToLanguage_Target])\r\n    FROM (\r\n        SELECT" +
                    " -- Constructing LanguageName_TranslationToLanguage_Source\r\n            CreateRe" +
                    "f(UCosmicContext.LanguageNames, row(T2.[LanguageName_TranslationToLanguage.Langu" +
                    "ageName_TranslationToLanguage_Source.RevisionId]), [UCosmic.Orm.LanguageName]) A" +
                    "S [LanguageName_TranslationToLanguage.LanguageName_TranslationToLanguage_Source]" +
                    ", \r\n            T2.[LanguageName_TranslationToLanguage.LanguageName_TranslationT" +
                    "oLanguage_Target]\r\n        FROM (\r\n            SELECT -- Constructing LanguageNa" +
                    "me_TranslationToLanguage_Target\r\n                T1.[LanguageName_TranslationToL" +
                    "anguage.LanguageName_TranslationToLanguage_Source.RevisionId], \r\n               " +
                    " CreateRef(UCosmicContext.Languages, row(T1.[LanguageName_TranslationToLanguage." +
                    "LanguageName_TranslationToLanguage_Target.RevisionId]), [UCosmic.Orm.Language]) " +
                    "AS [LanguageName_TranslationToLanguage.LanguageName_TranslationToLanguage_Target" +
                    "]\r\n            FROM (\r\n                SELECT \r\n                    T.RevisionId" +
                    " AS [LanguageName_TranslationToLanguage.LanguageName_TranslationToLanguage_Sourc" +
                    "e.RevisionId], \r\n                    T.TranslationToLanguageId AS [LanguageName_" +
                    "TranslationToLanguage.LanguageName_TranslationToLanguage_Target.RevisionId], \r\n " +
                    "                   True AS _from0\r\n                FROM CodeFirstDatabase.Langua" +
                    "geName AS T\r\n            ) AS T1\r\n        ) AS T2\r\n    ) AS T3");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.Place_Parent
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView93()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.Place_Parent", @"
    SELECT VALUE -- Constructing Place_Parent
        [UCosmic.Orm.Place_Parent](T3.[Place_Parent.Place_Parent_Source], T3.[Place_Parent.Place_Parent_Target])
    FROM (
        SELECT -- Constructing Place_Parent_Source
            CreateRef(UCosmicContext.Places, row(T2.[Place_Parent.Place_Parent_Source.RevisionId]), [UCosmic.Orm.Place]) AS [Place_Parent.Place_Parent_Source], 
            T2.[Place_Parent.Place_Parent_Target]
        FROM (
            SELECT -- Constructing Place_Parent_Target
                T1.[Place_Parent.Place_Parent_Source.RevisionId], 
                CreateRef(UCosmicContext.Places, row(T1.[Place_Parent.Place_Parent_Target.RevisionId]), [UCosmic.Orm.Place]) AS [Place_Parent.Place_Parent_Target]
            FROM (
                SELECT 
                    T.RevisionId AS [Place_Parent.Place_Parent_Source.RevisionId], 
                    T.ParentId AS [Place_Parent.Place_Parent_Target.RevisionId], 
                    True AS _from0
                FROM CodeFirstDatabase.Place AS T
                WHERE T.ParentId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.GeoNamesToponym_Place
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView94()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.GeoNamesToponym_Place", @"
    SELECT VALUE -- Constructing GeoNamesToponym_Place
        [UCosmic.Orm.GeoNamesToponym_Place](T3.[GeoNamesToponym_Place.GeoNamesToponym_Place_Target], T3.[GeoNamesToponym_Place.GeoNamesToponym_Place_Source])
    FROM (
        SELECT -- Constructing GeoNamesToponym_Place_Target
            CreateRef(UCosmicContext.Places, row(T2.[GeoNamesToponym_Place.GeoNamesToponym_Place_Target.RevisionId]), [UCosmic.Orm.Place]) AS [GeoNamesToponym_Place.GeoNamesToponym_Place_Target], 
            T2.[GeoNamesToponym_Place.GeoNamesToponym_Place_Source]
        FROM (
            SELECT -- Constructing GeoNamesToponym_Place_Source
                T1.[GeoNamesToponym_Place.GeoNamesToponym_Place_Target.RevisionId], 
                CreateRef(UCosmicContext.GeoNamesToponyms, row(T1.[GeoNamesToponym_Place.GeoNamesToponym_Place_Source.GeoNameId]), [UCosmic.Orm.GeoNamesToponym]) AS [GeoNamesToponym_Place.GeoNamesToponym_Place_Source]
            FROM (
                SELECT 
                    T.PlaceId AS [GeoNamesToponym_Place.GeoNamesToponym_Place_Target.RevisionId], 
                    T.GeoNameId AS [GeoNamesToponym_Place.GeoNamesToponym_Place_Source.GeoNameId], 
                    True AS _from0
                FROM CodeFirstDatabase.GeoNamesToponym AS T
                WHERE T.PlaceId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.GeoNamesToponym_Parent
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView95()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.GeoNamesToponym_Parent", @"
    SELECT VALUE -- Constructing GeoNamesToponym_Parent
        [UCosmic.Orm.GeoNamesToponym_Parent](T3.[GeoNamesToponym_Parent.GeoNamesToponym_Parent_Source], T3.[GeoNamesToponym_Parent.GeoNamesToponym_Parent_Target])
    FROM (
        SELECT -- Constructing GeoNamesToponym_Parent_Source
            CreateRef(UCosmicContext.GeoNamesToponyms, row(T2.[GeoNamesToponym_Parent.GeoNamesToponym_Parent_Source.GeoNameId]), [UCosmic.Orm.GeoNamesToponym]) AS [GeoNamesToponym_Parent.GeoNamesToponym_Parent_Source], 
            T2.[GeoNamesToponym_Parent.GeoNamesToponym_Parent_Target]
        FROM (
            SELECT -- Constructing GeoNamesToponym_Parent_Target
                T1.[GeoNamesToponym_Parent.GeoNamesToponym_Parent_Source.GeoNameId], 
                CreateRef(UCosmicContext.GeoNamesToponyms, row(T1.[GeoNamesToponym_Parent.GeoNamesToponym_Parent_Target.GeoNameId]), [UCosmic.Orm.GeoNamesToponym]) AS [GeoNamesToponym_Parent.GeoNamesToponym_Parent_Target]
            FROM (
                SELECT 
                    T.GeoNameId AS [GeoNamesToponym_Parent.GeoNamesToponym_Parent_Source.GeoNameId], 
                    T.ParentGeoNameId AS [GeoNamesToponym_Parent.GeoNamesToponym_Parent_Target.GeoNameId], 
                    True AS _from0
                FROM CodeFirstDatabase.GeoNamesToponym AS T
                WHERE T.ParentGeoNameId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.GeoPlanetPlace_Parent
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView96()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.GeoPlanetPlace_Parent", @"
    SELECT VALUE -- Constructing GeoPlanetPlace_Parent
        [UCosmic.Orm.GeoPlanetPlace_Parent](T3.[GeoPlanetPlace_Parent.GeoPlanetPlace_Parent_Source], T3.[GeoPlanetPlace_Parent.GeoPlanetPlace_Parent_Target])
    FROM (
        SELECT -- Constructing GeoPlanetPlace_Parent_Source
            CreateRef(UCosmicContext.GeoPlanetPlaces, row(T2.[GeoPlanetPlace_Parent.GeoPlanetPlace_Parent_Source.WoeId]), [UCosmic.Orm.GeoPlanetPlace]) AS [GeoPlanetPlace_Parent.GeoPlanetPlace_Parent_Source], 
            T2.[GeoPlanetPlace_Parent.GeoPlanetPlace_Parent_Target]
        FROM (
            SELECT -- Constructing GeoPlanetPlace_Parent_Target
                T1.[GeoPlanetPlace_Parent.GeoPlanetPlace_Parent_Source.WoeId], 
                CreateRef(UCosmicContext.GeoPlanetPlaces, row(T1.[GeoPlanetPlace_Parent.GeoPlanetPlace_Parent_Target.WoeId]), [UCosmic.Orm.GeoPlanetPlace]) AS [GeoPlanetPlace_Parent.GeoPlanetPlace_Parent_Target]
            FROM (
                SELECT 
                    T.WoeId AS [GeoPlanetPlace_Parent.GeoPlanetPlace_Parent_Source.WoeId], 
                    T.ParentWoeId AS [GeoPlanetPlace_Parent.GeoPlanetPlace_Parent_Target.WoeId], 
                    True AS _from0
                FROM CodeFirstDatabase.GeoPlanetPlace AS T
                WHERE T.ParentWoeId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.GeoPlanetPlace_Type
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView97()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.GeoPlanetPlace_Type", @"
    SELECT VALUE -- Constructing GeoPlanetPlace_Type
        [UCosmic.Orm.GeoPlanetPlace_Type](T3.[GeoPlanetPlace_Type.GeoPlanetPlace_Type_Source], T3.[GeoPlanetPlace_Type.GeoPlanetPlace_Type_Target])
    FROM (
        SELECT -- Constructing GeoPlanetPlace_Type_Source
            CreateRef(UCosmicContext.GeoPlanetPlaces, row(T2.[GeoPlanetPlace_Type.GeoPlanetPlace_Type_Source.WoeId]), [UCosmic.Orm.GeoPlanetPlace]) AS [GeoPlanetPlace_Type.GeoPlanetPlace_Type_Source], 
            T2.[GeoPlanetPlace_Type.GeoPlanetPlace_Type_Target]
        FROM (
            SELECT -- Constructing GeoPlanetPlace_Type_Target
                T1.[GeoPlanetPlace_Type.GeoPlanetPlace_Type_Source.WoeId], 
                CreateRef(UCosmicContext.GeoPlanetPlaceTypes, row(T1.[GeoPlanetPlace_Type.GeoPlanetPlace_Type_Target.Code]), [UCosmic.Orm.GeoPlanetPlaceType]) AS [GeoPlanetPlace_Type.GeoPlanetPlace_Type_Target]
            FROM (
                SELECT 
                    T.WoeId AS [GeoPlanetPlace_Type.GeoPlanetPlace_Type_Source.WoeId], 
                    T.TypeCode AS [GeoPlanetPlace_Type.GeoPlanetPlace_Type_Target.Code], 
                    True AS _from0
                FROM CodeFirstDatabase.GeoPlanetPlace AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.GeoPlanetPlace_Place
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView98()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.GeoPlanetPlace_Place", @"
    SELECT VALUE -- Constructing GeoPlanetPlace_Place
        [UCosmic.Orm.GeoPlanetPlace_Place](T3.[GeoPlanetPlace_Place.GeoPlanetPlace_Place_Target], T3.[GeoPlanetPlace_Place.GeoPlanetPlace_Place_Source])
    FROM (
        SELECT -- Constructing GeoPlanetPlace_Place_Target
            CreateRef(UCosmicContext.Places, row(T2.[GeoPlanetPlace_Place.GeoPlanetPlace_Place_Target.RevisionId]), [UCosmic.Orm.Place]) AS [GeoPlanetPlace_Place.GeoPlanetPlace_Place_Target], 
            T2.[GeoPlanetPlace_Place.GeoPlanetPlace_Place_Source]
        FROM (
            SELECT -- Constructing GeoPlanetPlace_Place_Source
                T1.[GeoPlanetPlace_Place.GeoPlanetPlace_Place_Target.RevisionId], 
                CreateRef(UCosmicContext.GeoPlanetPlaces, row(T1.[GeoPlanetPlace_Place.GeoPlanetPlace_Place_Source.WoeId]), [UCosmic.Orm.GeoPlanetPlace]) AS [GeoPlanetPlace_Place.GeoPlanetPlace_Place_Source]
            FROM (
                SELECT 
                    T.PlaceId AS [GeoPlanetPlace_Place.GeoPlanetPlace_Place_Target.RevisionId], 
                    T.WoeId AS [GeoPlanetPlace_Place.GeoPlanetPlace_Place_Source.WoeId], 
                    True AS _from0
                FROM CodeFirstDatabase.GeoPlanetPlace AS T
                WHERE T.PlaceId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.PlaceName_NameFor
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView99()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.PlaceName_NameFor", @"
    SELECT VALUE -- Constructing PlaceName_NameFor
        [UCosmic.Orm.PlaceName_NameFor](T3.[PlaceName_NameFor.PlaceName_NameFor_Source], T3.[PlaceName_NameFor.PlaceName_NameFor_Target])
    FROM (
        SELECT -- Constructing PlaceName_NameFor_Source
            CreateRef(UCosmicContext.PlaceNames, row(T2.[PlaceName_NameFor.PlaceName_NameFor_Source.RevisionId]), [UCosmic.Orm.PlaceName]) AS [PlaceName_NameFor.PlaceName_NameFor_Source], 
            T2.[PlaceName_NameFor.PlaceName_NameFor_Target]
        FROM (
            SELECT -- Constructing PlaceName_NameFor_Target
                T1.[PlaceName_NameFor.PlaceName_NameFor_Source.RevisionId], 
                CreateRef(UCosmicContext.Places, row(T1.[PlaceName_NameFor.PlaceName_NameFor_Target.RevisionId]), [UCosmic.Orm.Place]) AS [PlaceName_NameFor.PlaceName_NameFor_Target]
            FROM (
                SELECT 
                    T.RevisionId AS [PlaceName_NameFor.PlaceName_NameFor_Source.RevisionId], 
                    T.NameForPlaceId AS [PlaceName_NameFor.PlaceName_NameFor_Target.RevisionId], 
                    True AS _from0
                FROM CodeFirstDatabase.PlaceName AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.PlaceName_TranslationToLanguage
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView100()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.PlaceName_TranslationToLanguage", "\r\n    SELECT VALUE -- Constructing PlaceName_TranslationToLanguage\r\n        [UCos" +
                    "mic.Orm.PlaceName_TranslationToLanguage](T3.[PlaceName_TranslationToLanguage.Pla" +
                    "ceName_TranslationToLanguage_Source], T3.[PlaceName_TranslationToLanguage.PlaceN" +
                    "ame_TranslationToLanguage_Target])\r\n    FROM (\r\n        SELECT -- Constructing P" +
                    "laceName_TranslationToLanguage_Source\r\n            CreateRef(UCosmicContext.Plac" +
                    "eNames, row(T2.[PlaceName_TranslationToLanguage.PlaceName_TranslationToLanguage_" +
                    "Source.RevisionId]), [UCosmic.Orm.PlaceName]) AS [PlaceName_TranslationToLanguag" +
                    "e.PlaceName_TranslationToLanguage_Source], \r\n            T2.[PlaceName_Translati" +
                    "onToLanguage.PlaceName_TranslationToLanguage_Target]\r\n        FROM (\r\n          " +
                    "  SELECT -- Constructing PlaceName_TranslationToLanguage_Target\r\n               " +
                    " T1.[PlaceName_TranslationToLanguage.PlaceName_TranslationToLanguage_Source.Revi" +
                    "sionId], \r\n                CreateRef(UCosmicContext.Languages, row(T1.[PlaceName" +
                    "_TranslationToLanguage.PlaceName_TranslationToLanguage_Target.RevisionId]), [UCo" +
                    "smic.Orm.Language]) AS [PlaceName_TranslationToLanguage.PlaceName_TranslationToL" +
                    "anguage_Target]\r\n            FROM (\r\n                SELECT \r\n                  " +
                    "  T.RevisionId AS [PlaceName_TranslationToLanguage.PlaceName_TranslationToLangua" +
                    "ge_Source.RevisionId], \r\n                    T.TranslationToLanguageId AS [Place" +
                    "Name_TranslationToLanguage.PlaceName_TranslationToLanguage_Target.RevisionId], \r" +
                    "\n                    True AS _from0\r\n                FROM CodeFirstDatabase.Plac" +
                    "eName AS T\r\n                WHERE T.TranslationToLanguageId IS NOT NULL\r\n       " +
                    "     ) AS T1\r\n        ) AS T2\r\n    ) AS T3");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.RoleGrant_User
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView101()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.RoleGrant_User", @"
    SELECT VALUE -- Constructing RoleGrant_User
        [UCosmic.Orm.RoleGrant_User](T3.[RoleGrant_User.RoleGrant_User_Source], T3.[RoleGrant_User.RoleGrant_User_Target])
    FROM (
        SELECT -- Constructing RoleGrant_User_Source
            CreateRef(UCosmicContext.RoleGrants, row(T2.[RoleGrant_User.RoleGrant_User_Source.RevisionId]), [UCosmic.Orm.RoleGrant]) AS [RoleGrant_User.RoleGrant_User_Source], 
            T2.[RoleGrant_User.RoleGrant_User_Target]
        FROM (
            SELECT -- Constructing RoleGrant_User_Target
                T1.[RoleGrant_User.RoleGrant_User_Source.RevisionId], 
                CreateRef(UCosmicContext.Users, row(T1.[RoleGrant_User.RoleGrant_User_Target.RevisionId]), [UCosmic.Orm.User]) AS [RoleGrant_User.RoleGrant_User_Target]
            FROM (
                SELECT 
                    T.RevisionId AS [RoleGrant_User.RoleGrant_User_Source.RevisionId], 
                    T.UserId AS [RoleGrant_User.RoleGrant_User_Target.RevisionId], 
                    True AS _from0
                FROM CodeFirstDatabase.RoleGrant AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.RoleGrant_Role
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView102()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.RoleGrant_Role", @"
    SELECT VALUE -- Constructing RoleGrant_Role
        [UCosmic.Orm.RoleGrant_Role](T3.[RoleGrant_Role.RoleGrant_Role_Source], T3.[RoleGrant_Role.RoleGrant_Role_Target])
    FROM (
        SELECT -- Constructing RoleGrant_Role_Source
            CreateRef(UCosmicContext.RoleGrants, row(T2.[RoleGrant_Role.RoleGrant_Role_Source.RevisionId]), [UCosmic.Orm.RoleGrant]) AS [RoleGrant_Role.RoleGrant_Role_Source], 
            T2.[RoleGrant_Role.RoleGrant_Role_Target]
        FROM (
            SELECT -- Constructing RoleGrant_Role_Target
                T1.[RoleGrant_Role.RoleGrant_Role_Source.RevisionId], 
                CreateRef(UCosmicContext.Roles, row(T1.[RoleGrant_Role.RoleGrant_Role_Target.RevisionId]), [UCosmic.Orm.Role]) AS [RoleGrant_Role.RoleGrant_Role_Target]
            FROM (
                SELECT 
                    T.RevisionId AS [RoleGrant_Role.RoleGrant_Role_Source.RevisionId], 
                    T.RoleId AS [RoleGrant_Role.RoleGrant_Role_Target.RevisionId], 
                    True AS _from0
                FROM CodeFirstDatabase.RoleGrant AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.EstablishmentName_TranslationToLanguage
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView103()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.EstablishmentName_TranslationToLanguage", "\r\n    SELECT VALUE -- Constructing EstablishmentName_TranslationToLanguage\r\n     " +
                    "   [UCosmic.Orm.EstablishmentName_TranslationToLanguage](T3.[EstablishmentName_T" +
                    "ranslationToLanguage.EstablishmentName_TranslationToLanguage_Source], T3.[Establ" +
                    "ishmentName_TranslationToLanguage.EstablishmentName_TranslationToLanguage_Target" +
                    "])\r\n    FROM (\r\n        SELECT -- Constructing EstablishmentName_TranslationToLa" +
                    "nguage_Source\r\n            CreateRef(UCosmicContext.EstablishmentNames, row(T2.[" +
                    "EstablishmentName_TranslationToLanguage.EstablishmentName_TranslationToLanguage_" +
                    "Source.RevisionId]), [UCosmic.Orm.EstablishmentName]) AS [EstablishmentName_Tran" +
                    "slationToLanguage.EstablishmentName_TranslationToLanguage_Source], \r\n           " +
                    " T2.[EstablishmentName_TranslationToLanguage.EstablishmentName_TranslationToLang" +
                    "uage_Target]\r\n        FROM (\r\n            SELECT -- Constructing EstablishmentNa" +
                    "me_TranslationToLanguage_Target\r\n                T1.[EstablishmentName_Translati" +
                    "onToLanguage.EstablishmentName_TranslationToLanguage_Source.RevisionId], \r\n     " +
                    "           CreateRef(UCosmicContext.Languages, row(T1.[EstablishmentName_Transla" +
                    "tionToLanguage.EstablishmentName_TranslationToLanguage_Target.RevisionId]), [UCo" +
                    "smic.Orm.Language]) AS [EstablishmentName_TranslationToLanguage.EstablishmentNam" +
                    "e_TranslationToLanguage_Target]\r\n            FROM (\r\n                SELECT \r\n  " +
                    "                  T.RevisionId AS [EstablishmentName_TranslationToLanguage.Estab" +
                    "lishmentName_TranslationToLanguage_Source.RevisionId], \r\n                    T.T" +
                    "ranslationToLanguageId AS [EstablishmentName_TranslationToLanguage.Establishment" +
                    "Name_TranslationToLanguage_Target.RevisionId], \r\n                    True AS _fr" +
                    "om0\r\n                FROM CodeFirstDatabase.EstablishmentName AS T\r\n            " +
                    "    WHERE T.TranslationToLanguageId IS NOT NULL\r\n            ) AS T1\r\n        ) " +
                    "AS T2\r\n    ) AS T3");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.Establishment_Names
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView104()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.Establishment_Names", @"
    SELECT VALUE -- Constructing Establishment_Names
        [UCosmic.Orm.Establishment_Names](T3.[Establishment_Names.Establishment_Names_Source], T3.[Establishment_Names.Establishment_Names_Target])
    FROM (
        SELECT -- Constructing Establishment_Names_Source
            CreateRef(UCosmicContext.Establishments, row(T2.[Establishment_Names.Establishment_Names_Source.RevisionId]), [UCosmic.Orm.Establishment]) AS [Establishment_Names.Establishment_Names_Source], 
            T2.[Establishment_Names.Establishment_Names_Target]
        FROM (
            SELECT -- Constructing Establishment_Names_Target
                T1.[Establishment_Names.Establishment_Names_Source.RevisionId], 
                CreateRef(UCosmicContext.EstablishmentNames, row(T1.[Establishment_Names.Establishment_Names_Target.RevisionId]), [UCosmic.Orm.EstablishmentName]) AS [Establishment_Names.Establishment_Names_Target]
            FROM (
                SELECT 
                    T.ForEstablishmentId AS [Establishment_Names.Establishment_Names_Source.RevisionId], 
                    T.RevisionId AS [Establishment_Names.Establishment_Names_Target.RevisionId], 
                    True AS _from0
                FROM CodeFirstDatabase.EstablishmentName AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.Establishment_Urls
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView105()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.Establishment_Urls", @"
    SELECT VALUE -- Constructing Establishment_Urls
        [UCosmic.Orm.Establishment_Urls](T3.[Establishment_Urls.Establishment_Urls_Source], T3.[Establishment_Urls.Establishment_Urls_Target])
    FROM (
        SELECT -- Constructing Establishment_Urls_Source
            CreateRef(UCosmicContext.Establishments, row(T2.[Establishment_Urls.Establishment_Urls_Source.RevisionId]), [UCosmic.Orm.Establishment]) AS [Establishment_Urls.Establishment_Urls_Source], 
            T2.[Establishment_Urls.Establishment_Urls_Target]
        FROM (
            SELECT -- Constructing Establishment_Urls_Target
                T1.[Establishment_Urls.Establishment_Urls_Source.RevisionId], 
                CreateRef(UCosmicContext.EstablishmentUrls, row(T1.[Establishment_Urls.Establishment_Urls_Target.RevisionId]), [UCosmic.Orm.EstablishmentUrl]) AS [Establishment_Urls.Establishment_Urls_Target]
            FROM (
                SELECT 
                    T.ForEstablishmentId AS [Establishment_Urls.Establishment_Urls_Source.RevisionId], 
                    T.RevisionId AS [Establishment_Urls.Establishment_Urls_Target.RevisionId], 
                    True AS _from0
                FROM CodeFirstDatabase.EstablishmentUrl AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.Establishment_Parent
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView106()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.Establishment_Parent", @"
    SELECT VALUE -- Constructing Establishment_Parent
        [UCosmic.Orm.Establishment_Parent](T3.[Establishment_Parent.Establishment_Parent_Source], T3.[Establishment_Parent.Establishment_Parent_Target])
    FROM (
        SELECT -- Constructing Establishment_Parent_Source
            CreateRef(UCosmicContext.Establishments, row(T2.[Establishment_Parent.Establishment_Parent_Source.RevisionId]), [UCosmic.Orm.Establishment]) AS [Establishment_Parent.Establishment_Parent_Source], 
            T2.[Establishment_Parent.Establishment_Parent_Target]
        FROM (
            SELECT -- Constructing Establishment_Parent_Target
                T1.[Establishment_Parent.Establishment_Parent_Source.RevisionId], 
                CreateRef(UCosmicContext.Establishments, row(T1.[Establishment_Parent.Establishment_Parent_Target.RevisionId]), [UCosmic.Orm.Establishment]) AS [Establishment_Parent.Establishment_Parent_Target]
            FROM (
                SELECT 
                    T.RevisionId AS [Establishment_Parent.Establishment_Parent_Source.RevisionId], 
                    T.ParentId AS [Establishment_Parent.Establishment_Parent_Target.RevisionId], 
                    True AS _from0
                FROM CodeFirstDatabase.Establishment AS T
                WHERE T.ParentId IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.EstablishmentAddress_TranslationToLanguage
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView107()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.EstablishmentAddress_TranslationToLanguage", "\r\n    SELECT VALUE -- Constructing EstablishmentAddress_TranslationToLanguage\r\n  " +
                    "      [UCosmic.Orm.EstablishmentAddress_TranslationToLanguage](T3.[Establishment" +
                    "Address_TranslationToLanguage.EstablishmentAddress_TranslationToLanguage_Source]" +
                    ", T3.[EstablishmentAddress_TranslationToLanguage.EstablishmentAddress_Translatio" +
                    "nToLanguage_Target])\r\n    FROM (\r\n        SELECT -- Constructing EstablishmentAd" +
                    "dress_TranslationToLanguage_Source\r\n            CreateRef(UCosmicContext.Establi" +
                    "shmentAddresses, row(T2.[EstablishmentAddress_TranslationToLanguage.Establishmen" +
                    "tAddress_TranslationToLanguage_Source.RevisionId]), [UCosmic.Orm.EstablishmentAd" +
                    "dress]) AS [EstablishmentAddress_TranslationToLanguage.EstablishmentAddress_Tran" +
                    "slationToLanguage_Source], \r\n            T2.[EstablishmentAddress_TranslationToL" +
                    "anguage.EstablishmentAddress_TranslationToLanguage_Target]\r\n        FROM (\r\n    " +
                    "        SELECT -- Constructing EstablishmentAddress_TranslationToLanguage_Target" +
                    "\r\n                T1.[EstablishmentAddress_TranslationToLanguage.EstablishmentAd" +
                    "dress_TranslationToLanguage_Source.RevisionId], \r\n                CreateRef(UCos" +
                    "micContext.Languages, row(T1.[EstablishmentAddress_TranslationToLanguage.Establi" +
                    "shmentAddress_TranslationToLanguage_Target.RevisionId]), [UCosmic.Orm.Language])" +
                    " AS [EstablishmentAddress_TranslationToLanguage.EstablishmentAddress_Translation" +
                    "ToLanguage_Target]\r\n            FROM (\r\n                SELECT \r\n               " +
                    "     T.RevisionId AS [EstablishmentAddress_TranslationToLanguage.EstablishmentAd" +
                    "dress_TranslationToLanguage_Source.RevisionId], \r\n                    T.Translat" +
                    "ionToLanguageId AS [EstablishmentAddress_TranslationToLanguage.EstablishmentAddr" +
                    "ess_TranslationToLanguage_Target.RevisionId], \r\n                    True AS _fro" +
                    "m0\r\n                FROM CodeFirstDatabase.EstablishmentAddress AS T\r\n          " +
                    "  ) AS T1\r\n        ) AS T2\r\n    ) AS T3");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.EstablishmentLocation_Addresses
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView108()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.EstablishmentLocation_Addresses", "\r\n    SELECT VALUE -- Constructing EstablishmentLocation_Addresses\r\n        [UCos" +
                    "mic.Orm.EstablishmentLocation_Addresses](T3.[EstablishmentLocation_Addresses.Est" +
                    "ablishmentLocation_Addresses_Source], T3.[EstablishmentLocation_Addresses.Establ" +
                    "ishmentLocation_Addresses_Target])\r\n    FROM (\r\n        SELECT -- Constructing E" +
                    "stablishmentLocation_Addresses_Source\r\n            CreateRef(UCosmicContext.Esta" +
                    "blishmentLocations, row(T2.[EstablishmentLocation_Addresses.EstablishmentLocatio" +
                    "n_Addresses_Source.RevisionId]), [UCosmic.Orm.EstablishmentLocation]) AS [Establ" +
                    "ishmentLocation_Addresses.EstablishmentLocation_Addresses_Source], \r\n           " +
                    " T2.[EstablishmentLocation_Addresses.EstablishmentLocation_Addresses_Target]\r\n  " +
                    "      FROM (\r\n            SELECT -- Constructing EstablishmentLocation_Addresses" +
                    "_Target\r\n                T1.[EstablishmentLocation_Addresses.EstablishmentLocati" +
                    "on_Addresses_Source.RevisionId], \r\n                CreateRef(UCosmicContext.Esta" +
                    "blishmentAddresses, row(T1.[EstablishmentLocation_Addresses.EstablishmentLocatio" +
                    "n_Addresses_Target.RevisionId]), [UCosmic.Orm.EstablishmentAddress]) AS [Establi" +
                    "shmentLocation_Addresses.EstablishmentLocation_Addresses_Target]\r\n            FR" +
                    "OM (\r\n                SELECT \r\n                    T.EstablishmentLocationId AS " +
                    "[EstablishmentLocation_Addresses.EstablishmentLocation_Addresses_Source.Revision" +
                    "Id], \r\n                    T.RevisionId AS [EstablishmentLocation_Addresses.Esta" +
                    "blishmentLocation_Addresses_Target.RevisionId], \r\n                    True AS _f" +
                    "rom0\r\n                FROM CodeFirstDatabase.EstablishmentAddress AS T\r\n        " +
                    "    ) AS T1\r\n        ) AS T2\r\n    ) AS T3");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.EstablishmentLocation_Places
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView109()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.EstablishmentLocation_Places", "\r\n    SELECT VALUE -- Constructing EstablishmentLocation_Places\r\n        [UCosmic" +
                    ".Orm.EstablishmentLocation_Places](T3.[EstablishmentLocation_Places.Establishmen" +
                    "tLocation_Places_Source], T3.[EstablishmentLocation_Places.EstablishmentLocation" +
                    "_Places_Target])\r\n    FROM (\r\n        SELECT -- Constructing EstablishmentLocati" +
                    "on_Places_Source\r\n            CreateRef(UCosmicContext.EstablishmentLocations, r" +
                    "ow(T2.[EstablishmentLocation_Places.EstablishmentLocation_Places_Source.Revision" +
                    "Id]), [UCosmic.Orm.EstablishmentLocation]) AS [EstablishmentLocation_Places.Esta" +
                    "blishmentLocation_Places_Source], \r\n            T2.[EstablishmentLocation_Places" +
                    ".EstablishmentLocation_Places_Target]\r\n        FROM (\r\n            SELECT -- Con" +
                    "structing EstablishmentLocation_Places_Target\r\n                T1.[Establishment" +
                    "Location_Places.EstablishmentLocation_Places_Source.RevisionId], \r\n             " +
                    "   CreateRef(UCosmicContext.Places, row(T1.[EstablishmentLocation_Places.Establi" +
                    "shmentLocation_Places_Target.RevisionId]), [UCosmic.Orm.Place]) AS [Establishmen" +
                    "tLocation_Places.EstablishmentLocation_Places_Target]\r\n            FROM (\r\n     " +
                    "           SELECT \r\n                    T.EstablishmentLocationId AS [Establishm" +
                    "entLocation_Places.EstablishmentLocation_Places_Source.RevisionId], \r\n          " +
                    "          T.PlaceId AS [EstablishmentLocation_Places.EstablishmentLocation_Place" +
                    "s_Target.RevisionId], \r\n                    True AS _from0\r\n                FROM" +
                    " CodeFirstDatabase.EstablishmentLocationPlace AS T\r\n            ) AS T1\r\n       " +
                    " ) AS T2\r\n    ) AS T3");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.Establishment_Type
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView110()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.Establishment_Type", @"
    SELECT VALUE -- Constructing Establishment_Type
        [UCosmic.Orm.Establishment_Type](T3.[Establishment_Type.Establishment_Type_Source], T3.[Establishment_Type.Establishment_Type_Target])
    FROM (
        SELECT -- Constructing Establishment_Type_Source
            CreateRef(UCosmicContext.Establishments, row(T2.[Establishment_Type.Establishment_Type_Source.RevisionId]), [UCosmic.Orm.Establishment]) AS [Establishment_Type.Establishment_Type_Source], 
            T2.[Establishment_Type.Establishment_Type_Target]
        FROM (
            SELECT -- Constructing Establishment_Type_Target
                T1.[Establishment_Type.Establishment_Type_Source.RevisionId], 
                CreateRef(UCosmicContext.EstablishmentTypes, row(T1.[Establishment_Type.Establishment_Type_Target.RevisionId]), [UCosmic.Orm.EstablishmentType]) AS [Establishment_Type.Establishment_Type_Target]
            FROM (
                SELECT 
                    T.RevisionId AS [Establishment_Type.Establishment_Type_Source.RevisionId], 
                    T.TypeId AS [Establishment_Type.Establishment_Type_Target.RevisionId], 
                    True AS _from0
                FROM CodeFirstDatabase.Establishment AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.Person_User
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView111()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.Person_User", @"
    SELECT VALUE -- Constructing Person_User
        [UCosmic.Orm.Person_User](T3.[Person_User.Person_User_Source], T3.[Person_User.Person_User_Target])
    FROM (
        SELECT -- Constructing Person_User_Source
            CreateRef(UCosmicContext.People, row(T2.[Person_User.Person_User_Source.RevisionId]), [UCosmic.Orm.Person]) AS [Person_User.Person_User_Source], 
            T2.[Person_User.Person_User_Target]
        FROM (
            SELECT -- Constructing Person_User_Target
                T1.[Person_User.Person_User_Source.RevisionId], 
                CreateRef(UCosmicContext.Users, row(T1.[Person_User.Person_User_Target.RevisionId]), [UCosmic.Orm.User]) AS [Person_User.Person_User_Target]
            FROM (
                SELECT 
                    T.PersonId AS [Person_User.Person_User_Source.RevisionId], 
                    T.RevisionId AS [Person_User.Person_User_Target.RevisionId], 
                    True AS _from0
                FROM CodeFirstDatabase.User AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.RoleGrant_ForEstablishment
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView112()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.RoleGrant_ForEstablishment", "\r\n    SELECT VALUE -- Constructing RoleGrant_ForEstablishment\r\n        [UCosmic.O" +
                    "rm.RoleGrant_ForEstablishment](T3.[RoleGrant_ForEstablishment.RoleGrant_ForEstab" +
                    "lishment_Source], T3.[RoleGrant_ForEstablishment.RoleGrant_ForEstablishment_Targ" +
                    "et])\r\n    FROM (\r\n        SELECT -- Constructing RoleGrant_ForEstablishment_Sour" +
                    "ce\r\n            CreateRef(UCosmicContext.RoleGrants, row(T2.[RoleGrant_ForEstabl" +
                    "ishment.RoleGrant_ForEstablishment_Source.RevisionId]), [UCosmic.Orm.RoleGrant])" +
                    " AS [RoleGrant_ForEstablishment.RoleGrant_ForEstablishment_Source], \r\n          " +
                    "  T2.[RoleGrant_ForEstablishment.RoleGrant_ForEstablishment_Target]\r\n        FRO" +
                    "M (\r\n            SELECT -- Constructing RoleGrant_ForEstablishment_Target\r\n     " +
                    "           T1.[RoleGrant_ForEstablishment.RoleGrant_ForEstablishment_Source.Revi" +
                    "sionId], \r\n                CreateRef(UCosmicContext.Establishments, row(T1.[Role" +
                    "Grant_ForEstablishment.RoleGrant_ForEstablishment_Target.RevisionId]), [UCosmic." +
                    "Orm.Establishment]) AS [RoleGrant_ForEstablishment.RoleGrant_ForEstablishment_Ta" +
                    "rget]\r\n            FROM (\r\n                SELECT \r\n                    T.Revisi" +
                    "onId AS [RoleGrant_ForEstablishment.RoleGrant_ForEstablishment_Source.RevisionId" +
                    "], \r\n                    T.ForEstablishmentId AS [RoleGrant_ForEstablishment.Rol" +
                    "eGrant_ForEstablishment_Target.RevisionId], \r\n                    True AS _from0" +
                    "\r\n                FROM CodeFirstDatabase.RoleGrant AS T\r\n                WHERE T" +
                    ".ForEstablishmentId IS NOT NULL\r\n            ) AS T1\r\n        ) AS T2\r\n    ) AS " +
                    "T3");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.InstitutionalAgreement_Umbrella
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView113()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.InstitutionalAgreement_Umbrella", "\r\n    SELECT VALUE -- Constructing InstitutionalAgreement_Umbrella\r\n        [UCos" +
                    "mic.Orm.InstitutionalAgreement_Umbrella](T3.[InstitutionalAgreement_Umbrella.Ins" +
                    "titutionalAgreement_Umbrella_Source], T3.[InstitutionalAgreement_Umbrella.Instit" +
                    "utionalAgreement_Umbrella_Target])\r\n    FROM (\r\n        SELECT -- Constructing I" +
                    "nstitutionalAgreement_Umbrella_Source\r\n            CreateRef(UCosmicContext.Inst" +
                    "itutionalAgreements, row(T2.[InstitutionalAgreement_Umbrella.InstitutionalAgreem" +
                    "ent_Umbrella_Source.RevisionId]), [UCosmic.Orm.InstitutionalAgreement]) AS [Inst" +
                    "itutionalAgreement_Umbrella.InstitutionalAgreement_Umbrella_Source], \r\n         " +
                    "   T2.[InstitutionalAgreement_Umbrella.InstitutionalAgreement_Umbrella_Target]\r\n" +
                    "        FROM (\r\n            SELECT -- Constructing InstitutionalAgreement_Umbrel" +
                    "la_Target\r\n                T1.[InstitutionalAgreement_Umbrella.InstitutionalAgre" +
                    "ement_Umbrella_Source.RevisionId], \r\n                CreateRef(UCosmicContext.In" +
                    "stitutionalAgreements, row(T1.[InstitutionalAgreement_Umbrella.InstitutionalAgre" +
                    "ement_Umbrella_Target.RevisionId]), [UCosmic.Orm.InstitutionalAgreement]) AS [In" +
                    "stitutionalAgreement_Umbrella.InstitutionalAgreement_Umbrella_Target]\r\n         " +
                    "   FROM (\r\n                SELECT \r\n                    T.RevisionId AS [Institu" +
                    "tionalAgreement_Umbrella.InstitutionalAgreement_Umbrella_Source.RevisionId], \r\n " +
                    "                   T.UmbrellaId AS [InstitutionalAgreement_Umbrella.Institutiona" +
                    "lAgreement_Umbrella_Target.RevisionId], \r\n                    True AS _from0\r\n  " +
                    "              FROM CodeFirstDatabase.InstitutionalAgreement AS T\r\n              " +
                    "  WHERE T.UmbrellaId IS NOT NULL\r\n            ) AS T1\r\n        ) AS T2\r\n    ) AS" +
                    " T3");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.InstitutionalAgreementParticipant_Establishment
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView114()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.InstitutionalAgreementParticipant_Establishment", "\r\n    SELECT VALUE -- Constructing InstitutionalAgreementParticipant_Establishmen" +
                    "t\r\n        [UCosmic.Orm.InstitutionalAgreementParticipant_Establishment](T3.[Ins" +
                    "titutionalAgreementParticipant_Establishment.InstitutionalAgreementParticipant_E" +
                    "stablishment_Source], T3.[InstitutionalAgreementParticipant_Establishment.Instit" +
                    "utionalAgreementParticipant_Establishment_Target])\r\n    FROM (\r\n        SELECT -" +
                    "- Constructing InstitutionalAgreementParticipant_Establishment_Source\r\n         " +
                    "   CreateRef(UCosmicContext.InstitutionalAgreementParticipants, row(T2.[Institut" +
                    "ionalAgreementParticipant_Establishment.InstitutionalAgreementParticipant_Establ" +
                    "ishment_Source.Id]), [UCosmic.Orm.InstitutionalAgreementParticipant]) AS [Instit" +
                    "utionalAgreementParticipant_Establishment.InstitutionalAgreementParticipant_Esta" +
                    "blishment_Source], \r\n            T2.[InstitutionalAgreementParticipant_Establish" +
                    "ment.InstitutionalAgreementParticipant_Establishment_Target]\r\n        FROM (\r\n  " +
                    "          SELECT -- Constructing InstitutionalAgreementParticipant_Establishment" +
                    "_Target\r\n                T1.[InstitutionalAgreementParticipant_Establishment.Ins" +
                    "titutionalAgreementParticipant_Establishment_Source.Id], \r\n                Creat" +
                    "eRef(UCosmicContext.Establishments, row(T1.[InstitutionalAgreementParticipant_Es" +
                    "tablishment.InstitutionalAgreementParticipant_Establishment_Target.RevisionId])," +
                    " [UCosmic.Orm.Establishment]) AS [InstitutionalAgreementParticipant_Establishmen" +
                    "t.InstitutionalAgreementParticipant_Establishment_Target]\r\n            FROM (\r\n " +
                    "               SELECT \r\n                    T.Id AS [InstitutionalAgreementParti" +
                    "cipant_Establishment.InstitutionalAgreementParticipant_Establishment_Source.Id]," +
                    " \r\n                    T.EstablishmentId AS [InstitutionalAgreementParticipant_E" +
                    "stablishment.InstitutionalAgreementParticipant_Establishment_Target.RevisionId]," +
                    " \r\n                    True AS _from0\r\n                FROM CodeFirstDatabase.In" +
                    "stitutionalAgreementParticipant AS T\r\n            ) AS T1\r\n        ) AS T2\r\n    " +
                    ") AS T3");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.InstitutionalAgreement_Participants
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView115()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.InstitutionalAgreement_Participants", "\r\n    SELECT VALUE -- Constructing InstitutionalAgreement_Participants\r\n        [" +
                    "UCosmic.Orm.InstitutionalAgreement_Participants](T3.[InstitutionalAgreement_Part" +
                    "icipants.InstitutionalAgreement_Participants_Source], T3.[InstitutionalAgreement" +
                    "_Participants.InstitutionalAgreement_Participants_Target])\r\n    FROM (\r\n        " +
                    "SELECT -- Constructing InstitutionalAgreement_Participants_Source\r\n            C" +
                    "reateRef(UCosmicContext.InstitutionalAgreements, row(T2.[InstitutionalAgreement_" +
                    "Participants.InstitutionalAgreement_Participants_Source.RevisionId]), [UCosmic.O" +
                    "rm.InstitutionalAgreement]) AS [InstitutionalAgreement_Participants.Institutiona" +
                    "lAgreement_Participants_Source], \r\n            T2.[InstitutionalAgreement_Partic" +
                    "ipants.InstitutionalAgreement_Participants_Target]\r\n        FROM (\r\n            " +
                    "SELECT -- Constructing InstitutionalAgreement_Participants_Target\r\n             " +
                    "   T1.[InstitutionalAgreement_Participants.InstitutionalAgreement_Participants_S" +
                    "ource.RevisionId], \r\n                CreateRef(UCosmicContext.InstitutionalAgree" +
                    "mentParticipants, row(T1.[InstitutionalAgreement_Participants.InstitutionalAgree" +
                    "ment_Participants_Target.Id]), [UCosmic.Orm.InstitutionalAgreementParticipant]) " +
                    "AS [InstitutionalAgreement_Participants.InstitutionalAgreement_Participants_Targ" +
                    "et]\r\n            FROM (\r\n                SELECT \r\n                    T.Agreemen" +
                    "tId AS [InstitutionalAgreement_Participants.InstitutionalAgreement_Participants_" +
                    "Source.RevisionId], \r\n                    T.Id AS [InstitutionalAgreement_Partic" +
                    "ipants.InstitutionalAgreement_Participants_Target.Id], \r\n                    Tru" +
                    "e AS _from0\r\n                FROM CodeFirstDatabase.InstitutionalAgreementPartic" +
                    "ipant AS T\r\n            ) AS T1\r\n        ) AS T2\r\n    ) AS T3");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.InstitutionalAgreementContact_Person
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView116()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.InstitutionalAgreementContact_Person", "\r\n    SELECT VALUE -- Constructing InstitutionalAgreementContact_Person\r\n        " +
                    "[UCosmic.Orm.InstitutionalAgreementContact_Person](T3.[InstitutionalAgreementCon" +
                    "tact_Person.InstitutionalAgreementContact_Person_Source], T3.[InstitutionalAgree" +
                    "mentContact_Person.InstitutionalAgreementContact_Person_Target])\r\n    FROM (\r\n  " +
                    "      SELECT -- Constructing InstitutionalAgreementContact_Person_Source\r\n      " +
                    "      CreateRef(UCosmicContext.InstitutionalAgreementContacts, row(T2.[Instituti" +
                    "onalAgreementContact_Person.InstitutionalAgreementContact_Person_Source.Revision" +
                    "Id]), [UCosmic.Orm.InstitutionalAgreementContact]) AS [InstitutionalAgreementCon" +
                    "tact_Person.InstitutionalAgreementContact_Person_Source], \r\n            T2.[Inst" +
                    "itutionalAgreementContact_Person.InstitutionalAgreementContact_Person_Target]\r\n " +
                    "       FROM (\r\n            SELECT -- Constructing InstitutionalAgreementContact_" +
                    "Person_Target\r\n                T1.[InstitutionalAgreementContact_Person.Institut" +
                    "ionalAgreementContact_Person_Source.RevisionId], \r\n                CreateRef(UCo" +
                    "smicContext.People, row(T1.[InstitutionalAgreementContact_Person.InstitutionalAg" +
                    "reementContact_Person_Target.RevisionId]), [UCosmic.Orm.Person]) AS [Institution" +
                    "alAgreementContact_Person.InstitutionalAgreementContact_Person_Target]\r\n        " +
                    "    FROM (\r\n                SELECT \r\n                    T.RevisionId AS [Instit" +
                    "utionalAgreementContact_Person.InstitutionalAgreementContact_Person_Source.Revis" +
                    "ionId], \r\n                    T.PersonId AS [InstitutionalAgreementContact_Perso" +
                    "n.InstitutionalAgreementContact_Person_Target.RevisionId], \r\n                   " +
                    " True AS _from0\r\n                FROM CodeFirstDatabase.InstitutionalAgreementCo" +
                    "ntact AS T\r\n            ) AS T1\r\n        ) AS T2\r\n    ) AS T3");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.InstitutionalAgreement_Contacts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView117()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.InstitutionalAgreement_Contacts", "\r\n    SELECT VALUE -- Constructing InstitutionalAgreement_Contacts\r\n        [UCos" +
                    "mic.Orm.InstitutionalAgreement_Contacts](T3.[InstitutionalAgreement_Contacts.Ins" +
                    "titutionalAgreement_Contacts_Source], T3.[InstitutionalAgreement_Contacts.Instit" +
                    "utionalAgreement_Contacts_Target])\r\n    FROM (\r\n        SELECT -- Constructing I" +
                    "nstitutionalAgreement_Contacts_Source\r\n            CreateRef(UCosmicContext.Inst" +
                    "itutionalAgreements, row(T2.[InstitutionalAgreement_Contacts.InstitutionalAgreem" +
                    "ent_Contacts_Source.RevisionId]), [UCosmic.Orm.InstitutionalAgreement]) AS [Inst" +
                    "itutionalAgreement_Contacts.InstitutionalAgreement_Contacts_Source], \r\n         " +
                    "   T2.[InstitutionalAgreement_Contacts.InstitutionalAgreement_Contacts_Target]\r\n" +
                    "        FROM (\r\n            SELECT -- Constructing InstitutionalAgreement_Contac" +
                    "ts_Target\r\n                T1.[InstitutionalAgreement_Contacts.InstitutionalAgre" +
                    "ement_Contacts_Source.RevisionId], \r\n                CreateRef(UCosmicContext.In" +
                    "stitutionalAgreementContacts, row(T1.[InstitutionalAgreement_Contacts.Institutio" +
                    "nalAgreement_Contacts_Target.RevisionId]), [UCosmic.Orm.InstitutionalAgreementCo" +
                    "ntact]) AS [InstitutionalAgreement_Contacts.InstitutionalAgreement_Contacts_Targ" +
                    "et]\r\n            FROM (\r\n                SELECT \r\n                    T.Agreemen" +
                    "tId AS [InstitutionalAgreement_Contacts.InstitutionalAgreement_Contacts_Source.R" +
                    "evisionId], \r\n                    T.RevisionId AS [InstitutionalAgreement_Contac" +
                    "ts.InstitutionalAgreement_Contacts_Target.RevisionId], \r\n                    Tru" +
                    "e AS _from0\r\n                FROM CodeFirstDatabase.InstitutionalAgreementContac" +
                    "t AS T\r\n            ) AS T1\r\n        ) AS T2\r\n    ) AS T3");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.InstitutionalAgreement_Files
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView118()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.InstitutionalAgreement_Files", "\r\n    SELECT VALUE -- Constructing InstitutionalAgreement_Files\r\n        [UCosmic" +
                    ".Orm.InstitutionalAgreement_Files](T3.[InstitutionalAgreement_Files.Institutiona" +
                    "lAgreement_Files_Source], T3.[InstitutionalAgreement_Files.InstitutionalAgreemen" +
                    "t_Files_Target])\r\n    FROM (\r\n        SELECT -- Constructing InstitutionalAgreem" +
                    "ent_Files_Source\r\n            CreateRef(UCosmicContext.InstitutionalAgreements, " +
                    "row(T2.[InstitutionalAgreement_Files.InstitutionalAgreement_Files_Source.Revisio" +
                    "nId]), [UCosmic.Orm.InstitutionalAgreement]) AS [InstitutionalAgreement_Files.In" +
                    "stitutionalAgreement_Files_Source], \r\n            T2.[InstitutionalAgreement_Fil" +
                    "es.InstitutionalAgreement_Files_Target]\r\n        FROM (\r\n            SELECT -- C" +
                    "onstructing InstitutionalAgreement_Files_Target\r\n                T1.[Institution" +
                    "alAgreement_Files.InstitutionalAgreement_Files_Source.RevisionId], \r\n           " +
                    "     CreateRef(UCosmicContext.InstitutionalAgreementFiles, row(T1.[Institutional" +
                    "Agreement_Files.InstitutionalAgreement_Files_Target.RevisionId]), [UCosmic.Orm.I" +
                    "nstitutionalAgreementFile]) AS [InstitutionalAgreement_Files.InstitutionalAgreem" +
                    "ent_Files_Target]\r\n            FROM (\r\n                SELECT \r\n                " +
                    "    T.AgreementId AS [InstitutionalAgreement_Files.InstitutionalAgreement_Files_" +
                    "Source.RevisionId], \r\n                    T.RevisionId AS [InstitutionalAgreemen" +
                    "t_Files.InstitutionalAgreement_Files_Target.RevisionId], \r\n                    T" +
                    "rue AS _from0\r\n                FROM CodeFirstDatabase.InstitutionalAgreementFile" +
                    " AS T\r\n            ) AS T1\r\n        ) AS T2\r\n    ) AS T3");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.EdmMetadata
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView119()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.EdmMetadata", @"
    SELECT VALUE -- Constructing EdmMetadata
        [CodeFirstDatabaseSchema.EdmMetadata](T1.EdmMetadata_Id, T1.EdmMetadata_ModelHash)
    FROM (
        SELECT 
            T.Id AS EdmMetadata_Id, 
            T.ModelHash AS EdmMetadata_ModelHash, 
            True AS _from0
        FROM UCosmicContext.EdmMetadatas AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for UCosmicContext.EdmMetadatas
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView120()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("UCosmicContext.EdmMetadatas", @"
    SELECT VALUE -- Constructing EdmMetadatas
        [UCosmic.Orm.EdmMetadata](T1.EdmMetadata_Id, T1.EdmMetadata_ModelHash)
    FROM (
        SELECT 
            T.Id AS EdmMetadata_Id, 
            T.ModelHash AS EdmMetadata_ModelHash, 
            True AS _from0
        FROM CodeFirstDatabase.EdmMetadata AS T
    ) AS T1");
        }
    }
}
