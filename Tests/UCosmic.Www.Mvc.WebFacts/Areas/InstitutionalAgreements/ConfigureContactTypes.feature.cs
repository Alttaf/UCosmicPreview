// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.17379
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UCosmic.Www.Mvc.Areas.InstitutionalAgreements
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ConfigureInstitutionalAgreementsModuleContactTypesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ConfigureContactTypes.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Configure Institutional Agreements Module Contact Types", "  In order to control current status designation at my institution\r\n  As an Insti" +
                    "tutional Agreement Manager\r\n  I want to manage the drop down options and behavio" +
                    "r of the current status field", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Configure Institutional Agreements Module Contact Types")))
            {
                UCosmic.Www.Mvc.Areas.InstitutionalAgreements.ConfigureInstitutionalAgreementsModuleContactTypesFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 8
    testRunner.Given("I am signed in as supervisor1@uc.edu");
#line 9
    testRunner.And("I am starting from the Institutional Agreement Management page");
#line 10
    testRunner.Then("I should see a \"Configure module\" link");
#line 12
    testRunner.When("I click the \"Configure module\" link");
#line 13
    testRunner.Then("I should see the Institutional Agreement Configure Module page");
#line 14
    testRunner.And("I should see a \"Click here to set it up now\" link");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add item to Contact Types list fails when text is empty")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configure Institutional Agreements Module Contact Types")]
        public virtual void AddItemToContactTypesListFailsWhenTextIsEmpty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add item to Contact Types list fails when text is empty", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 18
    testRunner.When("I click the \"Click here to set it up now\" link");
#line 19
    testRunner.Then("I should see the Institutional Agreement Set Up Module page");
#line 20
    testRunner.And("I should see an \"Add\" link for item #1 in the Contact Types list");
#line 22
    testRunner.When("I click the \"Add\" link for item #1 in the Contact Types list");
#line 23
    testRunner.Then("I should see a Contact Type text field for item #1 in the Contact Types list");
#line 25
    testRunner.When("I click the \"Add\" link for item #1 in the Contact Types list again");
#line 26
    testRunner.Then("I should see the Required error message for the Contact Type text field");
#line 28
    testRunner.When("I click the \"Create Configuration\" submit button");
#line 29
    testRunner.Then("I should still see the Institutional Agreement Set Up Module page");
#line 30
    testRunner.And("I should still see the Required error message for the Contact Type text field");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void AddItemToContactTypesListFailsWhenTextIsDuplicate(string duplicateValue, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add item to Contact Types list fails when text is duplicate", exampleTags);
#line 32
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 34
    testRunner.When("I click the \"Click here to set it up now\" link");
#line 35
    testRunner.Then("I should see the Institutional Agreement Set Up Module page");
#line 36
    testRunner.And("I should see an \"Add\" link for item #1 in the Contact Types list");
#line 38
    testRunner.When("I click the \"Add\" link for item #1 in the Contact Types list");
#line 39
    testRunner.Then("I should see a Contact Type text field for item #1 in the Contact Types list");
#line 41
    testRunner.When(string.Format("I type \"{0}\" into the Contact Type text field for item #1 in the Contact Types li" +
                        "st", duplicateValue));
#line 42
    testRunner.And("I click the \"Add\" link for item #1 in the Contact Types list again");
#line 43
    testRunner.Then("I should still see the Institutional Agreement Set Up Module page");
#line 44
    testRunner.And(string.Format("I should see the \'{0} is a Duplicate\' error message for the Contact Type text fie" +
                        "ld", duplicateValue));
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add item to Contact Types list fails when text is duplicate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configure Institutional Agreements Module Contact Types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Home Principal")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DuplicateValue", "Home Principal")]
        public virtual void AddItemToContactTypesListFailsWhenTextIsDuplicate_HomePrincipal()
        {
            this.AddItemToContactTypesListFailsWhenTextIsDuplicate("Home Principal", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add item to Contact Types list fails when text is duplicate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configure Institutional Agreements Module Contact Types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Home Secondary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DuplicateValue", "Home Secondary")]
        public virtual void AddItemToContactTypesListFailsWhenTextIsDuplicate_HomeSecondary()
        {
            this.AddItemToContactTypesListFailsWhenTextIsDuplicate("Home Secondary", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add item to Contact Types list fails when text is duplicate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configure Institutional Agreements Module Contact Types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Partner Principal")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DuplicateValue", "Partner Principal")]
        public virtual void AddItemToContactTypesListFailsWhenTextIsDuplicate_PartnerPrincipal()
        {
            this.AddItemToContactTypesListFailsWhenTextIsDuplicate("Partner Principal", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add item to Contact Types list fails when text is duplicate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configure Institutional Agreements Module Contact Types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Partner Secondary")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:DuplicateValue", "Partner Secondary")]
        public virtual void AddItemToContactTypesListFailsWhenTextIsDuplicate_PartnerSecondary()
        {
            this.AddItemToContactTypesListFailsWhenTextIsDuplicate("Partner Secondary", ((string[])(null)));
        }
        
        public virtual void AddItemToContactTypesListCausesAutomaticAlphabetization(string newItemText, string newItemNumber, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add item to Contact Types list causes automatic alphabetization", exampleTags);
#line 53
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 55
    testRunner.When("I click the \"Click here to set it up now\" link");
#line 56
    testRunner.Then("I should see the Institutional Agreement Set Up Module page");
#line 57
    testRunner.And("I should see an \"Add\" link for item #1 in the Contact Types list");
#line 59
    testRunner.When("I click the \"Add\" link for item #1 in the Contact Types list");
#line 60
    testRunner.Then("I should see a Contact Type text field for item #1 in the Contact Types list");
#line 62
    testRunner.When(string.Format("I type \"{0}\" into the Contact Type text field for item #1 in the Contact Types li" +
                        "st", newItemText));
#line 63
    testRunner.And("I click the \"Add\" link for item #1 in the Contact Types list again");
#line 64
    testRunner.Then(string.Format("I should see an item for \"{0}\" in the Contact Types list", newItemText));
#line 65
    testRunner.And(string.Format("I should see a \"Remove\" link for item #{0} in the Contact Types list", newItemNumber));
#line 67
    testRunner.When(string.Format("I click the \"Remove\" link for item #{0} in the Contact Types list", newItemNumber));
#line 68
    testRunner.Then(string.Format("I shouldn\'t see an item for \"{0}\" in the Contact Types list", newItemText));
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add item to Contact Types list causes automatic alphabetization")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configure Institutional Agreements Module Contact Types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "AAA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NewItemText", "AAA")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NewItemNumber", "2")]
        public virtual void AddItemToContactTypesListCausesAutomaticAlphabetization_AAA()
        {
            this.AddItemToContactTypesListCausesAutomaticAlphabetization("AAA", "2", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add item to Contact Types list causes automatic alphabetization")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configure Institutional Agreements Module Contact Types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Home Pro")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NewItemText", "Home Pro")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NewItemNumber", "3")]
        public virtual void AddItemToContactTypesListCausesAutomaticAlphabetization_HomePro()
        {
            this.AddItemToContactTypesListCausesAutomaticAlphabetization("Home Pro", "3", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add item to Contact Types list causes automatic alphabetization")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configure Institutional Agreements Module Contact Types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Home Soc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NewItemText", "Home Soc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NewItemNumber", "4")]
        public virtual void AddItemToContactTypesListCausesAutomaticAlphabetization_HomeSoc()
        {
            this.AddItemToContactTypesListCausesAutomaticAlphabetization("Home Soc", "4", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add item to Contact Types list causes automatic alphabetization")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configure Institutional Agreements Module Contact Types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Partner Pro")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NewItemText", "Partner Pro")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NewItemNumber", "5")]
        public virtual void AddItemToContactTypesListCausesAutomaticAlphabetization_PartnerPro()
        {
            this.AddItemToContactTypesListCausesAutomaticAlphabetization("Partner Pro", "5", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add item to Contact Types list causes automatic alphabetization")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configure Institutional Agreements Module Contact Types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Partner Soc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NewItemText", "Partner Soc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:NewItemNumber", "6")]
        public virtual void AddItemToContactTypesListCausesAutomaticAlphabetization_PartnerSoc()
        {
            this.AddItemToContactTypesListCausesAutomaticAlphabetization("Partner Soc", "6", ((string[])(null)));
        }
        
        public virtual void EditItemInContactTypesListFailsWhenTextIsEmpty(string listItemNumber, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Edit item in Contact Types list fails when text is empty", exampleTags);
#line 78
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 80
    testRunner.When("I click the \"Click here to set it up now\" link");
#line 81
    testRunner.Then("I should see the Institutional Agreement Set Up Module page");
#line 82
    testRunner.And(string.Format("I should see an \"Edit\" link for item #{0} in the Contact Types list", listItemNumber));
#line 84
    testRunner.When(string.Format("I click the \"Edit\" link for item #{0} in the Contact Types list", listItemNumber));
#line 85
    testRunner.Then(string.Format("I should see a Contact Type text field for item #{0} in the Contact Types list", listItemNumber));
#line 86
    testRunner.And(string.Format("I should see a \"Save\" link for item #{0} in the Contact Types list", listItemNumber));
#line 88
    testRunner.When(string.Format("I type \"\" into the Contact Type text field for item #{0} in the Contact Types lis" +
                        "t", listItemNumber));
#line 89
    testRunner.And(string.Format("I click the \"Save\" link for item #{0} in the Contact Types list", listItemNumber));
#line 90
    testRunner.Then("I should see the Required error message for the Contact Type text field");
#line 92
    testRunner.When("I click the \"Create Configuration\" submit button");
#line 93
    testRunner.Then("I should still see the Institutional Agreement Set Up Module page");
#line 94
    testRunner.And("I should still see the Required error message for the Contact Type text field");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Edit item in Contact Types list fails when text is empty")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configure Institutional Agreements Module Contact Types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ListItemNumber", "2")]
        public virtual void EditItemInContactTypesListFailsWhenTextIsEmpty_2()
        {
            this.EditItemInContactTypesListFailsWhenTextIsEmpty("2", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Edit item in Contact Types list fails when text is empty")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configure Institutional Agreements Module Contact Types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ListItemNumber", "3")]
        public virtual void EditItemInContactTypesListFailsWhenTextIsEmpty_3()
        {
            this.EditItemInContactTypesListFailsWhenTextIsEmpty("3", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Edit item in Contact Types list fails when text is empty")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configure Institutional Agreements Module Contact Types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ListItemNumber", "4")]
        public virtual void EditItemInContactTypesListFailsWhenTextIsEmpty_4()
        {
            this.EditItemInContactTypesListFailsWhenTextIsEmpty("4", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Edit item in Contact Types list fails when text is empty")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configure Institutional Agreements Module Contact Types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ListItemNumber", "5")]
        public virtual void EditItemInContactTypesListFailsWhenTextIsEmpty_5()
        {
            this.EditItemInContactTypesListFailsWhenTextIsEmpty("5", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Edit item in Contact Types list fails when text is duplicate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configure Institutional Agreements Module Contact Types")]
        public virtual void EditItemInContactTypesListFailsWhenTextIsDuplicate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Edit item in Contact Types list fails when text is duplicate", ((string[])(null)));
#line 103
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 105
    testRunner.When("I click the \"Click here to set it up now\" link");
#line 106
    testRunner.Then("I should see the Institutional Agreement Set Up Module page");
#line 107
    testRunner.And("I should see an item for \"Partner Principal\" in the Contact Types list");
#line 108
    testRunner.And("I should see an \"Edit\" link for item #4 in the Contact Types list");
#line 110
    testRunner.When("I click the \"Edit\" link for item #4 in the Contact Types list");
#line 111
    testRunner.Then("I should see a Contact Type text field for item #4 in the Contact Types list");
#line 112
    testRunner.And("I should see a \"Save\" link for item #4 in the Contact Types list");
#line 113
    testRunner.And("I should see a \"Cancel\" link for item #4 in the Contact Types list");
#line 115
    testRunner.When("I type \"Home Secondary\" into the Contact Type text field for item #4 in the Conta" +
                    "ct Types list");
#line 116
    testRunner.And("I click the \"Save\" link for item #4 in the Contact Types list");
#line 117
    testRunner.Then("I should see the \'Home Secondary is a Duplicate\' error message for the Contact Ty" +
                    "pe text field");
#line 118
    testRunner.And("I should still see a \"Cancel\" link for item #4 in the Contact Types list");
#line 120
    testRunner.When("I click the \"Cancel\" link for item #4 in the Contact Types list");
#line 121
    testRunner.Then("I should see an \"Edit\" link for item #4 in the Contact Types list");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void EditItemInContactTypesListReplacesPreviousValue(string listItemNumber, string originalText, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Edit item in Contact Types list replaces previous value", exampleTags);
#line 123
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 125
    testRunner.When("I click the \"Click here to set it up now\" link");
#line 126
    testRunner.Then("I should see the Institutional Agreement Set Up Module page");
#line 127
    testRunner.And(string.Format("I should see an item for \"{0}\" in the Contact Types list", originalText));
#line 128
    testRunner.And(string.Format("I should see an \"Edit\" link for item #{0} in the Contact Types list", listItemNumber));
#line 130
    testRunner.When(string.Format("I click the \"Edit\" link for item #{0} in the Contact Types list", listItemNumber));
#line 131
    testRunner.Then(string.Format("I should see a Contact Type text field for item #{0} in the Contact Types list", listItemNumber));
#line 132
    testRunner.And(string.Format("I should see a \"Save\" link for item #{0} in the Contact Types list", listItemNumber));
#line 134
    testRunner.When(string.Format("I type \"Test Value\" into the Contact Type text field for item #{0} in the Contact" +
                        " Types list", listItemNumber));
#line 135
    testRunner.And(string.Format("I click the \"Save\" link for item #{0} in the Contact Types list", listItemNumber));
#line 136
    testRunner.Then("I should see an item for \"Test Value\" in the Contact Types list");
#line 137
    testRunner.And(string.Format("I shouldn\'t see an item for \"{0}\" in the Contact Types list", originalText));
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Edit item in Contact Types list replaces previous value")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configure Institutional Agreements Module Contact Types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ListItemNumber", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginalText", "Home Principal")]
        public virtual void EditItemInContactTypesListReplacesPreviousValue_2()
        {
            this.EditItemInContactTypesListReplacesPreviousValue("2", "Home Principal", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Edit item in Contact Types list replaces previous value")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configure Institutional Agreements Module Contact Types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ListItemNumber", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginalText", "Home Secondary")]
        public virtual void EditItemInContactTypesListReplacesPreviousValue_3()
        {
            this.EditItemInContactTypesListReplacesPreviousValue("3", "Home Secondary", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Edit item in Contact Types list replaces previous value")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configure Institutional Agreements Module Contact Types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ListItemNumber", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginalText", "Partner Principal")]
        public virtual void EditItemInContactTypesListReplacesPreviousValue_4()
        {
            this.EditItemInContactTypesListReplacesPreviousValue("4", "Partner Principal", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Edit item in Contact Types list replaces previous value")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configure Institutional Agreements Module Contact Types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ListItemNumber", "5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginalText", "Partner Secondary")]
        public virtual void EditItemInContactTypesListReplacesPreviousValue_5()
        {
            this.EditItemInContactTypesListReplacesPreviousValue("5", "Partner Secondary", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Edit item in Contact Types list causes automatic alphabetization")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configure Institutional Agreements Module Contact Types")]
        public virtual void EditItemInContactTypesListCausesAutomaticAlphabetization()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Edit item in Contact Types list causes automatic alphabetization", ((string[])(null)));
#line 146
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 148
    testRunner.When("I click the \"Click here to set it up now\" link");
#line 149
    testRunner.Then("I should see the Institutional Agreement Set Up Module page");
#line 150
    testRunner.And("I should see an item for \"Home Principal\" in the Contact Types list");
#line 151
    testRunner.And("I should see an \"Edit\" link for item #2 in the Contact Types list");
#line 153
    testRunner.When("I click the \"Edit\" link for item #2 in the Contact Types list");
#line 154
    testRunner.Then("I should see a Contact Type text field for item #2 in the Contact Types list");
#line 155
    testRunner.And("I should see a \"Save\" link for item #2 in the Contact Types list");
#line 156
    testRunner.And("I should see a \"Cancel\" link for item #2 in the Contact Types list");
#line 158
    testRunner.When("I type \"XXX Last Agreement\" into the Contact Type text field for item #2 in the C" +
                    "ontact Types list");
#line 159
    testRunner.And("I click the \"Save\" link for item #2 in the Contact Types list");
#line 160
    testRunner.Then("I should see an item for \"XXX Last Agreement\" in the Contact Types list");
#line 161
    testRunner.And("I should not see an item for \"Home Principal\" in the Contact Types list");
#line 163
    testRunner.When("I click the \"Remove\" link for item #5 in the Contact Types list");
#line 164
    testRunner.Then("I shouldn\'t see an item for \"XXX Last Agreement\" in the Contact Types list");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void CancelItemEditInContactTypesList(string listItemNumber, string originalText, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel item edit in Contact Types list", exampleTags);
#line 166
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 168
    testRunner.When("I click the \"Click here to set it up now\" link");
#line 169
    testRunner.Then("I should see the Institutional Agreement Set Up Module page");
#line 170
    testRunner.And(string.Format("I should see an item for \"{0}\" in the Contact Types list", originalText));
#line 171
    testRunner.And(string.Format("I should see an \"Edit\" link for item #{0} in the Contact Types list", listItemNumber));
#line 173
    testRunner.When(string.Format("I click the \"Edit\" link for item #{0} in the Contact Types list", listItemNumber));
#line 174
    testRunner.Then(string.Format("I should see a Contact Type text field for item #{0} in the Contact Types list", listItemNumber));
#line 175
    testRunner.And(string.Format("I should see a \"Cancel\" link for item #{0} in the Contact Types list", listItemNumber));
#line 177
    testRunner.When(string.Format("I type \"Agreement\" into the Contact Type text field for item #{0} in the Contact " +
                        "Types list", listItemNumber));
#line 178
    testRunner.And(string.Format("I click the \"Cancel\" link for item #{0} in the Contact Types list", listItemNumber));
#line 179
    testRunner.Then(string.Format("I should still see an item for \"{0}\" in the Contact Types list", originalText));
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Cancel item edit in Contact Types list")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configure Institutional Agreements Module Contact Types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ListItemNumber", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginalText", "Home Principal")]
        public virtual void CancelItemEditInContactTypesList_2()
        {
            this.CancelItemEditInContactTypesList("2", "Home Principal", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Cancel item edit in Contact Types list")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configure Institutional Agreements Module Contact Types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ListItemNumber", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginalText", "Home Secondary")]
        public virtual void CancelItemEditInContactTypesList_3()
        {
            this.CancelItemEditInContactTypesList("3", "Home Secondary", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Cancel item edit in Contact Types list")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configure Institutional Agreements Module Contact Types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ListItemNumber", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginalText", "Partner Principal")]
        public virtual void CancelItemEditInContactTypesList_4()
        {
            this.CancelItemEditInContactTypesList("4", "Partner Principal", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Cancel item edit in Contact Types list")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configure Institutional Agreements Module Contact Types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ListItemNumber", "5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginalText", "Partner Secondary")]
        public virtual void CancelItemEditInContactTypesList_5()
        {
            this.CancelItemEditInContactTypesList("5", "Partner Secondary", ((string[])(null)));
        }
        
        public virtual void RemoveItemFromContactTypesList(string listItemNumber, string originalText, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove item from Contact Types list", exampleTags);
#line 188
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 190
    testRunner.When("I click the \"Click here to set it up now\" link");
#line 191
    testRunner.Then("I should see the Institutional Agreement Set Up Module page");
#line 192
    testRunner.And(string.Format("I should see a \"Remove\" link for item #{0} in the Contact Types list", listItemNumber));
#line 194
    testRunner.When(string.Format("I click the \"Remove\" link for item #{0} in the Contact Types list", listItemNumber));
#line 195
    testRunner.Then(string.Format("I shouldn\'t see an item for \"{0}\" in the Contact Types list", originalText));
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Remove item from Contact Types list")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configure Institutional Agreements Module Contact Types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ListItemNumber", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginalText", "Home Principal")]
        public virtual void RemoveItemFromContactTypesList_2()
        {
            this.RemoveItemFromContactTypesList("2", "Home Principal", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Remove item from Contact Types list")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configure Institutional Agreements Module Contact Types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ListItemNumber", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginalText", "Home Secondary")]
        public virtual void RemoveItemFromContactTypesList_3()
        {
            this.RemoveItemFromContactTypesList("3", "Home Secondary", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Remove item from Contact Types list")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configure Institutional Agreements Module Contact Types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ListItemNumber", "4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginalText", "Partner Principal")]
        public virtual void RemoveItemFromContactTypesList_4()
        {
            this.RemoveItemFromContactTypesList("4", "Partner Principal", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Remove item from Contact Types list")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configure Institutional Agreements Module Contact Types")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:ListItemNumber", "5")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:OriginalText", "Partner Secondary")]
        public virtual void RemoveItemFromContactTypesList_5()
        {
            this.RemoveItemFromContactTypesList("5", "Partner Secondary", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Changing Contact Type Behavior makes Example combo box read only or editable")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Configure Institutional Agreements Module Contact Types")]
        public virtual void ChangingContactTypeBehaviorMakesExampleComboBoxReadOnlyOrEditable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Changing Contact Type Behavior makes Example combo box read only or editable", ((string[])(null)));
#line 204
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 206
    testRunner.When("I click the \"Click here to set it up now\" link");
#line 207
    testRunner.Then("I should see the Institutional Agreement Set Up Module page");
#line 208
    testRunner.And("I should see a Contact Type Behavior radio button labeled \'Allow any text\'");
#line 209
    testRunner.And("I should see a Contact Type Behavior radio button labeled \'Use specific values\'");
#line 210
    testRunner.And("the Contact Type Behavior radio button labeled \'Allow any text\' should be checked" +
                    "");
#line 211
    testRunner.And("I should see a Contact Type Example text field");
#line 213
    testRunner.When("I check the Contact Type Behavior radio button labeled \'Use specific values\'");
#line 214
    testRunner.Then("the Contact Type Example text field should be read only");
#line 216
    testRunner.When("I check the Contact Type Behavior radio button labeled \'Allow any text\'");
#line 217
    testRunner.Then("the Contact Type Example text field should not be read only");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
