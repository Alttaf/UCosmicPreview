// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.17379
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UCosmic.Www.Mvc.Areas.Roles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ManageRoleGrantsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GrantAuthorization.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Manage Role Grants", "  In order to control access to UCosmic features\r\n  As a Security Executive\r\n  I " +
                    "want to grant and revoke user role memberships", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Manage Role Grants")))
            {
                UCosmic.Www.Mvc.Areas.Roles.ManageRoleGrantsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 8
    testRunner.Given("I am signed in as agent1@uc.edu");
#line 9
    testRunner.And("I am starting from the Role Management page");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Role Name is read only")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Manage Role Grants")]
        public virtual void RoleNameIsReadOnly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Role Name is read only", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 13
    testRunner.When("I click the \"Institutional Agreement Manager\" link");
#line 14
    testRunner.Then("I should see the Role Edit page");
#line 15
    testRunner.And("I should see a Role Description text field");
#line 16
    testRunner.And("I shouldn\'t see a Role Name text field");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void DismissRoleEditFormByClickingTheCancelLink(string roleToEdit, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dismiss Role Edit form by clicking the Cancel link", exampleTags);
#line 18
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 20
    testRunner.When(string.Format("I click the \"{0}\" link", roleToEdit));
#line 21
    testRunner.Then("I should see the Role Edit page");
#line 22
    testRunner.And("I should see a \"Cancel\" link");
#line 24
    testRunner.When("I click the \"Cancel\" link");
#line 25
    testRunner.Then("I should see the Role Management page");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Dismiss Role Edit form by clicking the Cancel link")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Manage Role Grants")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Institutional Agreement Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RoleToEdit", "Institutional Agreement Manager")]
        public virtual void DismissRoleEditFormByClickingTheCancelLink_InstitutionalAgreementManager()
        {
            this.DismissRoleEditFormByClickingTheCancelLink("Institutional Agreement Manager", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Dismiss Role Edit form by clicking the Cancel link")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Manage Role Grants")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Institutional Agreement Supervisor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RoleToEdit", "Institutional Agreement Supervisor")]
        public virtual void DismissRoleEditFormByClickingTheCancelLink_InstitutionalAgreementSupervisor()
        {
            this.DismissRoleEditFormByClickingTheCancelLink("Institutional Agreement Supervisor", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Dismiss Role Edit form by clicking the Cancel link")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Manage Role Grants")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Authorization Agent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RoleToEdit", "Authorization Agent")]
        public virtual void DismissRoleEditFormByClickingTheCancelLink_AuthorizationAgent()
        {
            this.DismissRoleEditFormByClickingTheCancelLink("Authorization Agent", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Dismiss Role Edit form by clicking the Cancel link")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Manage Role Grants")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Authentication Agent")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RoleToEdit", "Authentication Agent")]
        public virtual void DismissRoleEditFormByClickingTheCancelLink_AuthenticationAgent()
        {
            this.DismissRoleEditFormByClickingTheCancelLink("Authentication Agent", ((string[])(null)));
        }
        
        public virtual void SaveRoleFailsWhenDescriptionIsEmpty(string roleToEdit, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Save Role fails when Description is empty", exampleTags);
#line 34
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 36
    testRunner.When(string.Format("I click the \"{0}\" link", roleToEdit));
#line 37
    testRunner.Then("I should see the Role Edit page");
#line 39
    testRunner.When("I type \"\" into the Role Description text field");
#line 40
    testRunner.And("I click the \"Save Changes\" submit button");
#line 41
    testRunner.Then("I should still see the Role Edit page");
#line 42
    testRunner.And("I should see the Required error message for the Role Description text field");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Save Role fails when Description is empty")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Manage Role Grants")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Institutional Agreement Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RoleToEdit", "Institutional Agreement Manager")]
        public virtual void SaveRoleFailsWhenDescriptionIsEmpty_InstitutionalAgreementManager()
        {
            this.SaveRoleFailsWhenDescriptionIsEmpty("Institutional Agreement Manager", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Save Role fails when Description is empty")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Manage Role Grants")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Institutional Agreement Supervisor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RoleToEdit", "Institutional Agreement Supervisor")]
        public virtual void SaveRoleFailsWhenDescriptionIsEmpty_InstitutionalAgreementSupervisor()
        {
            this.SaveRoleFailsWhenDescriptionIsEmpty("Institutional Agreement Supervisor", ((string[])(null)));
        }
        
        public virtual void AddMemberToGrantsListSucceedsWhenMemberIsNotAlreadyInList(string roleToEdit, string userSearchTerm, string foundUser, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add member to Grants list succeeds when member is not already in list", exampleTags);
#line 49
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 51
    testRunner.When(string.Format("I click the \"{0}\" link", roleToEdit));
#line 52
    testRunner.Then("I should see the Role Edit page");
#line 54
    testRunner.When(string.Format("I type \"{0}\" into the Member Search text field", userSearchTerm));
#line 55
    testRunner.Then(string.Format("I should see an autocomplete dropdown menu item \"{0}\" for the Member Search combo" +
                        " field", foundUser));
#line 57
    testRunner.When(string.Format("I click the autocomplete dropdown menu item \"{0}\" for the Member Search combo fie" +
                        "ld", foundUser));
#line 58
    testRunner.Then(string.Format("I should see an item for \"{0}\" in the Members list", foundUser));
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add member to Grants list succeeds when member is not already in list")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Manage Role Grants")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RoleToEdit", "Institutional Agreement Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:UserSearchTerm", "nyb")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:FoundUser", "Debra.Nyby@lehigh.edu")]
        public virtual void AddMemberToGrantsListSucceedsWhenMemberIsNotAlreadyInList_Variant0()
        {
            this.AddMemberToGrantsListSucceedsWhenMemberIsNotAlreadyInList("Institutional Agreement Manager", "nyb", "Debra.Nyby@lehigh.edu", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add member to Grants list succeeds when member is not already in list")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Manage Role Grants")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RoleToEdit", "Institutional Agreement Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:UserSearchTerm", "bal")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:FoundUser", "DBallen@usil.edu.pe")]
        public virtual void AddMemberToGrantsListSucceedsWhenMemberIsNotAlreadyInList_Variant1()
        {
            this.AddMemberToGrantsListSucceedsWhenMemberIsNotAlreadyInList("Institutional Agreement Manager", "bal", "DBallen@usil.edu.pe", ((string[])(null)));
        }
        
        public virtual void AddMemberToGrantsListFailsWhenMemberIsAlreadyInList(string roleToEdit, string userSearchTerm, string foundUser, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add member to Grants list fails when member is already in list", exampleTags);
#line 65
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 67
    testRunner.When(string.Format("I click the \"{0}\" link", roleToEdit));
#line 68
    testRunner.Then("I should see the Role Edit page");
#line 70
    testRunner.When(string.Format("I type \"{0}\" into the Member Search text field", userSearchTerm));
#line 71
    testRunner.Then(string.Format("I should see an autocomplete dropdown menu item \"{0}\" for the Member Search combo" +
                        " field", foundUser));
#line 73
    testRunner.When(string.Format("I click the autocomplete dropdown menu item \"{0}\" for the Member Search combo fie" +
                        "ld", foundUser));
#line 74
    testRunner.Then(string.Format("I should see an item for \"{0}\" in the Members list", foundUser));
#line 76
    testRunner.When(string.Format("I type \"{0}\" into the Member Search text field", userSearchTerm));
#line 77
    testRunner.And("I wait for 2 seconds");
#line 78
    testRunner.Then(string.Format("I shouldn\'t see an autocomplete dropdown menu item \"{0}\" for the Member Search co" +
                        "mbo field", foundUser));
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add member to Grants list fails when member is already in list")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Manage Role Grants")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RoleToEdit", "Institutional Agreement Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:UserSearchTerm", "nyb")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:FoundUser", "Debra.Nyby@lehigh.edu")]
        public virtual void AddMemberToGrantsListFailsWhenMemberIsAlreadyInList_Variant0()
        {
            this.AddMemberToGrantsListFailsWhenMemberIsAlreadyInList("Institutional Agreement Manager", "nyb", "Debra.Nyby@lehigh.edu", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add member to Grants list fails when member is already in list")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Manage Role Grants")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Variant 1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RoleToEdit", "Institutional Agreement Manager")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:UserSearchTerm", "bal")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:FoundUser", "DBallen@usil.edu.pe")]
        public virtual void AddMemberToGrantsListFailsWhenMemberIsAlreadyInList_Variant1()
        {
            this.AddMemberToGrantsListFailsWhenMemberIsAlreadyInList("Institutional Agreement Manager", "bal", "DBallen@usil.edu.pe", ((string[])(null)));
        }
        
        public virtual void AddMemberToGrantsListPersistsAfterSavingChanges(string browser, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "UsingFreshExampleRoleData"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add member to Grants list persists after saving changes", @__tags);
#line 86
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 88
    testRunner.Given(string.Format("I am using the {0} browser", browser));
#line 89
    testRunner.When("I click the \"Test Role\" link");
#line 90
    testRunner.Then("I should see the Role Edit page");
#line 91
    testRunner.And("I should not see an item for \"any1@suny.edu\" in the Members list");
#line 93
    testRunner.When("I type \"any1@suny\" into the Member Search text field");
#line 94
    testRunner.Then("I should see an autocomplete dropdown menu item \"any1@suny.edu\" for the Member Se" +
                    "arch combo field");
#line 96
    testRunner.When("I click the autocomplete dropdown menu item \"any1@suny.edu\" for the Member Search" +
                    " combo field");
#line 97
    testRunner.Then("I should see an item for \"any1@suny.edu\" in the Members list");
#line 99
    testRunner.When("I click the \"Save Changes\" submit button");
#line 100
    testRunner.Then("I should see the Role Management page");
#line 101
    testRunner.And("I should see the flash feedback message \"Role has been successfully saved.\"");
#line 103
    testRunner.When("I click the \"Test Role\" link");
#line 104
    testRunner.Then("I should see the Role Edit page");
#line 105
    testRunner.And("I should see an item for \"any1@suny.edu\" in the Members list");
#line 107
    testRunner.When("I click the remove icon for \"any1@suny.edu\" in the Members list");
#line 108
    testRunner.Then("I should not see an item for \"any1@suny.edu\" in the Members list");
#line 110
    testRunner.When("I click the \"Save Changes\" submit button");
#line 111
    testRunner.Then("I should see the Role Management page");
#line 112
    testRunner.And("I should see the flash feedback message \"Role has been successfully saved.\"");
#line 114
    testRunner.When("I click the \"Test Role\" link");
#line 115
    testRunner.Then("I should see the Role Edit page");
#line 116
    testRunner.And("I should not see an item for \"any1@suny.edu\" in the Members list");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add member to Grants list persists after saving changes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Manage Role Grants")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UsingFreshExampleRoleData")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Chrome")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Browser", "Chrome")]
        public virtual void AddMemberToGrantsListPersistsAfterSavingChanges_Chrome()
        {
            this.AddMemberToGrantsListPersistsAfterSavingChanges("Chrome", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add member to Grants list persists after saving changes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Manage Role Grants")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UsingFreshExampleRoleData")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Firefox")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Browser", "Firefox")]
        public virtual void AddMemberToGrantsListPersistsAfterSavingChanges_Firefox()
        {
            this.AddMemberToGrantsListPersistsAfterSavingChanges("Firefox", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Add member to Grants list persists after saving changes")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Manage Role Grants")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UsingFreshExampleRoleData")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MSIE")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Browser", "MSIE")]
        public virtual void AddMemberToGrantsListPersistsAfterSavingChanges_MSIE()
        {
            this.AddMemberToGrantsListPersistsAfterSavingChanges("MSIE", ((string[])(null)));
        }
    }
}
#pragma warning restore
#endregion
