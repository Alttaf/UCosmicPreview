// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.17379
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UCosmic.Www.Mvc.Areas.Identity
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SignUpFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SignUp.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Sign Up", "  In order to sign into UCosmic.com\r\n  As a consortium member\r\n  I want to sign u" +
                    "p and create a password", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Sign Up")))
            {
                UCosmic.Www.Mvc.Areas.Identity.SignUpFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
    testRunner.Given("I am starting from the Sign On page");
#line hidden
        }
        
        public virtual void SignUpSucceedsAfterReceivingSecretConfirmationCode(string browser, string eligibleEmail, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "GeneratesEmail",
                    "UsingFreshExampleUnregisteredEmailAddresses"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sign Up succeeds after receiving secret confirmation code", @__tags);
#line 10
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line 13
    testRunner.Given(string.Format("I am using the {0} browser", browser));
#line 14
    testRunner.When(string.Format("I type \"{0}\" into the Email Address text field", eligibleEmail));
#line 15
    testRunner.And("I click the \"Next >>\" submit button");
#line 16
    testRunner.Then("I should see the Sign Up page");
#line 17
    testRunner.And("the \"Email me a confirmation code...\" check box should be unchecked");
#line 18
    testRunner.And("the \"Send Confirmation Email\" submit button should be disabled");
#line 21
    testRunner.When("I check the \"Email me a confirmation code...\" check box");
#line 22
    testRunner.Then("the \"Send Confirmation Email\" submit button should become enabled");
#line 25
    testRunner.When("I click the \"Send Confirmation Email\" submit button");
#line 26
    testRunner.Then("I should see the Confirm Email Ownership page");
#line 27
    testRunner.And(string.Format("I should see the flash feedback message \"A sign up confirmation email has been se" +
                        "nt to {0}.\"", eligibleEmail));
#line 30
    testRunner.When("I click the \"Confirm Email Address\" submit button");
#line 31
    testRunner.Then("I should see the Required error message for the Confirmation Code text field");
#line 34
    testRunner.When("I type \"test\" into the Confirmation Code text field");
#line 35
    testRunner.And("I click the \"Confirm Email Address\" submit button");
#line 36
    testRunner.Then("I should see the Invalid error message for the Confirmation Code text field");
#line 39
    testRunner.When("I receive mail with the subject \"Confirm your email address for UCosmic.com\"");
#line 40
    testRunner.And("I type the mailed code into the Confirmation Code text field");
#line 41
    testRunner.And("I click the \"Confirm Email Address\" submit button");
#line 42
    testRunner.Then("I should see the Create Password page");
#line 43
    testRunner.And("I should see the flash feedback message \"Your email address has been confirmed. P" +
                    "lease create your password now.\"");
#line 46
    testRunner.When("I click the \"Create Password\" submit button");
#line 47
    testRunner.Then("I should still see the Create Password page");
#line 48
    testRunner.And("I should see the Required error message for the Password text field");
#line 49
    testRunner.And("I should see the Required error message for the Password Confirmation text field");
#line 52
    testRunner.When("I type \"pass\" into the Password text field");
#line 53
    testRunner.And("I click the \"Create Password\" submit button");
#line 54
    testRunner.Then("I should still see the Create Password page");
#line 55
    testRunner.But("I should see the \'Too Short\' error message for the Password text field");
#line 56
    testRunner.And("I should see the Required error message for the Password Confirmation text field");
#line 59
    testRunner.When("I type \"password\" into the Password text field");
#line 60
    testRunner.And("I click the \"Create Password\" submit button");
#line 61
    testRunner.Then("I should still see the Create Password page");
#line 62
    testRunner.But("I should not see any error messages for the Password text field");
#line 63
    testRunner.And("I should see the Required error message for the Password Confirmation text field");
#line 66
    testRunner.When("I type \"pass\" into the Password Confirmation text field");
#line 67
    testRunner.And("I click the \"Create Password\" submit button");
#line 68
    testRunner.Then("I should still see the Create Password page");
#line 69
    testRunner.But("I should not see any error messages for the Password text field");
#line 70
    testRunner.And("I should see the \'No Match\' error message for the Password Confirmation text fiel" +
                    "d");
#line 73
    testRunner.When("I type \"password\" into the Password Confirmation text field");
#line 74
    testRunner.And("I click the \"Create Password\" submit button");
#line 75
    testRunner.Then("I should see the Enter Password page");
#line 76
    testRunner.And("I should see the flash feedback message \"You can now use your password to sign on" +
                    ".\"");
#line 79
    testRunner.When("I click the \"Sign On\" submit button");
#line 80
    testRunner.Then("I should still see the Enter Password page");
#line 81
    testRunner.And("I should see the Required error message for the Password text field");
#line 84
    testRunner.When("I type \"incorrect\" into the Password text field");
#line 85
    testRunner.And("I click the \"Sign On\" submit button");
#line 86
    testRunner.Then("I should still see the Enter Password page");
#line 87
    testRunner.And("I should see the \'Invalid with 4 remaining attempts\' error message for the Passwo" +
                    "rd text field");
#line 90
    testRunner.When("I type \"password\" into the Password text field");
#line 91
    testRunner.And("I click the \"Sign On\" submit button");
#line 92
    testRunner.Then("I should see the Personal Home page");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sign Up succeeds after receiving secret confirmation code")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sign Up")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GeneratesEmail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UsingFreshExampleUnregisteredEmailAddresses")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Chrome")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Browser", "Chrome")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:EligibleEmail", "new@bjtu.edu.cn")]
        public virtual void SignUpSucceedsAfterReceivingSecretConfirmationCode_Chrome()
        {
            this.SignUpSucceedsAfterReceivingSecretConfirmationCode("Chrome", "new@bjtu.edu.cn", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sign Up succeeds after receiving secret confirmation code")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sign Up")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GeneratesEmail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UsingFreshExampleUnregisteredEmailAddresses")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Firefox")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Browser", "Firefox")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:EligibleEmail", "new@usil.edu.pe")]
        public virtual void SignUpSucceedsAfterReceivingSecretConfirmationCode_Firefox()
        {
            this.SignUpSucceedsAfterReceivingSecretConfirmationCode("Firefox", "new@usil.edu.pe", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Sign Up succeeds after receiving secret confirmation code")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Sign Up")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("GeneratesEmail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("UsingFreshExampleUnregisteredEmailAddresses")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "MSIE")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Browser", "MSIE")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:EligibleEmail", "new@griffith.edu.au")]
        public virtual void SignUpSucceedsAfterReceivingSecretConfirmationCode_MSIE()
        {
            this.SignUpSucceedsAfterReceivingSecretConfirmationCode("MSIE", "new@griffith.edu.au", ((string[])(null)));
        }
    }
}
#pragma warning restore
#endregion
